[
  {
    "id": "lgp-test-5x6-16",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Bob`, `Eric`, `Arnold`\n - The people are of nationalities: `norwegian`, `german`, `dane`, `brit`, `swede`\n - People have unique favorite book genres: `fantasy`, `biography`, `romance`, `mystery`, `science fiction`\n - Everyone has something unique for lunch: `stir fry`, `grilled cheese`, `pizza`, `spaghetti`, `stew`\n - Each person has a favorite color: `red`, `green`, `blue`, `yellow`, `white`\n - The people keep unique animals: `bird`, `dog`, `cat`, `horse`, `fish`\n\nClues:\n1. The person who loves fantasy books is the Norwegian.\n2. The cat lover and the person who loves biography books are next to each other.\n3. The German is Bob.\n4. The person who loves yellow is Bob.\n5. The person whose favorite color is green is Peter.\n6. There is one house between the Dane and the person who is a pizza lover.\n7. The person who loves blue is somewhere to the left of the Dane.\n8. The person who loves eating grilled cheese is somewhere to the left of the Norwegian.\n9. The person who loves the spaghetti eater is Peter.\n10. The person who keeps horses is Alice.\n11. The fish enthusiast is directly left of the person who loves science fiction books.\n12. There is one house between the Norwegian and Arnold.\n13. The person who loves romance books is the British person.\n14. There are two houses between the Norwegian and Alice.\n15. The bird keeper is the person whose favorite color is red.\n16. The dog owner is directly left of the fish enthusiast.\n17. The person who loves the stew is the Norwegian.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "BookGenre",
        "Food",
        "Color",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "german",
          "mystery",
          "grilled cheese",
          "yellow",
          "dog"
        ],
        [
          "2",
          "Eric",
          "norwegian",
          "fantasy",
          "stew",
          "blue",
          "fish"
        ],
        [
          "3",
          "Peter",
          "dane",
          "science fiction",
          "spaghetti",
          "green",
          "cat"
        ],
        [
          "4",
          "Arnold",
          "swede",
          "biography",
          "stir fry",
          "red",
          "bird"
        ],
        [
          "5",
          "Alice",
          "brit",
          "romance",
          "pizza",
          "white",
          "horse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Bob, Eric, Arnold])\nnationalities = EnumSort([norwegian, german, dane, brit, swede])\nbookGenres = EnumSort([fantasy, biography, romance, mystery, science_fiction])\nfoods = EnumSort([stir_fry, grilled_cheese, pizza, spaghetti, stew])\ncolors = EnumSort([red, green, blue, yellow, white])\nanimals = EnumSort([bird, dog, cat, horse, fish])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_food = Function([people] -> [foods])\nhas_color = Function([people] -> [colors])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves fantasy books is the Norwegian\nThe cat lover and the person who loves biography books are next to each other\nThe German is Bob\nThe person who loves yellow is Bob\nThe person whose favorite color is green is Peter\nThere is one house between the Dane and the person who is a pizza lover\nThe person who loves blue is somewhere to the left of the Dane\nThe person who loves eating grilled cheese is somewhere to the left of the Norwegian\nThe person who loves the spaghetti eater is Peter\nThe person who keeps horses is Alice\nThe fish enthusiast is directly left of the person who loves science fiction books\nThere is one house between the Norwegian and Arnold\nThe person who loves romance books is the British person\nThere are two houses between the Norwegian and Alice\nThe bird keeper is the person whose favorite color is red\nThe dog owner is directly left of the fish enthusiast\nThe person who loves the stew is the Norwegian",
    "queries": "And( And( lives(Bob) == 1, has_nationality(Bob) == german, has_bookGenre(Bob) == mystery, has_food(Bob) == grilled_cheese, has_color(Bob) == yellow, has_animal(Bob) == dog ), And( lives(Eric) == 2, has_nationality(Eric) == norwegian, has_bookGenre(Eric) == fantasy, has_food(Eric) == stew, has_color(Eric) == blue, has_animal(Eric) == fish ), And( lives(Peter) == 3, has_nationality(Peter) == dane, has_bookGenre(Peter) == science_fiction, has_food(Peter) == spaghetti, has_color(Peter) == green, has_animal(Peter) == cat ), And( lives(Arnold) == 4, has_nationality(Arnold) == swede, has_bookGenre(Arnold) == biography, has_food(Arnold) == stir_fry, has_color(Arnold) == red, has_animal(Arnold) == bird ), And( lives(Alice) == 5, has_nationality(Alice) == brit, has_bookGenre(Alice) == romance, has_food(Alice) == pizza, has_color(Alice) == white, has_animal(Alice) == horse ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-15",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Peter`, `Eric`, `Arnold`, `Carol`\n - Each mother is accompanied by their child: `Fred`, `Timothy`, `Samantha`, `Alice`, `Meredith`, `Bella`\n - People have unique favorite music genres: `pop`, `hip hop`, `classical`, `jazz`, `rock`, `country`\n - People have unique heights: `average`, `very tall`, `tall`, `super tall`, `very short`, `short`\n\nClues:\n1. There is one house between the person's child is named Samantha and the person who is short.\n2. The person's child is named Alice is Bob.\n3. The person who loves country music is directly left of Arnold.\n4. Alice is the person who is tall.\n5. The person who loves pop music is Eric.\n6. Bob is somewhere to the right of the person who is super tall.\n7. The person's child is named Fred is Peter.\n8. The person's child is named Bella is the person who loves hip-hop music.\n9. The person who is the mother of Timothy is not in the sixth house.\n10. The person who is super tall is somewhere to the right of the person who has an average height.\n11. The person's child is named Alice is somewhere to the right of Arnold.\n12. There is one house between the person who is short and the person who is very short.\n13. The person who is very short is in the fifth house.\n14. The person who loves jazz music is not in the fifth house.\n15. Carol is somewhere to the left of the person who is the mother of Timothy.\n16. The person who is very tall is not in the sixth house.\n17. The person who loves classical music is in the sixth house.\n18. The person who loves rock music is in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "MusicGenre",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "Samantha",
          "rock",
          "average"
        ],
        [
          "2",
          "Peter",
          "Fred",
          "country",
          "super tall"
        ],
        [
          "3",
          "Arnold",
          "Bella",
          "hip hop",
          "short"
        ],
        [
          "4",
          "Bob",
          "Alice",
          "jazz",
          "very tall"
        ],
        [
          "5",
          "Eric",
          "Timothy",
          "pop",
          "very short"
        ],
        [
          "6",
          "Alice",
          "Meredith",
          "classical",
          "tall"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Peter, Eric, Arnold, Carol])\nchildren = EnumSort([Fred, Timothy, Samantha, AliceChild, Meredith, Bella])\nmusicGenres = EnumSort([pop, hip_hop, classical, jazz, rock, country])\nheights = EnumSort([average, very_tall, tall, super_tall, very_short, short])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))\nDistinct([p:people], lives(p))\nDistinct([p:people], has_child(p))\nDistinct([p:people], has_musicGenre(p))\nDistinct([p:people], has_height(p))",
    "constraints": "There is one house between the person's child is named Samantha and the person who is short\nThe person's child is named Alice is Bob\nThe person who loves country music is directly left of Arnold\nAlice is the person who is tall\nThe person who loves pop music is Eric\nBob is somewhere to the right of the person who is super tall\nThe person's child is named Fred is Peter\nThe person's child is named Bella is the person who loves hip-hop music\nThe person who is the mother of Timothy is not in the sixth house\nThe person who is super tall is somewhere to the right of the person who has an average height\nThe person's child is named Alice is somewhere to the right of Arnold\nThere is one house between the person who is short and the person who is very short\nThe person who is very short is in the fifth house\nThe person who loves jazz music is not in the fifth house\nCarol is somewhere to the left of the person who is the mother of Timothy\nThe person who is very tall is not in the sixth house\nThe person who loves classical music is in the sixth house\nThe person who loves rock music is in the first house",
    "queries": "And( And(lives(Carol) == 1, has_child(Carol) == Samantha, has_musicGenre(Carol) == rock, has_height(Carol) == average), And(lives(Peter) == 2, has_child(Peter) == Fred, has_musicGenre(Peter) == country, has_height(Peter) == super_tall), And(lives(Arnold) == 3, has_child(Arnold) == Bella, has_musicGenre(Arnold) == hip_hop, has_height(Arnold) == short), And(lives(Bob) == 4, has_child(Bob) == AliceChild, has_musicGenre(Bob) == jazz, has_height(Bob) == very_tall), And(lives(Eric) == 5, has_child(Eric) == Timothy, has_musicGenre(Eric) == pop, has_height(Eric) == very_short), And(lives(Alice) == 6, has_child(Alice) == Meredith, has_musicGenre(Alice) == classical, has_height(Alice) == tall) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-2",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Carol`, `Alice`, `Peter`, `Eric`\n - The mothers' names in different houses are unique: `Sarah`, `Janelle`, `Aniya`, `Kailyn`, `Holly`, `Penny`\n - Each mother is accompanied by their child: `Fred`, `Samantha`, `Bella`, `Meredith`, `Alice`, `Timothy`\n - Each person prefers a unique type of vacation: `city`, `mountain`, `camping`, `beach`, `cruise`, `cultural`\n - People have unique favorite book genres: `romance`, `mystery`, `historical fiction`, `science fiction`, `biography`, `fantasy`\n\nClues:\n1. The person who loves beach vacations is not in the second house.\n2. The person who loves fantasy books is somewhere to the left of Peter.\n3. The person whose mother's name is Sarah is the person who prefers city breaks.\n4. The person who enjoys camping trips is somewhere to the right of Peter.\n5. The person who likes going on cruises is the person's child is named Meredith.\n6. There is one house between the person who is the mother of Timothy and Eric.\n7. The person whose mother's name is Janelle is not in the second house.\n8. The person's child is named Fred is somewhere to the left of Eric.\n9. The person who goes on cultural tours is in the fourth house.\n10. The person whose mother's name is Janelle is not in the first house.\n11. The person whose mother's name is Holly is somewhere to the right of the person who loves historical fiction books.\n12. The person's child is named Bella is somewhere to the left of Alice.\n13. Arnold is somewhere to the right of the person who loves fantasy books.\n14. The person who loves mystery books is in the fourth house.\n15. The person's child is named Alice is the person who enjoys camping trips.\n16. The person whose mother's name is Kailyn is the person who likes going on cruises.\n17. There are two houses between the person who loves fantasy books and The person whose mother's name is Aniya.\n18. The person who loves fantasy books is Carol.\n19. The person who likes going on cruises is the person who loves biography books.\n20. The person who loves fantasy books is in the third house.\n21. The person whose mother's name is Aniya is the person who loves romance books.\n22. The person whose mother's name is Janelle is not in the fourth house.\n23. The person's child is named Fred is not in the fourth house.\n24. The person who loves biography books is not in the second house.\n25. There are two houses between The person whose mother's name is Holly and Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Children",
        "Vacation",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "Sarah",
          "Bella",
          "city",
          "historical fiction"
        ],
        [
          "2",
          "Alice",
          "Holly",
          "Fred",
          "mountain",
          "science fiction"
        ],
        [
          "3",
          "Carol",
          "Janelle",
          "Timothy",
          "beach",
          "fantasy"
        ],
        [
          "4",
          "Peter",
          "Penny",
          "Samantha",
          "cultural",
          "mystery"
        ],
        [
          "5",
          "Eric",
          "Kailyn",
          "Meredith",
          "cruise",
          "biography"
        ],
        [
          "6",
          "Arnold",
          "Aniya",
          "Alice",
          "camping",
          "romance"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Carol, Alice, Peter, Eric])\nmothers = EnumSort([Sarah, Janelle, Aniya, Kailyn, Holly, Penny])\nchildren = EnumSort([Fred, Samantha, Bella, Meredith, Alice, Timothy])\nvacations = EnumSort([city, mountain, camping, beach, cruise, cultural])\nbookGenres = EnumSort([romance, mystery, historical_fiction, science_fiction, biography, fantasy])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nhas_child = Function([people] -> [children])\nprefers_vacation = Function([people] -> [vacations])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves beach vacations is not in the second house\nThe person who loves fantasy books is somewhere to the left of Peter\nThe person whose mother's name is Sarah is the person who prefers city breaks\nThe person who enjoys camping trips is somewhere to the right of Peter\nThe person who likes going on cruises is the person's child is named Meredith\nThere is one house between the person who is the mother of Timothy and Eric\nThe person whose mother's name is Janelle is not in the second house\nThe person's child is named Fred is somewhere to the left of Eric\nThe person who goes on cultural tours is in the fourth house\nThe person whose mother's name is Janelle is not in the first house\nThe person whose mother's name is Holly is somewhere to the right of the person who loves historical fiction books\nThe person's child is named Bella is somewhere to the left of Alice\nArnold is somewhere to the right of the person who loves fantasy books\nThe person who loves mystery books is in the fourth house\nThe person's child is named Alice is the person who enjoys camping trips\nThe person whose mother's name is Kailyn is the person who likes going on cruises\nThere are two houses between the person who loves fantasy books and The person whose mother's name is Aniya\nThe person who loves fantasy books is Carol\nThe person who likes going on cruises is the person who loves biography books\nThe person who loves fantasy books is in the third house\nThe person whose mother's name is Aniya is the person who loves romance books\nThe person whose mother's name is Janelle is not in the fourth house\nThe person's child is named Fred is not in the fourth house\nThe person who loves biography books is not in the second house\nThere are two houses between The person whose mother's name is Holly and Eric",
    "queries": "And( And(lives(Bob) == 1, has_mother(Bob) == Sarah, has_child(Bob) == Bella, prefers_vacation(Bob) == city, has_bookGenre(Bob) == historical_fiction), And(lives(Alice) == 2, has_mother(Alice) == Holly, has_child(Alice) == Fred, prefers_vacation(Alice) == mountain, has_bookGenre(Alice) == science_fiction), And(lives(Carol) == 3, has_mother(Carol) == Janelle, has_child(Carol) == Timothy, prefers_vacation(Carol) == beach, has_bookGenre(Carol) == fantasy), And(lives(Peter) == 4, has_mother(Peter) == Penny, has_child(Peter) == Samantha, prefers_vacation(Peter) == cultural, has_bookGenre(Peter) == mystery), And(lives(Eric) == 5, has_mother(Eric) == Kailyn, has_child(Eric) == Meredith, prefers_vacation(Eric) == cruise, has_bookGenre(Eric) == biography), And(lives(Arnold) == 6, has_mother(Arnold) == Aniya, has_child(Arnold) == Alice, prefers_vacation(Arnold) == camping, has_bookGenre(Arnold) == romance) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-30",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Bob`, `Eric`, `Arnold`\n - Each person has a unique level of education: `master`, `bachelor`, `doctorate`, `high school`, `associate`\n - Each person has a favorite color: `yellow`, `green`, `blue`, `red`, `white`\n - Each person prefers a unique type of vacation: `mountain`, `camping`, `cruise`, `beach`, `city`\n - People use unique phone models: `huawei p50`, `google pixel 6`, `iphone 13`, `oneplus 9`, `samsung galaxy s21`\n\nClues:\n1. Alice is the person with a master's degree.\n2. The person who uses a OnePlus 9 is the person with a doctorate.\n3. The person who loves blue is somewhere to the left of Bob.\n4. The person who prefers city breaks is Peter.\n5. The person who loves beach vacations is the person whose favorite color is green.\n6. The person who loves white is the person who uses an iPhone 13.\n7. The person who uses a OnePlus 9 is the person who enjoys mountain retreats.\n8. The person who uses a Huawei P50 is somewhere to the left of the person whose favorite color is red.\n9. The person who loves beach vacations is not in the first house.\n10. Alice is in the fourth house.\n11. Eric and Peter are next to each other.\n12. Alice is the person whose favorite color is red.\n13. There is one house between Peter and the person who uses a OnePlus 9.\n14. The person with a bachelor's degree is the person who uses a Samsung Galaxy S21.\n15. The person who enjoys camping trips is the person who loves blue.\n16. The person who loves beach vacations is the person with a high school diploma.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Color",
        "Vacation",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "bachelor",
          "blue",
          "camping",
          "samsung galaxy s21"
        ],
        [
          "2",
          "Eric",
          "high school",
          "green",
          "beach",
          "huawei p50"
        ],
        [
          "3",
          "Peter",
          "associate",
          "white",
          "city",
          "iphone 13"
        ],
        [
          "4",
          "Alice",
          "master",
          "red",
          "cruise",
          "google pixel 6"
        ],
        [
          "5",
          "Bob",
          "doctorate",
          "yellow",
          "mountain",
          "oneplus 9"
        ]
      ]
    },
    "declarations": "people = EnumSort([alice, peter, bob, eric, arnold])\neducationLevels = EnumSort([master, bachelor, doctorate, high_school, associate])\ncolors = EnumSort([yellow, green, blue, red, white])\nvacations = EnumSort([mountain, camping, cruise, beach, city])\nphones = EnumSort([huawei_p50, google_pixel_6, iphone_13, oneplus_9, samsung_galaxy_s21])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_color = Function([people] -> [colors])\nhas_vacation = Function([people] -> [vacations])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Alice is the person with a master's degree\nThe person who uses a OnePlus 9 is the person with a doctorate\nThe person who loves blue is somewhere to the left of Bob\nThe person who prefers city breaks is Peter\nThe person who loves beach vacations is the person whose favorite color is green\nThe person who loves white is the person who uses an iPhone 13\nThe person who uses a OnePlus 9 is the person who enjoys mountain retreats\nThe person who uses a Huawei P50 is somewhere to the left of the person whose favorite color is red\nThe person who loves beach vacations is not in the first house\nAlice is in the fourth house\nEric and Peter are next to each other\nAlice is the person whose favorite color is red\nThere is one house between Peter and the person who uses a OnePlus 9\nThe person with a bachelor's degree is the person who uses a Samsung Galaxy S21\nThe person who enjoys camping trips is the person who loves blue\nThe person who loves beach vacations is the person with a high school diploma",
    "queries": "And( And(lives(Arnold) == 1, has_education(Arnold) == bachelor, has_color(Arnold) == blue, has_vacation(Arnold) == camping, has_phone(Arnold) == samsung_galaxy_s21), And(lives(Eric) == 2, has_education(Eric) == high_school, has_color(Eric) == green, has_vacation(Eric) == beach, has_phone(Eric) == huawei_p50), And(lives(Peter) == 3, has_education(Peter) == associate, has_color(Peter) == white, has_vacation(Peter) == city, has_phone(Peter) == iphone_13), And(lives(Alice) == 4, has_education(Alice) == master, has_color(Alice) == red, has_vacation(Alice) == cruise, has_phone(Alice) == google_pixel_6), And(lives(Bob) == 5, has_education(Bob) == doctorate, has_color(Bob) == yellow, has_vacation(Bob) == mountain, has_phone(Bob) == oneplus_9) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-0",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Alice`, `Eric`, `Peter`\n - People have unique favorite sports: `basketball`, `soccer`, `tennis`, `baseball`, `swimming`\n - The people keep unique animals: `dog`, `fish`, `horse`, `bird`, `cat`\n - People use unique phone models: `oneplus 9`, `google pixel 6`, `samsung galaxy s21`, `iphone 13`, `huawei p50`\n - People have unique hair colors: `black`, `red`, `brown`, `blonde`, `gray`\n - Each person lives in a unique style of house: `modern`, `craftsman`, `victorian`, `ranch`, `colonial`\n\nClues:\n1. The person who has gray hair is the person who loves tennis.\n2. The person in a ranch-style home is in the fourth house.\n3. The person living in a colonial-style house is the person who loves swimming.\n4. The dog owner is somewhere to the right of the person who has gray hair.\n5. The fish enthusiast is the person who has gray hair.\n6. The person who has black hair is not in the fifth house.\n7. The person who uses a Samsung Galaxy S21 is the bird keeper.\n8. There is one house between the fish enthusiast and the person who uses a Samsung Galaxy S21.\n9. The person residing in a Victorian house is somewhere to the left of the person in a Craftsman-style house.\n10. The person who has red hair is not in the fifth house.\n11. There is one house between the person who uses a Samsung Galaxy S21 and the person who uses a Huawei P50.\n12. The person who uses an iPhone 13 is the person in a Craftsman-style house.\n13. Eric is the person who has red hair.\n14. The person who has red hair is not in the fourth house.\n15. The person who uses a OnePlus 9 is in the first house.\n16. The person who loves soccer is the dog owner.\n17. The person who keeps horses is Bob.\n18. Arnold is the fish enthusiast.\n19. The person who loves baseball is Peter.\n20. The person who loves soccer is in the fourth house.\n21. The person who has blonde hair is directly left of the person who has black hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Animal",
        "PhoneModel",
        "HairColor",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "tennis",
          "fish",
          "oneplus 9",
          "gray",
          "victorian"
        ],
        [
          "2",
          "Eric",
          "basketball",
          "cat",
          "iphone 13",
          "red",
          "craftsman"
        ],
        [
          "3",
          "Peter",
          "baseball",
          "bird",
          "samsung galaxy s21",
          "blonde",
          "modern"
        ],
        [
          "4",
          "Alice",
          "soccer",
          "dog",
          "google pixel 6",
          "black",
          "ranch"
        ],
        [
          "5",
          "Bob",
          "swimming",
          "horse",
          "huawei p50",
          "brown",
          "colonial"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Alice, Eric, Peter])\nsports = EnumSort([basketball, soccer, tennis, baseball, swimming])\nanimals = EnumSort([dog, fish, horse, bird, cat])\nphones = EnumSort([oneplus_9, google_pixel_6, samsung_galaxy_s21, iphone_13, huawei_p50])\nhair_colors = EnumSort([black, red, brown, blonde, gray])\nhouse_styles = EnumSort([modern, craftsman, victorian, ranch, colonial])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_animal = Function([people] -> [animals])\nuses_phone = Function([people] -> [phones])\nhas_hair_color = Function([people] -> [hair_colors])\nlives_in_house = Function([people] -> [house_styles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has gray hair is the person who loves tennis\nThe person in a ranch-style home is in the fourth house\nThe person living in a colonial-style house is the person who loves swimming\nThe dog owner is somewhere to the right of the person who has gray hair\nThe fish enthusiast is the person who has gray hair\nThe person who has black hair is not in the fifth house\nThe person who uses a Samsung Galaxy S21 is the bird keeper\nThere is one house between the fish enthusiast and the person who uses a Samsung Galaxy S21\nThe person residing in a Victorian house is somewhere to the left of the person in a Craftsman-style house\nThe person who has red hair is not in the fifth house\nThere is one house between the person who uses a Samsung Galaxy S21 and the person who uses a Huawei P50\nThe person who uses an iPhone 13 is the person in a Craftsman-style house\nEric is the person who has red hair\nThe person who has red hair is not in the fourth house\nThe person who uses a OnePlus 9 is in the first house\nThe person who loves soccer is the dog owner\nThe person who keeps horses is Bob\nArnold is the fish enthusiast\nThe person who loves baseball is Peter\nThe person who loves soccer is in the fourth house\nThe person who has blonde hair is directly left of the person who has black hair",
    "queries": "And( And( lives(Arnold) == 1, has_sport(Arnold) == tennis, has_animal(Arnold) == fish, uses_phone(Arnold) == oneplus_9, has_hair_color(Arnold) == gray, lives_in_house(Arnold) == victorian ), And( lives(Eric) == 2, has_sport(Eric) == basketball, has_animal(Eric) == cat, uses_phone(Eric) == iphone_13, has_hair_color(Eric) == red, lives_in_house(Eric) == craftsman ), And( lives(Peter) == 3, has_sport(Peter) == baseball, has_animal(Peter) == bird, uses_phone(Peter) == samsung_galaxy_s21, has_hair_color(Peter) == blonde, lives_in_house(Peter) == modern ), And( lives(Alice) == 4, has_sport(Alice) == soccer, has_animal(Alice) == dog, uses_phone(Alice) == google_pixel_6, has_hair_color(Alice) == black, lives_in_house(Alice) == ranch ), And( lives(Bob) == 5, has_sport(Bob) == swimming, has_animal(Bob) == horse, uses_phone(Bob) == huawei_p50, has_hair_color(Bob) == brown, lives_in_house(Bob) == colonial ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-12",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Bob`, `Peter`\n - Everyone has a favorite smoothie: `watermelon`, `cherry`, `dragonfruit`, `lime`, `desert`\n - People have unique favorite music genres: `hip hop`, `classical`, `rock`, `pop`, `jazz`\n - Everyone has something unique for lunch: `grilled cheese`, `pizza`, `spaghetti`, `stir fry`, `stew`\n - Each person has a unique favorite drink: `tea`, `root beer`, `milk`, `water`, `coffee`\n\nClues:\n1. The coffee drinker is not in the first house.\n2. The person who loves jazz music is the Desert smoothie lover.\n3. The Watermelon smoothie lover is in the fourth house.\n4. The coffee drinker is directly left of Peter.\n5. The one who only drinks water is the person who loves hip-hop music.\n6. The Dragonfruit smoothie lover is directly left of the one who only drinks water.\n7. The Desert smoothie lover is in the fifth house.\n8. The person who loves stir fry is somewhere to the right of Bob.\n9. The person who is a pizza lover is the person who likes Cherry smoothies.\n10. The person who loves classical music is the person who loves the stew.\n11. The one who only drinks water is Bob.\n12. The root beer lover is the Dragonfruit smoothie lover.\n13. There is one house between Arnold and the person who likes Cherry smoothies.\n14. The person who loves the spaghetti eater is in the fifth house.\n15. The person who likes milk is in the fifth house.\n16. The person who likes Cherry smoothies is Bob.\n17. The Dragonfruit smoothie lover is the person who loves the stew.\n18. Eric and Peter are next to each other.\n19. The person who loves rock music is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "MusicGenre",
        "Food",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "lime",
          "pop",
          "grilled cheese",
          "tea"
        ],
        [
          "2",
          "Alice",
          "dragonfruit",
          "classical",
          "stew",
          "root beer"
        ],
        [
          "3",
          "Bob",
          "cherry",
          "hip hop",
          "pizza",
          "water"
        ],
        [
          "4",
          "Eric",
          "watermelon",
          "rock",
          "stir fry",
          "coffee"
        ],
        [
          "5",
          "Peter",
          "desert",
          "jazz",
          "spaghetti",
          "milk"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Bob, Peter])\nsmoothies = EnumSort([watermelon, cherry, dragonfruit, lime, desert])\nmusicGenres = EnumSort([hip_hop, classical, rock, pop, jazz])\nfoods = EnumSort([grilled_cheese, pizza, spaghetti, stir_fry, stew])\ndrinks = EnumSort([tea, root_beer, milk, water, coffee])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_food = Function([people] -> [foods])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The coffee drinker is not in the first house\nThe person who loves jazz music is the Desert smoothie lover\nThe Watermelon smoothie lover is in the fourth house\nThe coffee drinker is directly left of Peter\nThe one who only drinks water is the person who loves hip-hop music\nThe Dragonfruit smoothie lover is directly left of the one who only drinks water\nThe Desert smoothie lover is in the fifth house\nThe person who loves stir fry is somewhere to the right of Bob\nThe person who is a pizza lover is the person who likes Cherry smoothies\nThe person who loves classical music is the person who loves the stew\nThe one who only drinks water is Bob\nThe root beer lover is the Dragonfruit smoothie lover\nThere is one house between Arnold and the person who likes Cherry smoothies\nThe person who loves the spaghetti eater is in the fifth house\nThe person who likes milk is in the fifth house\nThe person who likes Cherry smoothies is Bob\nThe Dragonfruit smoothie lover is the person who loves the stew\nEric and Peter are next to each other\nThe person who loves rock music is not in the first house",
    "queries": "And( And(lives(Arnold) == 1, has_smoothie(Arnold) == lime, has_musicGenre(Arnold) == pop, has_food(Arnold) == grilled_cheese, has_drink(Arnold) == tea), And(lives(Alice) == 2, has_smoothie(Alice) == dragonfruit, has_musicGenre(Alice) == classical, has_food(Alice) == stew, has_drink(Alice) == root_beer), And(lives(Bob) == 3, has_smoothie(Bob) == cherry, has_musicGenre(Bob) == hip_hop, has_food(Bob) == pizza, has_drink(Bob) == water), And(lives(Eric) == 4, has_smoothie(Eric) == watermelon, has_musicGenre(Eric) == rock, has_food(Eric) == stir_fry, has_drink(Eric) == coffee), And(lives(Peter) == 5, has_smoothie(Peter) == desert, has_musicGenre(Peter) == jazz, has_food(Peter) == spaghetti, has_drink(Peter) == milk) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-30",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Arnold`, `Bob`\n - Each person has a unique type of pet: `cat`, `dog`, `bird`, `fish`, `hamster`\n - Everyone has a unique favorite cigar: `pall mall`, `blends`, `prince`, `dunhill`, `blue master`\n - Everyone has a favorite smoothie: `watermelon`, `desert`, `dragonfruit`, `cherry`, `lime`\n - People use unique phone models: `google pixel 6`, `oneplus 9`, `samsung galaxy s21`, `iphone 13`, `huawei p50`\n - People have unique favorite sports: `baseball`, `soccer`, `basketball`, `swimming`, `tennis`\n\nClues:\n1. The person who loves swimming is directly left of the Prince smoker.\n2. The person who smokes Blue Master is somewhere to the right of Eric.\n3. The person who uses a OnePlus 9 is Arnold.\n4. Arnold is somewhere to the right of the person with a pet hamster.\n5. The person who owns a dog is Peter.\n6. Eric is the Desert smoothie lover.\n7. The person who loves basketball is not in the fifth house.\n8. The person who has a cat is the person who uses a Samsung Galaxy S21.\n9. The person who loves baseball is directly left of Peter.\n10. There is one house between the Desert smoothie lover and the Dunhill smoker.\n11. The person who loves baseball and the person who uses a Google Pixel 6 are next to each other.\n12. The person who keeps a pet bird is in the second house.\n13. The person who uses a Huawei P50 is in the fourth house.\n14. The person who drinks Lime smoothies is in the fourth house.\n15. The person partial to Pall Mall is in the fifth house.\n16. The Dragonfruit smoothie lover is in the second house.\n17. The person who loves tennis is the person with a pet hamster.\n18. Bob is somewhere to the right of the person who owns a dog.\n19. The Watermelon smoothie lover is Arnold.\n20. The Prince smoker is somewhere to the left of the Dunhill smoker.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "Cigar",
        "Smoothie",
        "PhoneModel",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "cat",
          "blends",
          "desert",
          "samsung galaxy s21",
          "swimming"
        ],
        [
          "2",
          "Alice",
          "bird",
          "prince",
          "dragonfruit",
          "iphone 13",
          "baseball"
        ],
        [
          "3",
          "Peter",
          "dog",
          "dunhill",
          "cherry",
          "google pixel 6",
          "basketball"
        ],
        [
          "4",
          "Bob",
          "hamster",
          "blue master",
          "lime",
          "huawei p50",
          "tennis"
        ],
        [
          "5",
          "Arnold",
          "fish",
          "pall mall",
          "watermelon",
          "oneplus 9",
          "soccer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Arnold, Bob])\npets = EnumSort([cat, dog, bird, fish, hamster])\ncigars = EnumSort([pall_mall, blends, prince, dunhill, blue_master])\nsmoothies = EnumSort([watermelon, desert, dragonfruit, cherry, lime])\nphones = EnumSort([google_pixel_6, oneplus_9, samsung_galaxy_s21, iphone_13, huawei_p50])\nsports = EnumSort([baseball, soccer, basketball, swimming, tennis])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_cigar = Function([people] -> [cigars])\nhas_smoothie = Function([people] -> [smoothies])\nhas_phone = Function([people] -> [phones])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves swimming is directly left of the Prince smoker\nThe person who smokes Blue Master is somewhere to the right of Eric\nThe person who uses a OnePlus 9 is Arnold\nArnold is somewhere to the right of the person with a pet hamster\nThe person who owns a dog is Peter\nEric is the Desert smoothie lover\nThe person who loves basketball is not in the fifth house\nThe person who has a cat is the person who uses a Samsung Galaxy S21\nThe person who loves baseball is directly left of Peter\nThere is one house between the Desert smoothie lover and the Dunhill smoker\nThe person who loves baseball and the person who uses a Google Pixel 6 are next to each other\nThe person who keeps a pet bird is in the second house\nThe person who uses a Huawei P50 is in the fourth house\nThe person who drinks Lime smoothies is in the fourth house\nThe person partial to Pall Mall is in the fifth house\nThe Dragonfruit smoothie lover is in the second house\nThe person who loves tennis is the person with a pet hamster\nBob is somewhere to the right of the person who owns a dog\nThe Watermelon smoothie lover is Arnold\nThe Prince smoker is somewhere to the left of the Dunhill smoker",
    "queries": "And( And(lives(Eric) == 1, has_pet(Eric) == cat, has_cigar(Eric) == blends, has_smoothie(Eric) == desert, has_phone(Eric) == samsung_galaxy_s21, has_sport(Eric) == swimming), And(lives(Alice) == 2, has_pet(Alice) == bird, has_cigar(Alice) == prince, has_smoothie(Alice) == dragonfruit, has_phone(Alice) == iphone_13, has_sport(Alice) == baseball), And(lives(Peter) == 3, has_pet(Peter) == dog, has_cigar(Peter) == dunhill, has_smoothie(Peter) == cherry, has_phone(Peter) == google_pixel_6, has_sport(Peter) == basketball), And(lives(Bob) == 4, has_pet(Bob) == hamster, has_cigar(Bob) == blue_master, has_smoothie(Bob) == lime, has_phone(Bob) == huawei_p50, has_sport(Bob) == tennis), And(lives(Arnold) == 5, has_pet(Arnold) == fish, has_cigar(Arnold) == pall_mall, has_smoothie(Arnold) == watermelon, has_phone(Arnold) == oneplus_9, has_sport(Arnold) == soccer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-10",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Alice`, `Eric`, `Peter`\n - The people are of nationalities: `dane`, `swede`, `german`, `brit`, `norwegian`\n - Each person has a unique hobby: `gardening`, `painting`, `knitting`, `photography`, `cooking`\n - Everyone has a favorite smoothie: `dragonfruit`, `lime`, `watermelon`, `desert`, `cherry`\n - People have unique hair colors: `brown`, `gray`, `black`, `blonde`, `red`\n - People have unique favorite sports: `baseball`, `soccer`, `swimming`, `tennis`, `basketball`\n\nClues:\n1. The person who loves cooking is not in the second house.\n2. The Watermelon smoothie lover is not in the fourth house.\n3. The person who loves baseball is somewhere to the right of the Desert smoothie lover.\n4. The person who drinks Lime smoothies is the person who has brown hair.\n5. The person who has gray hair is somewhere to the right of the Swedish person.\n6. The photography enthusiast is not in the fifth house.\n7. The Swedish person is not in the first house.\n8. The German is the person who has blonde hair.\n9. There is one house between the Watermelon smoothie lover and the photography enthusiast.\n10. Alice and the person who drinks Lime smoothies are next to each other.\n11. The British person and the person who enjoys knitting are next to each other.\n12. The person who has black hair is the Swedish person.\n13. The British person is the person who enjoys gardening.\n14. The person who loves swimming is the person who loves cooking.\n15. The Dragonfruit smoothie lover is not in the third house.\n16. The Watermelon smoothie lover is not in the second house.\n17. Eric is somewhere to the left of the person who drinks Lime smoothies.\n18. The person who loves soccer is Alice.\n19. Peter is the photography enthusiast.\n20. The person who enjoys gardening is directly left of the person who loves tennis.\n21. The Norwegian and the photography enthusiast are next to each other.\n22. The British person is Alice.\n23. Bob is the person who has blonde hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Hobby",
        "Smoothie",
        "HairColor",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "german",
          "cooking",
          "watermelon",
          "blonde",
          "swimming"
        ],
        [
          "2",
          "Eric",
          "norwegian",
          "painting",
          "desert",
          "red",
          "basketball"
        ],
        [
          "3",
          "Peter",
          "swede",
          "photography",
          "cherry",
          "black",
          "baseball"
        ],
        [
          "4",
          "Alice",
          "brit",
          "gardening",
          "dragonfruit",
          "gray",
          "soccer"
        ],
        [
          "5",
          "Arnold",
          "dane",
          "knitting",
          "lime",
          "brown",
          "tennis"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Alice, Eric, Peter])\nnationalities = EnumSort([dane, swede, german, brit, norwegian])\nhobbies = EnumSort([gardening, painting, knitting, photography, cooking])\nsmoothies = EnumSort([dragonfruit, lime, watermelon, desert, cherry])\nhairColors = EnumSort([brown, gray, black, blonde, red])\nsports = EnumSort([baseball, soccer, swimming, tennis, basketball])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_hobby = Function([people] -> [hobbies])\nhas_smoothie = Function([people] -> [smoothies])\nhas_hairColor = Function([people] -> [hairColors])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves cooking is not in the second house\nThe Watermelon smoothie lover is not in the fourth house\nThe person who loves baseball is somewhere to the right of the Desert smoothie lover\nThe person who drinks Lime smoothies is the person who has brown hair\nThe person who has gray hair is somewhere to the right of the Swedish person\nThe photography enthusiast is not in the fifth house\nThe Swedish person is not in the first house\nThe German is the person who has blonde hair\nThere is one house between the Watermelon smoothie lover and the photography enthusiast\nAlice and the person who drinks Lime smoothies are next to each other\nThe British person and the person who enjoys knitting are next to each other\nThe person who has black hair is the Swedish person\nThe British person is the person who enjoys gardening\nThe person who loves swimming is the person who loves cooking\nThe Dragonfruit smoothie lover is not in the third house\nThe Watermelon smoothie lover is not in the second house\nEric is somewhere to the left of the person who drinks Lime smoothies\nThe person who loves soccer is Alice\nPeter is the photography enthusiast\nThe person who enjoys gardening is directly left of the person who loves tennis\nThe Norwegian and the photography enthusiast are next to each other\nThe British person is Alice\nBob is the person who has blonde hair",
    "queries": "And( And(lives(Bob) == 1, has_nationality(Bob) == german, has_hobby(Bob) == cooking, has_smoothie(Bob) == watermelon, has_hairColor(Bob) == blonde, has_sport(Bob) == swimming), And(lives(Eric) == 2, has_nationality(Eric) == norwegian, has_hobby(Eric) == painting, has_smoothie(Eric) == desert, has_hairColor(Eric) == red, has_sport(Eric) == basketball), And(lives(Peter) == 3, has_nationality(Peter) == swede, has_hobby(Peter) == photography, has_smoothie(Peter) == cherry, has_hairColor(Peter) == black, has_sport(Peter) == baseball), And(lives(Alice) == 4, has_nationality(Alice) == brit, has_hobby(Alice) == gardening, has_smoothie(Alice) == dragonfruit, has_hairColor(Alice) == gray, has_sport(Alice) == soccer), And(lives(Arnold) == 5, has_nationality(Arnold) == dane, has_hobby(Arnold) == knitting, has_smoothie(Arnold) == lime, has_hairColor(Arnold) == brown, has_sport(Arnold) == tennis) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-20",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Carol`, `Bob`, `Peter`, `Arnold`, `Alice`\n - Everyone has something unique for lunch: `stew`, `stir fry`, `soup`, `grilled cheese`, `pizza`, `spaghetti`\n - Each person has a unique favorite drink: `root beer`, `milk`, `boba tea`, `water`, `coffee`, `tea`\n - People have unique heights: `super tall`, `short`, `tall`, `very short`, `very tall`, `average`\n - Each person has a unique birthday month: `sept`, `feb`, `may`, `mar`, `jan`, `april`\n\nClues:\n1. The person whose birthday is in January is Peter.\n2. The person who loves eating grilled cheese is the person whose birthday is in May.\n3. The person whose birthday is in April is the person who loves stir fry.\n4. The person who loves the stew is the one who only drinks water.\n5. The person whose birthday is in September is not in the fourth house.\n6. The person who likes milk is somewhere to the left of the person who loves stir fry.\n7. The coffee drinker is in the fifth house.\n8. The person who loves eating grilled cheese is directly left of the one who only drinks water.\n9. The person whose birthday is in May is directly left of Arnold.\n10. The root beer lover is somewhere to the left of Alice.\n11. There are two houses between Eric and the person who is a pizza lover.\n12. The person who loves the spaghetti eater is the person who is very short.\n13. The person who is super tall is the tea drinker.\n14. The person who is tall is not in the third house.\n15. Peter is directly left of the person who is a pizza lover.\n16. The person who likes milk is somewhere to the right of the one who only drinks water.\n17. The person who is very short is the coffee drinker.\n18. The person who is super tall is Bob.\n19. The person who is super tall and the person whose birthday is in March are next to each other.\n20. Carol is somewhere to the left of the person who has an average height.\n21. The person who is very tall is the person who loves the stew.\n22. There is one house between the person who loves eating grilled cheese and Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Drink",
        "Height",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "grilled cheese",
          "root beer",
          "tall",
          "may"
        ],
        [
          "2",
          "Arnold",
          "stew",
          "water",
          "very tall",
          "sept"
        ],
        [
          "3",
          "Peter",
          "soup",
          "milk",
          "short",
          "jan"
        ],
        [
          "4",
          "Bob",
          "pizza",
          "tea",
          "super tall",
          "feb"
        ],
        [
          "5",
          "Carol",
          "spaghetti",
          "coffee",
          "very short",
          "mar"
        ],
        [
          "6",
          "Alice",
          "stir fry",
          "boba tea",
          "average",
          "april"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Carol, Bob, Peter, Arnold, Alice])\nfoods = EnumSort([stew, stir_fry, soup, grilled_cheese, pizza, spaghetti])\ndrinks = EnumSort([root_beer, milk, boba_tea, water, coffee, tea])\nheights = EnumSort([super_tall, short, tall, very_short, very_tall, average])\nbirthdays = EnumSort([sept, feb, may, mar, jan, april])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_drink = Function([people] -> [drinks])\nhas_height = Function([people] -> [heights])\nhas_birthday = Function([people] -> [birthdays])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in January is Peter\nThe person who loves eating grilled cheese is the person whose birthday is in May\nThe person whose birthday is in April is the person who loves stir fry\nThe person who loves the stew is the one who only drinks water\nThe person whose birthday is in September is not in the fourth house\nThe person who likes milk is somewhere to the left of the person who loves stir fry\nThe coffee drinker is in the fifth house\nThe person who loves eating grilled cheese is directly left of the one who only drinks water\nThe person whose birthday is in May is directly left of Arnold\nThe root beer lover is somewhere to the left of Alice\nThere are two houses between Eric and the person who is a pizza lover\nThe person who loves the spaghetti eater is the person who is very short\nThe person who is super tall is the tea drinker\nThe person who is tall is not in the third house\nPeter is directly left of the person who is a pizza lover\nThe person who likes milk is somewhere to the right of the one who only drinks water\nThe person who is very short is the coffee drinker\nThe person who is super tall is Bob\nThe person who is super tall and the person whose birthday is in March are next to each other\nCarol is somewhere to the left of the person who has an average height\nThe person who is very tall is the person who loves the stew\nThere is one house between the person who loves eating grilled cheese and Peter",
    "queries": "And( And(lives(Eric) == 1, has_food(Eric) == grilled_cheese, has_drink(Eric) == root_beer, has_height(Eric) == tall, has_birthday(Eric) == may), And(lives(Arnold) == 2, has_food(Arnold) == stew, has_drink(Arnold) == water, has_height(Arnold) == very_tall, has_birthday(Arnold) == sept), And(lives(Peter) == 3, has_food(Peter) == soup, has_drink(Peter) == milk, has_height(Peter) == short, has_birthday(Peter) == jan), And(lives(Bob) == 4, has_food(Bob) == pizza, has_drink(Bob) == tea, has_height(Bob) == super_tall, has_birthday(Bob) == feb), And(lives(Carol) == 5, has_food(Carol) == spaghetti, has_drink(Carol) == coffee, has_height(Carol) == very_short, has_birthday(Carol) == mar), And(lives(Alice) == 6, has_food(Alice) == stir_fry, has_drink(Alice) == boba_tea, has_height(Alice) == average, has_birthday(Alice) == april) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-37",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Peter`, `Eric`\n - Each person has a unique hobby: `cooking`, `gardening`, `painting`, `photography`, `knitting`\n - People have unique favorite sports: `swimming`, `tennis`, `soccer`, `baseball`, `basketball`\n - Each person lives in a unique style of house: `ranch`, `craftsman`, `victorian`, `modern`, `colonial`\n - Each mother is accompanied by their child: `Timothy`, `Samantha`, `Bella`, `Meredith`, `Fred`\n - People have unique heights: `average`, `very tall`, `very short`, `short`, `tall`\n\nClues:\n1. The person who has an average height is the person's child is named Meredith.\n2. The person who is tall is in the second house.\n3. Peter is directly left of the person residing in a Victorian house.\n4. Alice is the person who is tall.\n5. The person who loves baseball is the person who is very tall.\n6. The person's child is named Meredith and the person who is the mother of Timothy are next to each other.\n7. Bob is the person who paints as a hobby.\n8. The person who enjoys gardening is in the second house.\n9. The person who is very short is somewhere to the right of Eric.\n10. The person who loves tennis is the person's child is named Samantha.\n11. The person who loves soccer is not in the first house.\n12. The person's child is named Samantha is the person in a modern-style house.\n13. The person in a Craftsman-style house is the person who has an average height.\n14. The person's child is named Fred is the person residing in a Victorian house.\n15. The person who is short is the person who loves basketball.\n16. Peter is the person who is very tall.\n17. The person in a ranch-style home is somewhere to the left of the person who loves cooking.\n18. The person who enjoys knitting and the person who enjoys gardening are next to each other.\n19. The person in a modern-style house is the person who loves cooking.\n20. The person residing in a Victorian house is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "FavoriteSport",
        "HouseStyle",
        "Children",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "knitting",
          "swimming",
          "craftsman",
          "Meredith",
          "average"
        ],
        [
          "2",
          "Alice",
          "gardening",
          "soccer",
          "ranch",
          "Timothy",
          "tall"
        ],
        [
          "3",
          "Arnold",
          "cooking",
          "tennis",
          "modern",
          "Samantha",
          "very short"
        ],
        [
          "4",
          "Peter",
          "photography",
          "baseball",
          "colonial",
          "Bella",
          "very tall"
        ],
        [
          "5",
          "Bob",
          "painting",
          "basketball",
          "victorian",
          "Fred",
          "short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Peter, Eric])\nhobbies = EnumSort([cooking, gardening, painting, photography, knitting])\nsports = EnumSort([swimming, tennis, soccer, baseball, basketball])\nhouseStyles = EnumSort([ranch, craftsman, victorian, modern, colonial])\nchildren = EnumSort([Timothy, Samantha, Bella, Meredith, Fred])\nheights = EnumSort([average, very_tall, very_short, short, tall])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_sport = Function([people] -> [sports])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_child = Function([people] -> [children])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has an average height is the person's child is named Meredith\nThe person who is tall is in the second house\nPeter is directly left of the person residing in a Victorian house\nAlice is the person who is tall\nThe person who loves baseball is the person who is very tall\nThe person's child is named Meredith and the person who is the mother of Timothy are next to each other\nBob is the person who paints as a hobby\nThe person who enjoys gardening is in the second house\nThe person who is very short is somewhere to the right of Eric\nThe person who loves tennis is the person's child is named Samantha\nThe person who loves soccer is not in the first house\nThe person's child is named Samantha is the person in a modern-style house\nThe person in a Craftsman-style house is the person who has an average height\nThe person's child is named Fred is the person residing in a Victorian house\nThe person who is short is the person who loves basketball\nPeter is the person who is very tall\nThe person in a ranch-style home is somewhere to the left of the person who loves cooking\nThe person who enjoys knitting and the person who enjoys gardening are next to each other\nThe person in a modern-style house is the person who loves cooking\nThe person residing in a Victorian house is in the fifth house",
    "queries": "And( And(lives(Eric) == 1, has_hobby(Eric) == knitting, has_sport(Eric) == swimming, has_houseStyle(Eric) == craftsman, has_child(Eric) == Meredith, has_height(Eric) == average), And(lives(Alice) == 2, has_hobby(Alice) == gardening, has_sport(Alice) == soccer, has_houseStyle(Alice) == ranch, has_child(Alice) == Timothy, has_height(Alice) == tall), And(lives(Arnold) == 3, has_hobby(Arnold) == cooking, has_sport(Arnold) == tennis, has_houseStyle(Arnold) == modern, has_child(Arnold) == Samantha, has_height(Arnold) == very_short), And(lives(Peter) == 4, has_hobby(Peter) == photography, has_sport(Peter) == baseball, has_houseStyle(Peter) == colonial, has_child(Peter) == Bella, has_height(Peter) == very_tall), And(lives(Bob) == 5, has_hobby(Bob) == painting, has_sport(Bob) == basketball, has_houseStyle(Bob) == victorian, has_child(Bob) == Fred, has_height(Bob) == short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-4",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Arnold`, `Eric`, `Alice`, `Bob`, `Peter`\n - Each person has a unique level of education: `bachelor`, `high school`, `master`, `associate`, `trade school`, `doctorate`\n - Each person has a favorite color: `purple`, `yellow`, `white`, `red`, `blue`, `green`\n - The people are of nationalities: `swede`, `dane`, `norwegian`, `chinese`, `brit`, `german`\n - Each person has a unique birthday month: `feb`, `may`, `sept`, `april`, `jan`, `mar`\n\nClues:\n1. The person who loves yellow is somewhere to the right of the person whose birthday is in January.\n2. Bob is the person who loves white.\n3. The person who loves blue is the person whose birthday is in April.\n4. The person with an associate's degree is Eric.\n5. The person whose favorite color is green is the person whose birthday is in May.\n6. The person who loves yellow is not in the fifth house.\n7. The person with an associate's degree is directly left of the Swedish person.\n8. The person with a doctorate is the Dane.\n9. The person whose birthday is in January is somewhere to the right of the person whose favorite color is green.\n10. There are two houses between the British person and the person whose birthday is in February.\n11. The person whose birthday is in February is in the fourth house.\n12. Alice is the person with a high school diploma.\n13. Carol is in the first house.\n14. Bob is the German.\n15. The person whose birthday is in May is directly left of the Norwegian.\n16. The person whose favorite color is red is not in the fifth house.\n17. The person whose birthday is in September is in the second house.\n18. There are two houses between the person whose birthday is in May and the person with a master's degree.\n19. The Norwegian is Peter.\n20. The person who attended trade school is the person who loves purple.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Color",
        "Nationality",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "bachelor",
          "green",
          "brit",
          "may"
        ],
        [
          "2",
          "Peter",
          "trade school",
          "purple",
          "norwegian",
          "sept"
        ],
        [
          "3",
          "Arnold",
          "doctorate",
          "red",
          "dane",
          "jan"
        ],
        [
          "4",
          "Bob",
          "master",
          "white",
          "german",
          "feb"
        ],
        [
          "5",
          "Eric",
          "associate",
          "blue",
          "chinese",
          "april"
        ],
        [
          "6",
          "Alice",
          "high school",
          "yellow",
          "swede",
          "mar"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Arnold, Eric, Alice, Bob, Peter])\neducationLevels = EnumSort([bachelor, high_school, master, associate, trade_school, doctorate])\ncolors = EnumSort([purple, yellow, white, red, blue, green])\nnationalities = EnumSort([swede, dane, norwegian, chinese, brit, german])\nmonths = EnumSort([feb, may, sept, april, jan, mar])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_color = Function([people] -> [colors])\nhas_nationality = Function([people] -> [nationalities])\nhas_birthday = Function([people] -> [months])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves yellow is somewhere to the right of the person whose birthday is in January\nBob is the person who loves white\nThe person who loves blue is the person whose birthday is in April\nThe person with an associate's degree is Eric\nThe person whose favorite color is green is the person whose birthday is in May\nThe person who loves yellow is not in the fifth house\nThe person with an associate's degree is directly left of the Swedish person\nThe person with a doctorate is the Dane\nThe person whose birthday is in January is somewhere to the right of the person whose favorite color is green\nThere are two houses between the British person and the person whose birthday is in February\nThe person whose birthday is in February is in the fourth house\nAlice is the person with a high school diploma\nCarol is in the first house\nBob is the German\nThe person whose birthday is in May is directly left of the Norwegian\nThe person whose favorite color is red is not in the fifth house\nThe person whose birthday is in September is in the second house\nThere are two houses between the person whose birthday is in May and the person with a master's degree\nThe Norwegian is Peter\nThe person who attended trade school is the person who loves purple",
    "queries": "And( And(lives(Carol) == 1, has_education(Carol) == bachelor, has_color(Carol) == green, has_nationality(Carol) == brit, has_birthday(Carol) == may), And(lives(Peter) == 2, has_education(Peter) == trade_school, has_color(Peter) == purple, has_nationality(Peter) == norwegian, has_birthday(Peter) == sept), And(lives(Arnold) == 3, has_education(Arnold) == doctorate, has_color(Arnold) == red, has_nationality(Arnold) == dane, has_birthday(Arnold) == jan), And(lives(Bob) == 4, has_education(Bob) == master, has_color(Bob) == white, has_nationality(Bob) == german, has_birthday(Bob) == feb), And(lives(Eric) == 5, has_education(Eric) == associate, has_color(Eric) == blue, has_nationality(Eric) == chinese, has_birthday(Eric) == april), And(lives(Alice) == 6, has_education(Alice) == high_school, has_color(Alice) == yellow, has_nationality(Alice) == swede, has_birthday(Alice) == mar) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-36",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Arnold`, `Eric`\n - Each person lives in a unique style of house: `victorian`, `ranch`, `craftsman`, `colonial`\n - People have unique favorite music genres: `pop`, `classical`, `rock`, `jazz`\n - They all have a unique favorite flower: `roses`, `lilies`, `carnations`, `daffodils`\n - Each person prefers a unique type of vacation: `city`, `beach`, `mountain`, `cruise`\n - Each person has a favorite color: `red`, `white`, `yellow`, `green`\n\nClues:\n1. The person who loves classical music is Peter.\n2. The person in a ranch-style home is not in the fourth house.\n3. The person who loves a bouquet of daffodils is the person living in a colonial-style house.\n4. The person living in a colonial-style house is the person who loves white.\n5. The person who prefers city breaks and the person whose favorite color is red are next to each other.\n6. The person who loves the rose bouquet is not in the fourth house.\n7. The person who likes going on cruises is in the second house.\n8. The person who prefers city breaks is the person who loves rock music.\n9. The person who loves pop music is Alice.\n10. The person who loves the rose bouquet is the person who prefers city breaks.\n11. Eric is the person who enjoys mountain retreats.\n12. The person who enjoys mountain retreats is directly left of the person who loves a bouquet of daffodils.\n13. The person who loves yellow is somewhere to the left of the person who likes going on cruises.\n14. The person who enjoys mountain retreats is the person residing in a Victorian house.\n15. The person who loves classical music is the person who likes going on cruises.\n16. Peter is somewhere to the right of the person who loves the boquet of lilies.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "MusicGenre",
        "Flower",
        "Vacation",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "victorian",
          "jazz",
          "lilies",
          "mountain",
          "yellow"
        ],
        [
          "2",
          "Peter",
          "colonial",
          "classical",
          "daffodils",
          "cruise",
          "white"
        ],
        [
          "3",
          "Arnold",
          "ranch",
          "rock",
          "roses",
          "city",
          "green"
        ],
        [
          "4",
          "Alice",
          "craftsman",
          "pop",
          "carnations",
          "beach",
          "red"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Arnold, Eric])\nhouseStyles = EnumSort([victorian, ranch, craftsman, colonial])\nmusicGenres = EnumSort([pop, classical, rock, jazz])\nflowers = EnumSort([roses, lilies, carnations, daffodils])\nvacations = EnumSort([city, beach, mountain, cruise])\ncolors = EnumSort([red, white, yellow, green])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_flower = Function([people] -> [flowers])\nhas_vacation = Function([people] -> [vacations])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves classical music is Peter\nThe person in a ranch-style home is not in the fourth house\nThe person who loves a bouquet of daffodils is the person living in a colonial-style house\nThe person living in a colonial-style house is the person who loves white\nThe person who prefers city breaks and the person whose favorite color is red are next to each other\nThe person who loves the rose bouquet is not in the fourth house\nThe person who likes going on cruises is in the second house\nThe person who prefers city breaks is the person who loves rock music\nThe person who loves pop music is Alice\nThe person who loves the rose bouquet is the person who prefers city breaks\nEric is the person who enjoys mountain retreats\nThe person who enjoys mountain retreats is directly left of the person who loves a bouquet of daffodils\nThe person who loves yellow is somewhere to the left of the person who likes going on cruises\nThe person who enjoys mountain retreats is the person residing in a Victorian house\nThe person who loves classical music is the person who likes going on cruises\nPeter is somewhere to the right of the person who loves the boquet of lilies",
    "queries": "And( And( lives(Eric) == 1, has_houseStyle(Eric) == victorian, has_musicGenre(Eric) == jazz, has_flower(Eric) == lilies, has_vacation(Eric) == mountain, has_color(Eric) == yellow ), And( lives(Peter) == 2, has_houseStyle(Peter) == colonial, has_musicGenre(Peter) == classical, has_flower(Peter) == daffodils, has_vacation(Peter) == cruise, has_color(Peter) == white ), And( lives(Arnold) == 3, has_houseStyle(Arnold) == ranch, has_musicGenre(Arnold) == rock, has_flower(Arnold) == roses, has_vacation(Arnold) == city, has_color(Arnold) == green ), And( lives(Alice) == 4, has_houseStyle(Alice) == craftsman, has_musicGenre(Alice) == pop, has_flower(Alice) == carnations, has_vacation(Alice) == beach, has_color(Alice) == red ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-0",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Arnold`, `Eric`, `Alice`\n - Everyone has something unique for lunch: `stew`, `stir fry`, `spaghetti`, `grilled cheese`, `pizza`\n - Everyone has a favorite smoothie: `watermelon`, `lime`, `desert`, `dragonfruit`, `cherry`\n - People have unique favorite book genres: `fantasy`, `biography`, `mystery`, `science fiction`, `romance`\n - Each person has a unique hobby: `photography`, `knitting`, `cooking`, `gardening`, `painting`\n\nClues:\n1. The person who loves stir fry is the Desert smoothie lover.\n2. The person who loves the spaghetti eater is the person who enjoys gardening.\n3. Bob is somewhere to the left of the person who loves mystery books.\n4. The person who paints as a hobby is directly left of Alice.\n5. The Desert smoothie lover is the person who loves romance books.\n6. The photography enthusiast and the person who loves eating grilled cheese are next to each other.\n7. The person who loves cooking is somewhere to the left of the Desert smoothie lover.\n8. The person who likes Cherry smoothies is Alice.\n9. There is one house between the person who drinks Lime smoothies and the person who enjoys gardening.\n10. The Watermelon smoothie lover is Eric.\n11. The person who loves eating grilled cheese is directly left of the Dragonfruit smoothie lover.\n12. The person who is a pizza lover is Alice.\n13. The person who loves romance books is Peter.\n14. The person who loves fantasy books is the Watermelon smoothie lover.\n15. Alice is the person who loves biography books.\n16. Eric is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Smoothie",
        "BookGenre",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "stew",
          "lime",
          "science fiction",
          "photography"
        ],
        [
          "2",
          "Eric",
          "grilled cheese",
          "watermelon",
          "fantasy",
          "cooking"
        ],
        [
          "3",
          "Arnold",
          "spaghetti",
          "dragonfruit",
          "mystery",
          "gardening"
        ],
        [
          "4",
          "Peter",
          "stir fry",
          "desert",
          "romance",
          "painting"
        ],
        [
          "5",
          "Alice",
          "pizza",
          "cherry",
          "biography",
          "knitting"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Arnold, Eric, Alice])\nfoods = EnumSort([stew, stir_fry, spaghetti, grilled_cheese, pizza])\nsmoothies = EnumSort([watermelon, lime, desert, dragonfruit, cherry])\nbookGenres = EnumSort([fantasy, biography, mystery, science_fiction, romance])\nhobbies = EnumSort([photography, knitting, cooking, gardening, painting])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_smoothie = Function([people] -> [smoothies])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves stir fry is the Desert smoothie lover\nThe person who loves the spaghetti eater is the person who enjoys gardening\nBob is somewhere to the left of the person who loves mystery books\nThe person who paints as a hobby is directly left of Alice\nThe Desert smoothie lover is the person who loves romance books\nThe photography enthusiast and the person who loves eating grilled cheese are next to each other\nThe person who loves cooking is somewhere to the left of the Desert smoothie lover\nThe person who likes Cherry smoothies is Alice\nThere is one house between the person who drinks Lime smoothies and the person who enjoys gardening\nThe Watermelon smoothie lover is Eric\nThe person who loves eating grilled cheese is directly left of the Dragonfruit smoothie lover\nThe person who is a pizza lover is Alice\nThe person who loves romance books is Peter\nThe person who loves fantasy books is the Watermelon smoothie lover\nAlice is the person who loves biography books\nEric is not in the third house",
    "queries": "And( And(lives(Bob) == 1, has_food(Bob) == stew, has_smoothie(Bob) == lime, has_bookGenre(Bob) == science_fiction, has_hobby(Bob) == photography), And(lives(Eric) == 2, has_food(Eric) == grilled_cheese, has_smoothie(Eric) == watermelon, has_bookGenre(Eric) == fantasy, has_hobby(Eric) == cooking), And(lives(Arnold) == 3, has_food(Arnold) == spaghetti, has_smoothie(Arnold) == dragonfruit, has_bookGenre(Arnold) == mystery, has_hobby(Arnold) == gardening), And(lives(Peter) == 4, has_food(Peter) == stir_fry, has_smoothie(Peter) == desert, has_bookGenre(Peter) == romance, has_hobby(Peter) == painting), And(lives(Alice) == 5, has_food(Alice) == pizza, has_smoothie(Alice) == cherry, has_bookGenre(Alice) == biography, has_hobby(Alice) == knitting) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-12",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Peter`, `Bob`\n - People have unique heights: `average`, `tall`, `short`, `very short`, `very tall`\n - Each person has a unique hobby: `cooking`, `knitting`, `photography`, `gardening`, `painting`\n - Each person prefers a unique type of vacation: `cruise`, `city`, `mountain`, `beach`, `camping`\n - People own unique car models: `ford f150`, `toyota camry`, `tesla model 3`, `honda civic`, `bmw 3 series`\n - Each person has a unique level of education: `bachelor`, `doctorate`, `master`, `high school`, `associate`\n\nClues:\n1. The person who is short is directly left of the person with a high school diploma.\n2. The person who enjoys mountain retreats is the person who paints as a hobby.\n3. The person who loves cooking is the person with a doctorate.\n4. The person who owns a Honda Civic is in the third house.\n5. The person who owns a Honda Civic is the person who has an average height.\n6. Bob is the person who paints as a hobby.\n7. The person with a master's degree is Eric.\n8. The person who enjoys knitting is directly left of the person with a high school diploma.\n9. The person who owns a Toyota Camry and the person who enjoys camping trips are next to each other.\n10. Peter is not in the fifth house.\n11. The person who prefers city breaks is the person who owns a BMW 3 Series.\n12. The person who owns a Honda Civic is Eric.\n13. The person who paints as a hobby is the person with a bachelor's degree.\n14. Arnold is not in the second house.\n15. The person who owns a Ford F-150 is not in the second house.\n16. The person who enjoys gardening is the person who likes going on cruises.\n17. The person who loves beach vacations is the person who is very short.\n18. The person who owns a BMW 3 Series is not in the first house.\n19. The person who owns a Toyota Camry is directly left of the person who is tall.\n20. Arnold is not in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Hobby",
        "Vacation",
        "CarModel",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "very tall",
          "painting",
          "mountain",
          "toyota camry",
          "bachelor"
        ],
        [
          "2",
          "Peter",
          "tall",
          "cooking",
          "camping",
          "tesla model 3",
          "doctorate"
        ],
        [
          "3",
          "Eric",
          "average",
          "gardening",
          "cruise",
          "honda civic",
          "master"
        ],
        [
          "4",
          "Arnold",
          "short",
          "knitting",
          "city",
          "bmw 3 series",
          "associate"
        ],
        [
          "5",
          "Alice",
          "very short",
          "photography",
          "beach",
          "ford f150",
          "high school"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Peter, Bob])\nheights = EnumSort([average, tall, short, very_short, very_tall])\nhobbies = EnumSort([cooking, knitting, photography, gardening, painting])\nvacations = EnumSort([cruise, city, mountain, beach, camping])\ncars = EnumSort([ford_f150, toyota_camry, tesla_model_3, honda_civic, bmw_3_series])\neducation = EnumSort([bachelor, doctorate, master, high_school, associate])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_hobby = Function([people] -> [hobbies])\nprefers_vacation = Function([people] -> [vacations])\nowns_car = Function([people] -> [cars])\nhas_education = Function([people] -> [education])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who is short is directly left of the person with a high school diploma\nThe person who enjoys mountain retreats is the person who paints as a hobby\nThe person who loves cooking is the person with a doctorate\nThe person who owns a Honda Civic is in the third house\nThe person who owns a Honda Civic is the person who has an average height\nBob is the person who paints as a hobby\nThe person with a master's degree is Eric\nThe person who enjoys knitting is directly left of the person with a high school diploma\nThe person who owns a Toyota Camry and the person who enjoys camping trips are next to each other\nPeter is not in the fifth house\nThe person who prefers city breaks is the person who owns a BMW 3 Series\nThe person who owns a Honda Civic is Eric\nThe person who paints as a hobby is the person with a bachelor's degree\nArnold is not in the second house\nThe person who owns a Ford F-150 is not in the second house\nThe person who enjoys gardening is the person who likes going on cruises\nThe person who loves beach vacations is the person who is very short\nThe person who owns a BMW 3 Series is not in the first house\nThe person who owns a Toyota Camry is directly left of the person who is tall\nArnold is not in the fifth house",
    "queries": "And( And(lives(Bob) == 1, has_height(Bob) == very_tall, has_hobby(Bob) == painting, prefers_vacation(Bob) == mountain, owns_car(Bob) == toyota_camry, has_education(Bob) == bachelor), And(lives(Peter) == 2, has_height(Peter) == tall, has_hobby(Peter) == cooking, prefers_vacation(Peter) == camping, owns_car(Peter) == tesla_model_3, has_education(Peter) == doctorate), And(lives(Eric) == 3, has_height(Eric) == average, has_hobby(Eric) == gardening, prefers_vacation(Eric) == cruise, owns_car(Eric) == honda_civic, has_education(Eric) == master), And(lives(Arnold) == 4, has_height(Arnold) == short, has_hobby(Arnold) == knitting, prefers_vacation(Arnold) == city, owns_car(Arnold) == bmw_3_series, has_education(Arnold) == associate), And(lives(Alice) == 5, has_height(Alice) == very_short, has_hobby(Alice) == photography, prefers_vacation(Alice) == beach, owns_car(Alice) == ford_f150, has_education(Alice) == high_school) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-29",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Alice`, `Bob`, `Peter`\n - Each person prefers a unique type of vacation: `cruise`, `city`, `mountain`, `camping`, `beach`\n - Each mother is accompanied by their child: `Fred`, `Bella`, `Meredith`, `Samantha`, `Timothy`\n - Each person has a unique type of pet: `bird`, `fish`, `dog`, `hamster`, `cat`\n - People have unique favorite sports: `basketball`, `swimming`, `tennis`, `baseball`, `soccer`\n - Each person has a unique favorite drink: `tea`, `coffee`, `water`, `milk`, `root beer`\n\nClues:\n1. The person who keeps a pet bird is the person who loves baseball.\n2. The person with a pet hamster is not in the fourth house.\n3. The person's child is named Bella is in the third house.\n4. The person who prefers city breaks is directly left of the person's child is named Samantha.\n5. The person's child is named Meredith is the person who enjoys camping trips.\n6. There is one house between the person who prefers city breaks and Peter.\n7. The person who loves tennis is the person's child is named Fred.\n8. The person who owns a dog is Bob.\n9. Bob is the person who loves beach vacations.\n10. Bob is directly left of the person who has a cat.\n11. The person's child is named Bella is the root beer lover.\n12. The person who likes going on cruises is the person who likes milk.\n13. The coffee drinker is not in the fourth house.\n14. The one who only drinks water is the person who loves swimming.\n15. The person who loves basketball is the person who has a cat.\n16. The person who loves swimming is not in the fourth house.\n17. The person who loves baseball is Eric.\n18. There are two houses between Bob and the person's child is named Meredith.\n19. The person who likes milk is the person who is the mother of Timothy.\n20. The person's child is named Fred is directly left of Arnold.\n21. The person who keeps a pet bird is directly left of Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Children",
        "Pet",
        "FavoriteSport",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "cruise",
          "Timothy",
          "bird",
          "baseball",
          "milk"
        ],
        [
          "2",
          "Bob",
          "beach",
          "Fred",
          "dog",
          "tennis",
          "coffee"
        ],
        [
          "3",
          "Arnold",
          "city",
          "Bella",
          "cat",
          "basketball",
          "root beer"
        ],
        [
          "4",
          "Alice",
          "mountain",
          "Samantha",
          "fish",
          "soccer",
          "tea"
        ],
        [
          "5",
          "Peter",
          "camping",
          "Meredith",
          "hamster",
          "swimming",
          "water"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Alice, Bob, Peter])\nvacations = EnumSort([cruise, city, mountain, camping, beach])\nchildren = EnumSort([Fred, Bella, Meredith, Samantha, Timothy])\npets = EnumSort([bird, fish, dog, hamster, cat])\nsports = EnumSort([basketball, swimming, tennis, baseball, soccer])\ndrinks = EnumSort([tea, coffee, water, milk, root_beer])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nhas_child = Function([people] -> [children])\nkeeps_pet = Function([people] -> [pets])\nloves_sport = Function([people] -> [sports])\nfavorite_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who keeps a pet bird is the person who loves baseball\nThe person with a pet hamster is not in the fourth house\nThe person's child is named Bella is in the third house\nThe person who prefers city breaks is directly left of the person's child is named Samantha\nThe person's child is named Meredith is the person who enjoys camping trips\nThere is one house between the person who prefers city breaks and Peter\nThe person who loves tennis is the person's child is named Fred\nThe person who owns a dog is Bob\nBob is the person who loves beach vacations\nBob is directly left of the person who has a cat\nThe person's child is named Bella is the root beer lover\nThe person who likes going on cruises is the person who likes milk\nThe coffee drinker is not in the fourth house\nThe one who only drinks water is the person who loves swimming\nThe person who loves basketball is the person who has a cat\nThe person who loves swimming is not in the fourth house\nThe person who loves baseball is Eric\nThere are two houses between Bob and the person's child is named Meredith\nThe person who likes milk is the person who is the mother of Timothy\nThe person's child is named Fred is directly left of Arnold\nThe person who keeps a pet bird is directly left of Bob",
    "queries": "And( And(lives(Eric) == 1, prefers_vacation(Eric) == cruise, has_child(Eric) == Timothy, keeps_pet(Eric) == bird, loves_sport(Eric) == baseball, favorite_drink(Eric) == milk), And(lives(Bob) == 2, prefers_vacation(Bob) == beach, has_child(Bob) == Fred, keeps_pet(Bob) == dog, loves_sport(Bob) == tennis, favorite_drink(Bob) == coffee), And(lives(Arnold) == 3, prefers_vacation(Arnold) == city, has_child(Arnold) == Bella, keeps_pet(Arnold) == cat, loves_sport(Arnold) == basketball, favorite_drink(Arnold) == root_beer), And(lives(Alice) == 4, prefers_vacation(Alice) == mountain, has_child(Alice) == Samantha, keeps_pet(Alice) == fish, loves_sport(Alice) == soccer, favorite_drink(Alice) == tea), And(lives(Peter) == 5, prefers_vacation(Peter) == camping, has_child(Peter) == Meredith, keeps_pet(Peter) == hamster, loves_sport(Peter) == swimming, favorite_drink(Peter) == water) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-21",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Alice`, `Bob`\n - Each person has a unique type of pet: `bird`, `dog`, `hamster`, `fish`, `cat`\n - People have unique favorite book genres: `fantasy`, `romance`, `science fiction`, `biography`, `mystery`\n - People have unique favorite sports: `basketball`, `soccer`, `tennis`, `baseball`, `swimming`\n - Everyone has a unique favorite cigar: `pall mall`, `prince`, `blue master`, `blends`, `dunhill`\n\nClues:\n1. The Dunhill smoker is in the fifth house.\n2. The person with an aquarium of fish is directly left of the person who loves biography books.\n3. The person who loves mystery books is somewhere to the left of Arnold.\n4. The person who smokes many unique blends is the person who loves soccer.\n5. The person who loves romance books is directly left of the person who smokes Blue Master.\n6. Arnold is somewhere to the right of the person who loves fantasy books.\n7. Alice is not in the third house.\n8. The person who loves fantasy books is Peter.\n9. The person partial to Pall Mall is somewhere to the left of Eric.\n10. The person who keeps a pet bird is in the second house.\n11. The person who smokes many unique blends is the person with a pet hamster.\n12. Eric is directly left of the person who loves tennis.\n13. The person who loves tennis is in the fifth house.\n14. The person who loves swimming is directly left of the person who keeps a pet bird.\n15. The person partial to Pall Mall is the person who loves baseball.\n16. The person who has a cat and Arnold are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "BookGenre",
        "FavoriteSport",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "fish",
          "fantasy",
          "swimming",
          "prince"
        ],
        [
          "2",
          "Alice",
          "bird",
          "biography",
          "baseball",
          "pall mall"
        ],
        [
          "3",
          "Bob",
          "hamster",
          "romance",
          "soccer",
          "blends"
        ],
        [
          "4",
          "Eric",
          "cat",
          "mystery",
          "basketball",
          "blue master"
        ],
        [
          "5",
          "Arnold",
          "dog",
          "science fiction",
          "tennis",
          "dunhill"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Alice, Bob])\npets = EnumSort([bird, dog, hamster, fish, cat])\nbookGenres = EnumSort([fantasy, romance, science_fiction, biography, mystery])\nsports = EnumSort([basketball, soccer, tennis, baseball, swimming])\ncigars = EnumSort([pall_mall, prince, blue_master, blends, dunhill])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_sport = Function([people] -> [sports])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The Dunhill smoker is in the fifth house\nThe person with an aquarium of fish is directly left of the person who loves biography books\nThe person who loves mystery books is somewhere to the left of Arnold\nThe person who smokes many unique blends is the person who loves soccer\nThe person who loves romance books is directly left of the person who smokes Blue Master\nArnold is somewhere to the right of the person who loves fantasy books\nAlice is not in the third house\nThe person who loves fantasy books is Peter\nThe person partial to Pall Mall is somewhere to the left of Eric\nThe person who keeps a pet bird is in the second house\nThe person who smokes many unique blends is the person with a pet hamster\nEric is directly left of the person who loves tennis\nThe person who loves tennis is in the fifth house\nThe person who loves swimming is directly left of the person who keeps a pet bird\nThe person partial to Pall Mall is the person who loves baseball\nThe person who has a cat and Arnold are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_pet(Peter) == fish, has_bookGenre(Peter) == fantasy, has_sport(Peter) == swimming, has_cigar(Peter) == prince), And(lives(Alice) == 2, has_pet(Alice) == bird, has_bookGenre(Alice) == biography, has_sport(Alice) == baseball, has_cigar(Alice) == pall_mall), And(lives(Bob) == 3, has_pet(Bob) == hamster, has_bookGenre(Bob) == romance, has_sport(Bob) == soccer, has_cigar(Bob) == blends), And(lives(Eric) == 4, has_pet(Eric) == cat, has_bookGenre(Eric) == mystery, has_sport(Eric) == basketball, has_cigar(Eric) == blue_master), And(lives(Arnold) == 5, has_pet(Arnold) == dog, has_bookGenre(Arnold) == science_fiction, has_sport(Arnold) == tennis, has_cigar(Arnold) == dunhill) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-5",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Carol`, `Eric`, `Peter`, `Bob`, `Arnold`\n - People have unique favorite music genres: `classical`, `hip hop`, `jazz`, `pop`, `rock`, `country`\n - The mothers' names in different houses are unique: `Sarah`, `Penny`, `Aniya`, `Janelle`, `Kailyn`, `Holly`\n - Each mother is accompanied by their child: `Alice`, `Fred`, `Timothy`, `Bella`, `Samantha`, `Meredith`\n - People have unique heights: `very short`, `tall`, `short`, `very tall`, `super tall`, `average`\n - The people keep unique animals: `bird`, `dog`, `horse`, `rabbit`, `cat`, `fish`\n\nClues:\n1. The person who loves pop music is the cat lover.\n2. The rabbit owner is directly left of The person whose mother's name is Aniya.\n3. The person whose mother's name is Holly is directly left of Carol.\n4. The person whose mother's name is Holly is the person's child is named Alice.\n5. The person whose mother's name is Holly is the person who loves classical music.\n6. The person who loves jazz music is The person whose mother's name is Sarah.\n7. The person's child is named Meredith is somewhere to the right of The person whose mother's name is Aniya.\n8. The person who is super tall is The person whose mother's name is Holly.\n9. The person who is the mother of Timothy is Bob.\n10. The person who is very short is somewhere to the left of The person whose mother's name is Aniya.\n11. Eric is the fish enthusiast.\n12. The person's child is named Samantha is somewhere to the right of the person who is very tall.\n13. The person who loves rock music is The person whose mother's name is Janelle.\n14. There is one house between the person who keeps horses and the person's child is named Meredith.\n15. The person's child is named Bella is somewhere to the right of Peter.\n16. The fish enthusiast is somewhere to the left of the bird keeper.\n17. The fish enthusiast is somewhere to the right of the person's child is named Alice.\n18. There is one house between the person's child is named Bella and the person who loves rock music.\n19. The person who is short is the cat lover.\n20. Alice is directly left of the person who loves classical music.\n21. The person's child is named Bella is The person whose mother's name is Aniya.\n22. There are two houses between The person whose mother's name is Penny and the person who is short.\n23. The person who loves hip-hop music is in the first house.\n24. Carol is the person who is tall.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Mother",
        "Children",
        "Height",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "hip hop",
          "Penny",
          "Fred",
          "very short",
          "dog"
        ],
        [
          "2",
          "Peter",
          "classical",
          "Holly",
          "Alice",
          "super tall",
          "rabbit"
        ],
        [
          "3",
          "Carol",
          "country",
          "Aniya",
          "Bella",
          "tall",
          "horse"
        ],
        [
          "4",
          "Bob",
          "pop",
          "Kailyn",
          "Timothy",
          "short",
          "cat"
        ],
        [
          "5",
          "Eric",
          "rock",
          "Janelle",
          "Meredith",
          "very tall",
          "fish"
        ],
        [
          "6",
          "Arnold",
          "jazz",
          "Sarah",
          "Samantha",
          "average",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Carol, Eric, Peter, Bob, Arnold])\nmusicGenres = EnumSort([classical, hip_hop, jazz, pop, rock, country])\nmothers = EnumSort([Sarah, Penny, Aniya, Janelle, Kailyn, Holly])\nchildren = EnumSort([Alice, Fred, Timothy, Bella, Samantha, Meredith])\nheights = EnumSort([very_short, tall, short, very_tall, super_tall, average])\nanimals = EnumSort([bird, dog, horse, rabbit, cat, fish])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_mother = Function([people] -> [mothers])\nhas_child = Function([people] -> [children])\nhas_height = Function([people] -> [heights])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves pop music is the cat lover\nThe rabbit owner is directly left of The person whose mother's name is Aniya\nThe person whose mother's name is Holly is directly left of Carol\nThe person whose mother's name is Holly is the person's child is named Alice\nThe person whose mother's name is Holly is the person who loves classical music\nThe person who loves jazz music is The person whose mother's name is Sarah\nThe person's child is named Meredith is somewhere to the right of The person whose mother's name is Aniya\nThe person who is super tall is The person whose mother's name is Holly\nThe person who is the mother of Timothy is Bob\nThe person who is very short is somewhere to the left of The person whose mother's name is Aniya\nEric is the fish enthusiast\nThe person's child is named Samantha is somewhere to the right of the person who is very tall\nThe person who loves rock music is The person whose mother's name is Janelle\nThere is one house between the person who keeps horses and the person's child is named Meredith\nThe person's child is named Bella is somewhere to the right of Peter\nThe fish enthusiast is somewhere to the left of the bird keeper\nThe fish enthusiast is somewhere to the right of the person's child is named Alice\nThere is one house between the person's child is named Bella and the person who loves rock music\nThe person who is short is the cat lover\nAlice is directly left of the person who loves classical music\nThe person's child is named Bella is The person whose mother's name is Aniya\nThere are two houses between The person whose mother's name is Penny and the person who is short\nThe person who loves hip-hop music is in the first house\nCarol is the person who is tall",
    "queries": "And( And(lives(Alice) == 1, has_musicGenre(Alice) == hip_hop, has_mother(Alice) == Penny, has_child(Alice) == Fred, has_height(Alice) == very_short, has_animal(Alice) == dog), And(lives(Peter) == 2, has_musicGenre(Peter) == classical, has_mother(Peter) == Holly, has_child(Peter) == Alice, has_height(Peter) == super_tall, has_animal(Peter) == rabbit), And(lives(Carol) == 3, has_musicGenre(Carol) == country, has_mother(Carol) == Aniya, has_child(Carol) == Bella, has_height(Carol) == tall, has_animal(Carol) == horse), And(lives(Bob) == 4, has_musicGenre(Bob) == pop, has_mother(Bob) == Kailyn, has_child(Bob) == Timothy, has_height(Bob) == short, has_animal(Bob) == cat), And(lives(Eric) == 5, has_musicGenre(Eric) == rock, has_mother(Eric) == Janelle, has_child(Eric) == Meredith, has_height(Eric) == very_tall, has_animal(Eric) == fish), And(lives(Arnold) == 6, has_musicGenre(Arnold) == jazz, has_mother(Arnold) == Sarah, has_child(Arnold) == Samantha, has_height(Arnold) == average, has_animal(Arnold) == bird) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-29",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Alice`, `Peter`\n - Each person has a unique birthday month: `feb`, `jan`, `april`, `sept`\n - People have unique hair colors: `black`, `blonde`, `brown`, `red`\n - Each person lives in a unique style of house: `colonial`, `ranch`, `victorian`, `craftsman`\n - Each person has an occupation: `engineer`, `artist`, `doctor`, `teacher`\n - Everyone has a favorite smoothie: `cherry`, `dragonfruit`, `desert`, `watermelon`\n\nClues:\n1. The person who is an engineer is the person whose birthday is in February.\n2. The person who likes Cherry smoothies is somewhere to the left of the person who has red hair.\n3. The person who is a doctor is the person who has blonde hair.\n4. The person whose birthday is in January is the person living in a colonial-style house.\n5. Alice is the person residing in a Victorian house.\n6. Peter is the Desert smoothie lover.\n7. Peter is the person whose birthday is in September.\n8. The Dragonfruit smoothie lover is the person who is a teacher.\n9. The Watermelon smoothie lover is the person residing in a Victorian house.\n10. The person living in a colonial-style house is directly left of the person who has black hair.\n11. The person whose birthday is in February is in the fourth house.\n12. The person who has black hair is not in the third house.\n13. Eric is the person in a ranch-style home.\n14. The person who has blonde hair is directly left of the person who likes Cherry smoothies.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "HairColor",
        "HouseStyle",
        "Occupation",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "sept",
          "blonde",
          "craftsman",
          "doctor",
          "desert"
        ],
        [
          "2",
          "Eric",
          "april",
          "brown",
          "ranch",
          "artist",
          "cherry"
        ],
        [
          "3",
          "Arnold",
          "jan",
          "red",
          "colonial",
          "teacher",
          "dragonfruit"
        ],
        [
          "4",
          "Alice",
          "feb",
          "black",
          "victorian",
          "engineer",
          "watermelon"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Alice, Peter])\nmonths = EnumSort([feb, jan, april, sept])\nhairColors = EnumSort([black, blonde, brown, red])\nhouseStyles = EnumSort([colonial, ranch, victorian, craftsman])\noccupations = EnumSort([engineer, artist, doctor, teacher])\nsmoothies = EnumSort([cherry, dragonfruit, desert, watermelon])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nhas_hairColor = Function([people] -> [hairColors])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_occupation = Function([people] -> [occupations])\nhas_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who is an engineer is the person whose birthday is in February\nThe person who likes Cherry smoothies is somewhere to the left of the person who has red hair\nThe person who is a doctor is the person who has blonde hair\nThe person whose birthday is in January is the person living in a colonial-style house\nAlice is the person residing in a Victorian house\nPeter is the Desert smoothie lover\nPeter is the person whose birthday is in September\nThe Dragonfruit smoothie lover is the person who is a teacher\nThe Watermelon smoothie lover is the person residing in a Victorian house\nThe person living in a colonial-style house is directly left of the person who has black hair\nThe person whose birthday is in February is in the fourth house\nThe person who has black hair is not in the third house\nEric is the person in a ranch-style home\nThe person who has blonde hair is directly left of the person who likes Cherry smoothies",
    "queries": "And( And(lives(Peter) == 1, has_birthday(Peter) == sept, has_hairColor(Peter) == blonde, has_houseStyle(Peter) == craftsman, has_occupation(Peter) == doctor, has_smoothie(Peter) == desert), And(lives(Eric) == 2, has_birthday(Eric) == april, has_hairColor(Eric) == brown, has_houseStyle(Eric) == ranch, has_occupation(Eric) == artist, has_smoothie(Eric) == cherry), And(lives(Arnold) == 3, has_birthday(Arnold) == jan, has_hairColor(Arnold) == red, has_houseStyle(Arnold) == colonial, has_occupation(Arnold) == teacher, has_smoothie(Arnold) == dragonfruit), And(lives(Alice) == 4, has_birthday(Alice) == feb, has_hairColor(Alice) == black, has_houseStyle(Alice) == victorian, has_occupation(Alice) == engineer, has_smoothie(Alice) == watermelon) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-3",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Bob`, `Peter`, `Alice`\n - Everyone has a unique favorite cigar: `dunhill`, `blue master`, `blends`, `pall mall`, `prince`\n - Each person has an occupation: `lawyer`, `artist`, `engineer`, `doctor`, `teacher`\n - People own unique car models: `ford f150`, `toyota camry`, `honda civic`, `bmw 3 series`, `tesla model 3`\n - Everyone has a favorite smoothie: `watermelon`, `cherry`, `dragonfruit`, `desert`, `lime`\n - Everyone has something unique for lunch: `stew`, `spaghetti`, `grilled cheese`, `pizza`, `stir fry`\n\nClues:\n1. There are two houses between the person who owns a BMW 3 Series and the person who owns a Tesla Model 3.\n2. The person who is an artist is Bob.\n3. The person who owns a Ford F-150 is the person who smokes Blue Master.\n4. The person who loves the spaghetti eater is in the second house.\n5. The person who is an engineer is the Watermelon smoothie lover.\n6. Alice is the person who drinks Lime smoothies.\n7. The person who is an artist is the Dunhill smoker.\n8. The person who likes Cherry smoothies is not in the fifth house.\n9. Peter is not in the fourth house.\n10. The Desert smoothie lover is the person who loves stir fry.\n11. The person who likes Cherry smoothies is somewhere to the right of the person who smokes many unique blends.\n12. The person who is a teacher is the person who loves eating grilled cheese.\n13. Arnold is the person who is a lawyer.\n14. The Dragonfruit smoothie lover is the person who owns a Honda Civic.\n15. Peter is somewhere to the right of the Desert smoothie lover.\n16. The Prince smoker is the Watermelon smoothie lover.\n17. There is one house between the person who owns a Honda Civic and the person who loves the stew.\n18. The person who owns a Tesla Model 3 is the person who likes Cherry smoothies.\n19. The person who owns a Ford F-150 is directly left of the person who is a doctor.\n20. The person who is an artist is the Desert smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "Occupation",
        "CarModel",
        "Smoothie",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "dunhill",
          "artist",
          "bmw 3 series",
          "desert",
          "stir fry"
        ],
        [
          "2",
          "Arnold",
          "blends",
          "lawyer",
          "honda civic",
          "dragonfruit",
          "spaghetti"
        ],
        [
          "3",
          "Alice",
          "blue master",
          "teacher",
          "ford f150",
          "lime",
          "grilled cheese"
        ],
        [
          "4",
          "Eric",
          "pall mall",
          "doctor",
          "tesla model 3",
          "cherry",
          "stew"
        ],
        [
          "5",
          "Peter",
          "prince",
          "engineer",
          "toyota camry",
          "watermelon",
          "pizza"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Bob, Peter, Alice])\ncigars = EnumSort([dunhill, blue_master, blends, pall_mall, prince])\noccupations = EnumSort([lawyer, artist, engineer, doctor, teacher])\ncars = EnumSort([ford_f150, toyota_camry, honda_civic, bmw_3_series, tesla_model_3])\nsmoothies = EnumSort([watermelon, cherry, dragonfruit, desert, lime])\nfoods = EnumSort([stew, spaghetti, grilled_cheese, pizza, stir_fry])\nlives = Function([people] -> [int])\nsmokes = Function([people] -> [cigars])\nhas_occupation = Function([people] -> [occupations])\nowns_car = Function([people] -> [cars])\nlikes_smoothie = Function([people] -> [smoothies])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There are two houses between the person who owns a BMW 3 Series and the person who owns a Tesla Model 3\nThe person who is an artist is Bob\nThe person who owns a Ford F-150 is the person who smokes Blue Master\nThe person who loves the spaghetti eater is in the second house\nThe person who is an engineer is the Watermelon smoothie lover\nAlice is the person who drinks Lime smoothies\nThe person who is an artist is the Dunhill smoker\nThe person who likes Cherry smoothies is not in the fifth house\nPeter is not in the fourth house\nThe Desert smoothie lover is the person who loves stir fry\nThe person who likes Cherry smoothies is somewhere to the right of the person who smokes many unique blends\nThe person who is a teacher is the person who loves eating grilled cheese\nArnold is the person who is a lawyer\nThe Dragonfruit smoothie lover is the person who owns a Honda Civic\nPeter is somewhere to the right of the Desert smoothie lover\nThe Prince smoker is the Watermelon smoothie lover\nThere is one house between the person who owns a Honda Civic and the person who loves the stew\nThe person who owns a Tesla Model 3 is the person who likes Cherry smoothies\nThe person who owns a Ford F-150 is directly left of the person who is a doctor\nThe person who is an artist is the Desert smoothie lover",
    "queries": "And( And(lives(Bob) == 1, smokes(Bob) == dunhill, has_occupation(Bob) == artist, owns_car(Bob) == bmw_3_series, likes_smoothie(Bob) == desert, has_food(Bob) == stir_fry), And(lives(Arnold) == 2, smokes(Arnold) == blends, has_occupation(Arnold) == lawyer, owns_car(Arnold) == honda_civic, likes_smoothie(Arnold) == dragonfruit, has_food(Arnold) == spaghetti), And(lives(Alice) == 3, smokes(Alice) == blue_master, has_occupation(Alice) == teacher, owns_car(Alice) == ford_f150, likes_smoothie(Alice) == lime, has_food(Alice) == grilled_cheese), And(lives(Eric) == 4, smokes(Eric) == pall_mall, has_occupation(Eric) == doctor, owns_car(Eric) == tesla_model_3, likes_smoothie(Eric) == cherry, has_food(Eric) == stew), And(lives(Peter) == 5, smokes(Peter) == prince, has_occupation(Peter) == engineer, owns_car(Peter) == toyota_camry, likes_smoothie(Peter) == watermelon, has_food(Peter) == pizza) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-26",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Arnold`\n - Each person has a unique level of education: `bachelor`, `high school`, `associate`, `master`\n - The mothers' names in different houses are unique: `Holly`, `Janelle`, `Aniya`, `Kailyn`\n - The people keep unique animals: `fish`, `horse`, `cat`, `bird`\n - Each person has a unique birthday month: `jan`, `feb`, `sept`, `april`\n - People have unique favorite music genres: `rock`, `pop`, `jazz`, `classical`\n\nClues:\n1. The person with an associate's degree is The person whose mother's name is Aniya.\n2. Peter is the person whose birthday is in September.\n3. The person with a bachelor's degree is directly left of the person who loves pop music.\n4. Arnold is The person whose mother's name is Janelle.\n5. The person with a master's degree is Arnold.\n6. The person whose mother's name is Janelle is the person who loves classical music.\n7. The person whose birthday is in April is somewhere to the right of the person who loves rock music.\n8. The cat lover is in the second house.\n9. The fish enthusiast is in the third house.\n10. Eric is the person whose birthday is in April.\n11. The person who loves pop music is the person whose birthday is in January.\n12. The person whose mother's name is Holly is the person with a bachelor's degree.\n13. The person who keeps horses is the person with a master's degree.\n14. The person whose mother's name is Aniya is the fish enthusiast.\n15. Arnold is somewhere to the left of the fish enthusiast.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Mother",
        "Animal",
        "Birthday",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "master",
          "Janelle",
          "horse",
          "feb",
          "classical"
        ],
        [
          "2",
          "Peter",
          "bachelor",
          "Holly",
          "cat",
          "sept",
          "rock"
        ],
        [
          "3",
          "Alice",
          "associate",
          "Aniya",
          "fish",
          "jan",
          "pop"
        ],
        [
          "4",
          "Eric",
          "high school",
          "Kailyn",
          "bird",
          "april",
          "jazz"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Arnold])\neducationLevels = EnumSort([bachelor, high_school, associate, master])\nmothersNames = EnumSort([Holly, Janelle, Aniya, Kailyn])\nanimals = EnumSort([fish, horse, cat, bird])\nmonths = EnumSort([jan, feb, sept, april])\nmusicGenres = EnumSort([rock, pop, jazz, classical])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_mother = Function([people] -> [mothersNames])\nhas_animal = Function([people] -> [animals])\nhas_birthday = Function([people] -> [months])\nhas_music = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person with an associate's degree is The person whose mother's name is Aniya\nPeter is the person whose birthday is in September\nThe person with a bachelor's degree is directly left of the person who loves pop music\nArnold is The person whose mother's name is Janelle\nThe person with a master's degree is Arnold\nThe person whose mother's name is Janelle is the person who loves classical music\nThe person whose birthday is in April is somewhere to the right of the person who loves rock music\nThe cat lover is in the second house\nThe fish enthusiast is in the third house\nEric is the person whose birthday is in April\nThe person who loves pop music is the person whose birthday is in January\nThe person whose mother's name is Holly is the person with a bachelor's degree\nThe person who keeps horses is the person with a master's degree\nThe person whose mother's name is Aniya is the fish enthusiast\nArnold is somewhere to the left of the fish enthusiast",
    "queries": "And( And( lives(Arnold) == 1, has_education(Arnold) == master, has_mother(Arnold) == Janelle, has_animal(Arnold) == horse, has_birthday(Arnold) == feb, has_music(Arnold) == classical ), And( lives(Peter) == 2, has_education(Peter) == bachelor, has_mother(Peter) == Holly, has_animal(Peter) == cat, has_birthday(Peter) == sept, has_music(Peter) == rock ), And( lives(Alice) == 3, has_education(Alice) == associate, has_mother(Alice) == Aniya, has_animal(Alice) == fish, has_birthday(Alice) == jan, has_music(Alice) == pop ), And( lives(Eric) == 4, has_education(Eric) == high_school, has_mother(Eric) == Kailyn, has_animal(Eric) == bird, has_birthday(Eric) == april, has_music(Eric) == jazz ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-21",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Alice`, `Eric`\n - They all have a unique favorite flower: `roses`, `daffodils`, `carnations`, `lilies`\n - Each person has a unique hobby: `photography`, `painting`, `cooking`, `gardening`\n - Each person has a unique type of pet: `dog`, `fish`, `bird`, `cat`\n - Each person has a favorite color: `red`, `yellow`, `green`, `white`\n - Each person lives in a unique style of house: `craftsman`, `colonial`, `ranch`, `victorian`\n\nClues:\n1. The person in a Craftsman-style house is Arnold.\n2. The person who loves the rose bouquet is somewhere to the right of Peter.\n3. The photography enthusiast is the person who owns a dog.\n4. The person who loves a bouquet of daffodils is not in the fourth house.\n5. The person who loves the rose bouquet is the person whose favorite color is red.\n6. The person in a Craftsman-style house is in the second house.\n7. Eric is the person residing in a Victorian house.\n8. The person with an aquarium of fish is the person who loves white.\n9. The person who loves cooking is somewhere to the right of the person whose favorite color is red.\n10. The person who loves white is the person who loves a carnations arrangement.\n11. The person who loves white is somewhere to the right of the person who enjoys gardening.\n12. The person who loves a bouquet of daffodils is the person who loves yellow.\n13. The person living in a colonial-style house is the person whose favorite color is red.\n14. The person who has a cat is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Hobby",
        "Pet",
        "Color",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "daffodils",
          "gardening",
          "bird",
          "yellow",
          "ranch"
        ],
        [
          "2",
          "Arnold",
          "carnations",
          "painting",
          "fish",
          "white",
          "craftsman"
        ],
        [
          "3",
          "Alice",
          "roses",
          "photography",
          "dog",
          "red",
          "colonial"
        ],
        [
          "4",
          "Eric",
          "lilies",
          "cooking",
          "cat",
          "green",
          "victorian"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Alice, Eric])\nflowers = EnumSort([roses, daffodils, carnations, lilies])\nhobbies = EnumSort([photography, painting, cooking, gardening])\npets = EnumSort([dog, fish, bird, cat])\ncolors = EnumSort([red, yellow, green, white])\nhouseStyles = EnumSort([craftsman, colonial, ranch, victorian])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_hobby = Function([people] -> [hobbies])\nhas_pet = Function([people] -> [pets])\nhas_color = Function([people] -> [colors])\nhas_houseStyle = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person in a Craftsman-style house is Arnold\nThe person who loves the rose bouquet is somewhere to the right of Peter\nThe photography enthusiast is the person who owns a dog\nThe person who loves a bouquet of daffodils is not in the fourth house\nThe person who loves the rose bouquet is the person whose favorite color is red\nThe person in a Craftsman-style house is in the second house\nEric is the person residing in a Victorian house\nThe person with an aquarium of fish is the person who loves white\nThe person who loves cooking is somewhere to the right of the person whose favorite color is red\nThe person who loves white is the person who loves a carnations arrangement\nThe person who loves white is somewhere to the right of the person who enjoys gardening\nThe person who loves a bouquet of daffodils is the person who loves yellow\nThe person living in a colonial-style house is the person whose favorite color is red\nThe person who has a cat is Eric",
    "queries": "And( And( lives(Peter) == 1, has_flower(Peter) == daffodils, has_hobby(Peter) == gardening, has_pet(Peter) == bird, has_color(Peter) == yellow, has_houseStyle(Peter) == ranch ), And( lives(Arnold) == 2, has_flower(Arnold) == carnations, has_hobby(Arnold) == painting, has_pet(Arnold) == fish, has_color(Arnold) == white, has_houseStyle(Arnold) == craftsman ), And( lives(Alice) == 3, has_flower(Alice) == roses, has_hobby(Alice) == photography, has_pet(Alice) == dog, has_color(Alice) == red, has_houseStyle(Alice) == colonial ), And( lives(Eric) == 4, has_flower(Eric) == lilies, has_hobby(Eric) == cooking, has_pet(Eric) == cat, has_color(Eric) == green, has_houseStyle(Eric) == victorian ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-16",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Eric`, `Bob`, `Peter`, `Arnold`, `Alice`\n - Each person prefers a unique type of vacation: `cultural`, `beach`, `mountain`, `cruise`, `camping`, `city`\n - The people are of nationalities: `chinese`, `brit`, `norwegian`, `swede`, `dane`, `german`\n - Everyone has a favorite smoothie: `lime`, `desert`, `watermelon`, `blueberry`, `dragonfruit`, `cherry`\n\nClues:\n1. The person who likes Cherry smoothies is the person who enjoys mountain retreats.\n2. Eric is the Dane.\n3. The German is Peter.\n4. The Desert smoothie lover is in the sixth house.\n5. The Swedish person is the Dragonfruit smoothie lover.\n6. Arnold is the Dragonfruit smoothie lover.\n7. The Watermelon smoothie lover is the British person.\n8. The Norwegian is the person who enjoys camping trips.\n9. The person who likes going on cruises is the British person.\n10. There are two houses between Bob and the person who enjoys camping trips.\n11. The person who drinks Blueberry smoothies is directly left of the person who goes on cultural tours.\n12. Bob is directly left of the Dragonfruit smoothie lover.\n13. The person who likes going on cruises is directly left of Peter.\n14. The person who prefers city breaks is not in the sixth house.\n15. Carol is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Nationality",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "city",
          "chinese",
          "blueberry"
        ],
        [
          "2",
          "Arnold",
          "cultural",
          "swede",
          "dragonfruit"
        ],
        [
          "3",
          "Eric",
          "mountain",
          "dane",
          "cherry"
        ],
        [
          "4",
          "Alice",
          "camping",
          "norwegian",
          "lime"
        ],
        [
          "5",
          "Carol",
          "cruise",
          "brit",
          "watermelon"
        ],
        [
          "6",
          "Peter",
          "beach",
          "german",
          "desert"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Eric, Bob, Peter, Arnold, Alice])\nvacations = EnumSort([cultural, beach, mountain, cruise, camping, city])\nnationalities = EnumSort([chinese, brit, norwegian, swede, dane, german])\nsmoothies = EnumSort([lime, desert, watermelon, blueberry, dragonfruit, cherry])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nhas_nationality = Function([people] -> [nationalities])\nlikes_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who likes Cherry smoothies is the person who enjoys mountain retreats\nEric is the Dane\nThe German is Peter\nThe Desert smoothie lover is in the sixth house\nThe Swedish person is the Dragonfruit smoothie lover\nArnold is the Dragonfruit smoothie lover\nThe Watermelon smoothie lover is the British person\nThe Norwegian is the person who enjoys camping trips\nThe person who likes going on cruises is the British person\nThere are two houses between Bob and the person who enjoys camping trips\nThe person who drinks Blueberry smoothies is directly left of the person who goes on cultural tours\nBob is directly left of the Dragonfruit smoothie lover\nThe person who likes going on cruises is directly left of Peter\nThe person who prefers city breaks is not in the sixth house\nCarol is in the fifth house",
    "queries": "And( And(lives(Bob) == 1, prefers_vacation(Bob) == city, has_nationality(Bob) == chinese, likes_smoothie(Bob) == blueberry), And(lives(Arnold) == 2, prefers_vacation(Arnold) == cultural, has_nationality(Arnold) == swede, likes_smoothie(Arnold) == dragonfruit), And(lives(Eric) == 3, prefers_vacation(Eric) == mountain, has_nationality(Eric) == dane, likes_smoothie(Eric) == cherry), And(lives(Alice) == 4, prefers_vacation(Alice) == camping, has_nationality(Alice) == norwegian, likes_smoothie(Alice) == lime), And(lives(Carol) == 5, prefers_vacation(Carol) == cruise, has_nationality(Carol) == brit, likes_smoothie(Carol) == watermelon), And(lives(Peter) == 6, prefers_vacation(Peter) == beach, has_nationality(Peter) == german, likes_smoothie(Peter) == desert) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-11",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Eric`, `Arnold`, `Peter`, `Carol`\n - People have unique heights: `short`, `tall`, `very short`, `average`, `very tall`, `super tall`\n - People have unique favorite music genres: `rock`, `jazz`, `classical`, `country`, `hip hop`, `pop`\n - Each mother is accompanied by their child: `Samantha`, `Alice`, `Fred`, `Bella`, `Meredith`, `Timothy`\n\nClues:\n1. The person who loves hip-hop music is not in the second house.\n2. The person who is very tall is directly left of the person who is very short.\n3. The person's child is named Samantha is in the first house.\n4. The person who has an average height is directly left of the person who loves hip-hop music.\n5. The person's child is named Alice is the person who loves jazz music.\n6. The person who is the mother of Timothy is somewhere to the right of the person who loves jazz music.\n7. Eric is directly left of the person who is tall.\n8. The person who is short is the person who loves hip-hop music.\n9. The person who is very short is the person who is the mother of Timothy.\n10. Peter is the person who loves rock music.\n11. The person's child is named Bella is Bob.\n12. The person's child is named Fred is Alice.\n13. The person who loves classical music is directly left of the person who loves pop music.\n14. The person who loves rock music is somewhere to the right of the person who is very tall.\n15. Carol is somewhere to the left of Alice.\n16. Carol is somewhere to the right of Arnold.\n17. The person who loves classical music is not in the first house.\n18. The person who is super tall is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "MusicGenre",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "super tall",
          "country",
          "Samantha"
        ],
        [
          "2",
          "Arnold",
          "tall",
          "jazz",
          "Alice"
        ],
        [
          "3",
          "Bob",
          "very tall",
          "classical",
          "Bella"
        ],
        [
          "4",
          "Carol",
          "very short",
          "pop",
          "Timothy"
        ],
        [
          "5",
          "Peter",
          "average",
          "rock",
          "Meredith"
        ],
        [
          "6",
          "Alice",
          "short",
          "hip hop",
          "Fred"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Eric, Arnold, Peter, Carol])\nheights = EnumSort([short, tall, very_short, average, very_tall, super_tall])\nmusicGenres = EnumSort([rock, jazz, classical, country, hip_hop, pop])\nchildren = EnumSort([Samantha, Alice, Fred, Bella, Meredith, Timothy])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves hip-hop music is not in the second house\nThe person who is very tall is directly left of the person who is very short\nThe person's child is named Samantha is in the first house\nThe person who has an average height is directly left of the person who loves hip-hop music\nThe person's child is named Alice is the person who loves jazz music\nThe person who is the mother of Timothy is somewhere to the right of the person who loves jazz music\nEric is directly left of the person who is tall\nThe person who is short is the person who loves hip-hop music\nThe person who is very short is the person who is the mother of Timothy\nPeter is the person who loves rock music\nThe person's child is named Bella is Bob\nThe person's child is named Fred is Alice\nThe person who loves classical music is directly left of the person who loves pop music\nThe person who loves rock music is somewhere to the right of the person who is very tall\nCarol is somewhere to the left of Alice\nCarol is somewhere to the right of Arnold\nThe person who loves classical music is not in the first house\nThe person who is super tall is Eric",
    "queries": "And( And(lives(Eric) == 1, has_height(Eric) == super_tall, has_musicGenre(Eric) == country, has_child(Eric) == Samantha), And(lives(Arnold) == 2, has_height(Arnold) == tall, has_musicGenre(Arnold) == jazz, has_child(Arnold) == Alice), And(lives(Bob) == 3, has_height(Bob) == very_tall, has_musicGenre(Bob) == classical, has_child(Bob) == Bella), And(lives(Carol) == 4, has_height(Carol) == very_short, has_musicGenre(Carol) == pop, has_child(Carol) == Timothy), And(lives(Peter) == 5, has_height(Peter) == average, has_musicGenre(Peter) == rock, has_child(Peter) == Meredith), And(lives(Alice) == 6, has_height(Alice) == short, has_musicGenre(Alice) == hip_hop, has_child(Alice) == Fred) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-31",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Peter`, `Eric`, `Alice`, `Carol`\n - Each person has a unique birthday month: `april`, `feb`, `mar`, `jan`, `may`, `sept`\n - Each person prefers a unique type of vacation: `city`, `beach`, `mountain`, `cruise`, `cultural`, `camping`\n - Each person has a favorite color: `blue`, `white`, `green`, `purple`, `red`, `yellow`\n\nClues:\n1. The person whose birthday is in January is the person who loves blue.\n2. The person whose birthday is in January is directly left of the person who loves white.\n3. The person who enjoys camping trips is in the fourth house.\n4. Eric is in the sixth house.\n5. There are two houses between the person who likes going on cruises and the person whose birthday is in February.\n6. The person whose birthday is in May is not in the sixth house.\n7. Peter is directly left of the person who loves yellow.\n8. The person who goes on cultural tours is Eric.\n9. The person whose birthday is in September is directly left of the person whose favorite color is green.\n10. Arnold and the person who loves purple are next to each other.\n11. The person who loves beach vacations is the person whose birthday is in March.\n12. The person whose favorite color is green is somewhere to the left of Carol.\n13. The person whose birthday is in May is somewhere to the right of Peter.\n14. The person who loves blue is Bob.\n15. The person who enjoys mountain retreats is in the fifth house.\n16. The person who loves purple is in the third house.\n17. Carol is in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Vacation",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "sept",
          "city",
          "red"
        ],
        [
          "2",
          "Arnold",
          "mar",
          "beach",
          "green"
        ],
        [
          "3",
          "Peter",
          "april",
          "cruise",
          "purple"
        ],
        [
          "4",
          "Carol",
          "may",
          "camping",
          "yellow"
        ],
        [
          "5",
          "Bob",
          "jan",
          "mountain",
          "blue"
        ],
        [
          "6",
          "Eric",
          "feb",
          "cultural",
          "white"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Peter, Eric, Alice, Carol])\nbirthdayMonths = EnumSort([april, feb, mar, jan, may, sept])\nvacationTypes = EnumSort([city, beach, mountain, cruise, cultural, camping])\ncolors = EnumSort([blue, white, green, purple, red, yellow])\nlives = Function([people] -> [int])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nhas_vacationType = Function([people] -> [vacationTypes])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in January is the person who loves blue\nThe person whose birthday is in January is directly left of the person who loves white\nThe person who enjoys camping trips is in the fourth house\nEric is in the sixth house\nThere are two houses between the person who likes going on cruises and the person whose birthday is in February\nThe person whose birthday is in May is not in the sixth house\nPeter is directly left of the person who loves yellow\nThe person who goes on cultural tours is Eric\nThe person whose birthday is in September is directly left of the person whose favorite color is green\nArnold and the person who loves purple are next to each other\nThe person who loves beach vacations is the person whose birthday is in March\nThe person whose favorite color is green is somewhere to the left of Carol\nThe person whose birthday is in May is somewhere to the right of Peter\nThe person who loves blue is Bob\nThe person who enjoys mountain retreats is in the fifth house\nThe person who loves purple is in the third house\nCarol is in the fourth house",
    "queries": "And( And(lives(Alice) == 1, has_birthdayMonth(Alice) == sept, has_vacationType(Alice) == city, has_color(Alice) == red), And(lives(Arnold) == 2, has_birthdayMonth(Arnold) == mar, has_vacationType(Arnold) == beach, has_color(Arnold) == green), And(lives(Peter) == 3, has_birthdayMonth(Peter) == april, has_vacationType(Peter) == cruise, has_color(Peter) == purple), And(lives(Carol) == 4, has_birthdayMonth(Carol) == may, has_vacationType(Carol) == camping, has_color(Carol) == yellow), And(lives(Bob) == 5, has_birthdayMonth(Bob) == jan, has_vacationType(Bob) == mountain, has_color(Bob) == blue), And(lives(Eric) == 6, has_birthdayMonth(Eric) == feb, has_vacationType(Eric) == cultural, has_color(Eric) == white) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-32",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Eric`, `Peter`\n - Everyone has something unique for lunch: `stew`, `spaghetti`, `grilled cheese`, `pizza`, `stir fry`\n - Each person has a favorite color: `green`, `blue`, `yellow`, `red`, `white`\n - The people are of nationalities: `swede`, `brit`, `dane`, `german`, `norwegian`\n - People have unique favorite book genres: `fantasy`, `biography`, `romance`, `mystery`, `science fiction`\n - Each mother is accompanied by their child: `Timothy`, `Samantha`, `Meredith`, `Fred`, `Bella`\n\nClues:\n1. The Swedish person is the person's child is named Bella.\n2. There is one house between the person who loves science fiction books and the person who loves the stew.\n3. The person who is a pizza lover is the person's child is named Fred.\n4. The person who loves white is not in the fourth house.\n5. The person who loves yellow is Peter.\n6. The person who loves eating grilled cheese is directly left of the person's child is named Meredith.\n7. The German is the person who loves the spaghetti eater.\n8. The person who loves romance books is the person who loves the stew.\n9. The person's child is named Samantha is directly left of the German.\n10. Alice is the Swedish person.\n11. Arnold is the person whose favorite color is green.\n12. Arnold is in the third house.\n13. The person's child is named Meredith is the person who loves biography books.\n14. The Norwegian is the person whose favorite color is red.\n15. The person who loves romance books is not in the third house.\n16. The person who loves the spaghetti eater is Eric.\n17. The Dane is somewhere to the left of the person who loves yellow.\n18. The person who loves mystery books is directly left of the person whose favorite color is red.\n19. The person's child is named Fred is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Color",
        "Nationality",
        "BookGenre",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "stir fry",
          "white",
          "swede",
          "mystery",
          "Bella"
        ],
        [
          "2",
          "Bob",
          "pizza",
          "red",
          "norwegian",
          "fantasy",
          "Fred"
        ],
        [
          "3",
          "Arnold",
          "grilled cheese",
          "green",
          "dane",
          "science fiction",
          "Samantha"
        ],
        [
          "4",
          "Eric",
          "spaghetti",
          "blue",
          "german",
          "biography",
          "Meredith"
        ],
        [
          "5",
          "Peter",
          "stew",
          "yellow",
          "brit",
          "romance",
          "Timothy"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Eric, Peter])\nfoods = EnumSort([stew, spaghetti, grilled_cheese, pizza, stir_fry])\ncolors = EnumSort([green, blue, yellow, red, white])\nnationalities = EnumSort([swede, brit, dane, german, norwegian])\nbookGenres = EnumSort([fantasy, biography, romance, mystery, science_fiction])\nchildren = EnumSort([Timothy, Samantha, Meredith, Fred, Bella])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_color = Function([people] -> [colors])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The Swedish person is the person's child is named Bella\nThere is one house between the person who loves science fiction books and the person who loves the stew\nThe person who is a pizza lover is the person's child is named Fred\nThe person who loves white is not in the fourth house\nThe person who loves yellow is Peter\nThe person who loves eating grilled cheese is directly left of the person's child is named Meredith\nThe German is the person who loves the spaghetti eater\nThe person who loves romance books is the person who loves the stew\nThe person's child is named Samantha is directly left of the German\nAlice is the Swedish person\nArnold is the person whose favorite color is green\nArnold is in the third house\nThe person's child is named Meredith is the person who loves biography books\nThe Norwegian is the person whose favorite color is red\nThe person who loves romance books is not in the third house\nThe person who loves the spaghetti eater is Eric\nThe Dane is somewhere to the left of the person who loves yellow\nThe person who loves mystery books is directly left of the person whose favorite color is red\nThe person's child is named Fred is not in the third house",
    "queries": "And( And( lives(Alice) == 1, has_food(Alice) == stir_fry, has_color(Alice) == white, has_nationality(Alice) == swede, has_bookGenre(Alice) == mystery, has_child(Alice) == Bella ), And( lives(Bob) == 2, has_food(Bob) == pizza, has_color(Bob) == red, has_nationality(Bob) == norwegian, has_bookGenre(Bob) == fantasy, has_child(Bob) == Fred ), And( lives(Arnold) == 3, has_food(Arnold) == grilled_cheese, has_color(Arnold) == green, has_nationality(Arnold) == dane, has_bookGenre(Arnold) == science_fiction, has_child(Arnold) == Samantha ), And( lives(Eric) == 4, has_food(Eric) == spaghetti, has_color(Eric) == blue, has_nationality(Eric) == german, has_bookGenre(Eric) == biography, has_child(Eric) == Meredith ), And( lives(Peter) == 5, has_food(Peter) == stew, has_color(Peter) == yellow, has_nationality(Peter) == brit, has_bookGenre(Peter) == romance, has_child(Peter) == Timothy ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-5",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Arnold`, `Bob`, `Alice`\n - Each person has a unique favorite drink: `milk`, `tea`, `root beer`, `water`, `coffee`\n - Each person has a favorite color: `blue`, `white`, `red`, `green`, `yellow`\n - Each mother is accompanied by their child: `Samantha`, `Meredith`, `Timothy`, `Bella`, `Fred`\n - Each person lives in a unique style of house: `modern`, `ranch`, `victorian`, `colonial`, `craftsman`\n - People use unique phone models: `samsung galaxy s21`, `iphone 13`, `huawei p50`, `oneplus 9`, `google pixel 6`\n\nClues:\n1. The person in a Craftsman-style house is directly left of the person living in a colonial-style house.\n2. The person living in a colonial-style house is somewhere to the left of the person who uses a Samsung Galaxy S21.\n3. The person who uses a Huawei P50 is the person in a Craftsman-style house.\n4. The root beer lover is somewhere to the left of the person residing in a Victorian house.\n5. There is one house between the person in a ranch-style home and the root beer lover.\n6. The person who uses a OnePlus 9 is the person whose favorite color is red.\n7. The tea drinker is not in the fourth house.\n8. The person living in a colonial-style house and Peter are next to each other.\n9. The person in a ranch-style home is directly left of the person whose favorite color is green.\n10. The person who is the mother of Timothy and the person's child is named Meredith are next to each other.\n11. The person who loves blue is the person residing in a Victorian house.\n12. Bob is the person residing in a Victorian house.\n13. The person's child is named Bella is the person who uses a Google Pixel 6.\n14. The person who loves blue is the one who only drinks water.\n15. The person who likes milk is the person who is the mother of Timothy.\n16. The person who loves white is Arnold.\n17. The root beer lover is directly left of the person who uses a Samsung Galaxy S21.\n18. The person who likes milk is Alice.\n19. The person who is the mother of Timothy is the person whose favorite color is green.\n20. The person who loves white is not in the first house.\n21. The person's child is named Samantha is the person whose favorite color is red.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Color",
        "Children",
        "HouseStyle",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "tea",
          "red",
          "Samantha",
          "ranch",
          "oneplus 9"
        ],
        [
          "2",
          "Alice",
          "milk",
          "green",
          "Timothy",
          "craftsman",
          "huawei p50"
        ],
        [
          "3",
          "Arnold",
          "root beer",
          "white",
          "Meredith",
          "colonial",
          "iphone 13"
        ],
        [
          "4",
          "Peter",
          "coffee",
          "yellow",
          "Fred",
          "modern",
          "samsung galaxy s21"
        ],
        [
          "5",
          "Bob",
          "water",
          "blue",
          "Bella",
          "victorian",
          "google pixel 6"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Arnold, Bob, Alice])\ndrinks = EnumSort([milk, tea, root_beer, water, coffee])\ncolors = EnumSort([blue, white, red, green, yellow])\nchildren = EnumSort([Samantha, Meredith, Timothy, Bella, Fred])\nhouse_styles = EnumSort([modern, ranch, victorian, colonial, craftsman])\nphones = EnumSort([samsung_galaxy_s21, iphone_13, huawei_p50, oneplus_9, google_pixel_6])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_color = Function([people] -> [colors])\nhas_child = Function([people] -> [children])\nhas_house_style = Function([people] -> [house_styles])\nuses_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person in a Craftsman-style house is directly left of the person living in a colonial-style house\nThe person living in a colonial-style house is somewhere to the left of the person who uses a Samsung Galaxy S21\nThe person who uses a Huawei P50 is the person in a Craftsman-style house\nThe root beer lover is somewhere to the left of the person residing in a Victorian house\nThere is one house between the person in a ranch-style home and the root beer lover\nThe person who uses a OnePlus 9 is the person whose favorite color is red\nThe tea drinker is not in the fourth house\nThe person living in a colonial-style house and Peter are next to each other\nThe person in a ranch-style home is directly left of the person whose favorite color is green\nThe person who is the mother of Timothy and the person's child is named Meredith are next to each other\nThe person who loves blue is the person residing in a Victorian house\nBob is the person residing in a Victorian house\nThe person's child is named Bella is the person who uses a Google Pixel 6\nThe person who loves blue is the one who only drinks water\nThe person who likes milk is the person who is the mother of Timothy\nThe person who loves white is Arnold\nThe root beer lover is directly left of the person who uses a Samsung Galaxy S21\nThe person who likes milk is Alice\nThe person who is the mother of Timothy is the person whose favorite color is green\nThe person who loves white is not in the first house\nThe person's child is named Samantha is the person whose favorite color is red",
    "queries": "And( And(lives(Eric) == 1, has_drink(Eric) == tea, has_color(Eric) == red, has_child(Eric) == Samantha, has_house_style(Eric) == ranch, uses_phone(Eric) == oneplus_9), And(lives(Alice) == 2, has_drink(Alice) == milk, has_color(Alice) == green, has_child(Alice) == Timothy, has_house_style(Alice) == craftsman, uses_phone(Alice) == huawei_p50), And(lives(Arnold) == 3, has_drink(Arnold) == root_beer, has_color(Arnold) == white, has_child(Arnold) == Meredith, has_house_style(Arnold) == colonial, uses_phone(Arnold) == iphone_13), And(lives(Peter) == 4, has_drink(Peter) == coffee, has_color(Peter) == yellow, has_child(Peter) == Fred, has_house_style(Peter) == modern, uses_phone(Peter) == samsung_galaxy_s21), And(lives(Bob) == 5, has_drink(Bob) == water, has_color(Bob) == blue, has_child(Bob) == Bella, has_house_style(Bob) == victorian, uses_phone(Bob) == google_pixel_6) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-29",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Alice`, `Eric`, `Bob`, `Peter`, `Arnold`\n - Each person has a unique birthday month: `jan`, `mar`, `feb`, `may`, `april`, `sept`\n - Each person prefers a unique type of vacation: `city`, `camping`, `beach`, `cruise`, `cultural`, `mountain`\n - Each person has a unique favorite drink: `milk`, `water`, `tea`, `root beer`, `coffee`, `boba tea`\n\nClues:\n1. There is one house between the person who goes on cultural tours and Alice.\n2. The person whose birthday is in February is Peter.\n3. The person whose birthday is in January is the person who enjoys camping trips.\n4. Eric and Arnold are next to each other.\n5. Carol is the person who likes going on cruises.\n6. The person whose birthday is in January is directly left of Arnold.\n7. The root beer lover is somewhere to the right of the person whose birthday is in April.\n8. The person whose birthday is in September is the tea drinker.\n9. The coffee drinker is Alice.\n10. The person whose birthday is in March is Alice.\n11. The person who prefers city breaks is the one who only drinks water.\n12. The person whose birthday is in September is in the second house.\n13. Bob is directly left of the boba tea drinker.\n14. There is one house between the coffee drinker and the one who only drinks water.\n15. The person who loves beach vacations and the coffee drinker are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Vacation",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "april",
          "cruise",
          "milk"
        ],
        [
          "2",
          "Bob",
          "sept",
          "cultural",
          "tea"
        ],
        [
          "3",
          "Peter",
          "feb",
          "beach",
          "boba tea"
        ],
        [
          "4",
          "Alice",
          "mar",
          "mountain",
          "coffee"
        ],
        [
          "5",
          "Eric",
          "jan",
          "camping",
          "root beer"
        ],
        [
          "6",
          "Arnold",
          "may",
          "city",
          "water"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Alice, Eric, Bob, Peter, Arnold])\nmonths = EnumSort([jan, mar, feb, may, april, sept])\nvacations = EnumSort([city, camping, beach, cruise, cultural, mountain])\ndrinks = EnumSort([milk, water, tea, root_beer, coffee, boba_tea])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nprefers_vacation = Function([people] -> [vacations])\nlikes_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the person who goes on cultural tours and Alice\nThe person whose birthday is in February is Peter\nThe person whose birthday is in January is the person who enjoys camping trips\nEric and Arnold are next to each other\nCarol is the person who likes going on cruises\nThe person whose birthday is in January is directly left of Arnold\nThe root beer lover is somewhere to the right of the person whose birthday is in April\nThe person whose birthday is in September is the tea drinker\nThe coffee drinker is Alice\nThe person whose birthday is in March is Alice\nThe person who prefers city breaks is the one who only drinks water\nThe person whose birthday is in September is in the second house\nBob is directly left of the boba tea drinker\nThere is one house between the coffee drinker and the one who only drinks water\nThe person who loves beach vacations and the coffee drinker are next to each other",
    "queries": "And( And(lives(Carol) == 1, has_birthday(Carol) == april, prefers_vacation(Carol) == cruise, likes_drink(Carol) == milk), And(lives(Bob) == 2, has_birthday(Bob) == sept, prefers_vacation(Bob) == cultural, likes_drink(Bob) == tea), And(lives(Peter) == 3, has_birthday(Peter) == feb, prefers_vacation(Peter) == beach, likes_drink(Peter) == boba_tea), And(lives(Alice) == 4, has_birthday(Alice) == mar, prefers_vacation(Alice) == mountain, likes_drink(Alice) == coffee), And(lives(Eric) == 5, has_birthday(Eric) == jan, prefers_vacation(Eric) == camping, likes_drink(Eric) == root_beer), And(lives(Arnold) == 6, has_birthday(Arnold) == may, prefers_vacation(Arnold) == city, likes_drink(Arnold) == water) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-8",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Bob`, `Eric`, `Carol`, `Alice`\n - The people keep unique animals: `horse`, `rabbit`, `fish`, `cat`, `bird`, `dog`\n - Each person has an occupation: `engineer`, `nurse`, `lawyer`, `teacher`, `artist`, `doctor`\n - People have unique favorite sports: `basketball`, `volleyball`, `soccer`, `tennis`, `baseball`, `swimming`\n - People have unique heights: `average`, `tall`, `short`, `very short`, `very tall`, `super tall`\n\nClues:\n1. The person who is an engineer is the dog owner.\n2. The person who has an average height is somewhere to the left of the person who is short.\n3. The person who has an average height is directly left of the rabbit owner.\n4. The person who is tall is somewhere to the left of the person who is very short.\n5. Arnold is the cat lover.\n6. The person who keeps horses is the person who is a teacher.\n7. Carol is the person who loves soccer.\n8. The person who is tall is the person who loves volleyball.\n9. The person who is a lawyer is in the fifth house.\n10. The person who loves tennis is the person who is a teacher.\n11. The person who has an average height is the person who loves swimming.\n12. The person who loves baseball is directly left of the person who is an engineer.\n13. Peter is the person who is a nurse.\n14. Bob is somewhere to the right of the person who is an artist.\n15. The person who is a teacher is directly left of the person who loves soccer.\n16. The rabbit owner is Alice.\n17. The fish enthusiast is Carol.\n18. The person who loves baseball is in the first house.\n19. The cat lover is somewhere to the right of the person who is very short.\n20. The person who is super tall is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Occupation",
        "FavoriteSport",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "bird",
          "nurse",
          "baseball",
          "very tall"
        ],
        [
          "2",
          "Eric",
          "dog",
          "engineer",
          "swimming",
          "average"
        ],
        [
          "3",
          "Alice",
          "rabbit",
          "artist",
          "volleyball",
          "tall"
        ],
        [
          "4",
          "Bob",
          "horse",
          "teacher",
          "tennis",
          "very short"
        ],
        [
          "5",
          "Carol",
          "fish",
          "lawyer",
          "soccer",
          "super tall"
        ],
        [
          "6",
          "Arnold",
          "cat",
          "doctor",
          "basketball",
          "short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Bob, Eric, Carol, Alice])\nanimals = EnumSort([horse, rabbit, fish, cat, bird, dog])\noccupations = EnumSort([engineer, nurse, lawyer, teacher, artist, doctor])\nsports = EnumSort([basketball, volleyball, soccer, tennis, baseball, swimming])\nheights = EnumSort([average, tall, short, very_short, very_tall, super_tall])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_occupation = Function([people] -> [occupations])\nhas_sport = Function([people] -> [sports])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is an engineer is the dog owner\nThe person who has an average height is somewhere to the left of the person who is short\nThe person who has an average height is directly left of the rabbit owner\nThe person who is tall is somewhere to the left of the person who is very short\nArnold is the cat lover\nThe person who keeps horses is the person who is a teacher\nCarol is the person who loves soccer\nThe person who is tall is the person who loves volleyball\nThe person who is a lawyer is in the fifth house\nThe person who loves tennis is the person who is a teacher\nThe person who has an average height is the person who loves swimming\nThe person who loves baseball is directly left of the person who is an engineer\nPeter is the person who is a nurse\nBob is somewhere to the right of the person who is an artist\nThe person who is a teacher is directly left of the person who loves soccer\nThe rabbit owner is Alice\nThe fish enthusiast is Carol\nThe person who loves baseball is in the first house\nThe cat lover is somewhere to the right of the person who is very short\nThe person who is super tall is in the fifth house",
    "queries": "And( And(lives(Peter) == 1, has_animal(Peter) == bird, has_occupation(Peter) == nurse, has_sport(Peter) == baseball, has_height(Peter) == very_tall), And(lives(Eric) == 2, has_animal(Eric) == dog, has_occupation(Eric) == engineer, has_sport(Eric) == swimming, has_height(Eric) == average), And(lives(Alice) == 3, has_animal(Alice) == rabbit, has_occupation(Alice) == artist, has_sport(Alice) == volleyball, has_height(Alice) == tall), And(lives(Bob) == 4, has_animal(Bob) == horse, has_occupation(Bob) == teacher, has_sport(Bob) == tennis, has_height(Bob) == very_short), And(lives(Carol) == 5, has_animal(Carol) == fish, has_occupation(Carol) == lawyer, has_sport(Carol) == soccer, has_height(Carol) == super_tall), And(lives(Arnold) == 6, has_animal(Arnold) == cat, has_occupation(Arnold) == doctor, has_sport(Arnold) == basketball, has_height(Arnold) == short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-19",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Eric`, `Bob`, `Carol`, `Arnold`\n - People have unique favorite sports: `baseball`, `basketball`, `swimming`, `tennis`, `soccer`, `volleyball`\n - Each person has a favorite color: `purple`, `green`, `white`, `red`, `yellow`, `blue`\n - People have unique hair colors: `red`, `auburn`, `blonde`, `black`, `gray`, `brown`\n - Everyone has something unique for lunch: `stew`, `spaghetti`, `stir fry`, `grilled cheese`, `soup`, `pizza`\n\nClues:\n1. Arnold is somewhere to the left of the person who loves blue.\n2. There are two houses between the person whose favorite color is green and Bob.\n3. The person who loves white is in the fifth house.\n4. The person who loves baseball is directly left of the person who has brown hair.\n5. The person who loves tennis is not in the fifth house.\n6. The person who has auburn hair is the person who loves the stew.\n7. The person whose favorite color is red and the person who loves baseball are next to each other.\n8. The person who is a pizza lover is Eric.\n9. The person who loves purple is Carol.\n10. Peter is in the third house.\n11. Carol is the person who loves soccer.\n12. The person who loves volleyball is somewhere to the left of the person who has auburn hair.\n13. Eric is in the first house.\n14. There is one house between the person who has gray hair and the person who loves blue.\n15. The person who loves volleyball is directly left of the person who loves baseball.\n16. The person who loves the spaghetti eater is in the fifth house.\n17. The person who loves eating grilled cheese is the person who has brown hair.\n18. The person who loves the soup is in the third house.\n19. The person who has blonde hair is somewhere to the left of the person who has gray hair.\n20. The person who has red hair is the person who loves white.\n21. The person who loves blue is somewhere to the right of the person who loves swimming.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Color",
        "HairColor",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "swimming",
          "green",
          "blonde",
          "pizza"
        ],
        [
          "2",
          "Arnold",
          "volleyball",
          "red",
          "gray",
          "stir fry"
        ],
        [
          "3",
          "Peter",
          "baseball",
          "yellow",
          "black",
          "soup"
        ],
        [
          "4",
          "Bob",
          "tennis",
          "blue",
          "brown",
          "grilled cheese"
        ],
        [
          "5",
          "Alice",
          "basketball",
          "white",
          "red",
          "spaghetti"
        ],
        [
          "6",
          "Carol",
          "soccer",
          "purple",
          "auburn",
          "stew"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Eric, Bob, Carol, Arnold])\nsports = EnumSort([baseball, basketball, swimming, tennis, soccer, volleyball])\ncolors = EnumSort([purple, green, white, red, yellow, blue])\nhairColors = EnumSort([red, auburn, blonde, black, gray, brown])\nfoods = EnumSort([stew, spaghetti, stir_fry, grilled_cheese, soup, pizza])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_color = Function([people] -> [colors])\nhas_hairColor = Function([people] -> [hairColors])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is somewhere to the left of the person who loves blue\nThere are two houses between the person whose favorite color is green and Bob\nThe person who loves white is in the fifth house\nThe person who loves baseball is directly left of the person who has brown hair\nThe person who loves tennis is not in the fifth house\nThe person who has auburn hair is the person who loves the stew\nThe person whose favorite color is red and the person who loves baseball are next to each other\nThe person who is a pizza lover is Eric\nThe person who loves purple is Carol\nPeter is in the third house\nCarol is the person who loves soccer\nThe person who loves volleyball is somewhere to the left of the person who has auburn hair\nEric is in the first house\nThere is one house between the person who has gray hair and the person who loves blue\nThe person who loves volleyball is directly left of the person who loves baseball\nThe person who loves the spaghetti eater is in the fifth house\nThe person who loves eating grilled cheese is the person who has brown hair\nThe person who loves the soup is in the third house\nThe person who has blonde hair is somewhere to the left of the person who has gray hair\nThe person who has red hair is the person who loves white\nThe person who loves blue is somewhere to the right of the person who loves swimming",
    "queries": "And( And(lives(Eric) == 1, has_sport(Eric) == swimming, has_color(Eric) == green, has_hairColor(Eric) == blonde, has_food(Eric) == pizza), And(lives(Arnold) == 2, has_sport(Arnold) == volleyball, has_color(Arnold) == red, has_hairColor(Arnold) == gray, has_food(Arnold) == stir_fry), And(lives(Peter) == 3, has_sport(Peter) == baseball, has_color(Peter) == yellow, has_hairColor(Peter) == black, has_food(Peter) == soup), And(lives(Bob) == 4, has_sport(Bob) == tennis, has_color(Bob) == blue, has_hairColor(Bob) == brown, has_food(Bob) == grilled_cheese), And(lives(Alice) == 5, has_sport(Alice) == basketball, has_color(Alice) == white, has_hairColor(Alice) == red, has_food(Alice) == spaghetti), And(lives(Carol) == 6, has_sport(Carol) == soccer, has_color(Carol) == purple, has_hairColor(Carol) == auburn, has_food(Carol) == stew) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-24",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Peter`, `Bob`, `Alice`, `Carol`\n - People have unique favorite music genres: `jazz`, `country`, `pop`, `classical`, `rock`, `hip hop`\n - Each person lives in a unique style of house: `mediterranean`, `modern`, `colonial`, `ranch`, `victorian`, `craftsman`\n - People have unique favorite sports: `tennis`, `baseball`, `soccer`, `volleyball`, `swimming`, `basketball`\n - People have unique favorite book genres: `science fiction`, `historical fiction`, `mystery`, `biography`, `fantasy`, `romance`\n\nClues:\n1. The person who loves baseball is Arnold.\n2. Alice is somewhere to the left of the person living in a colonial-style house.\n3. The person who loves country music is directly left of the person who loves hip-hop music.\n4. Peter is the person residing in a Victorian house.\n5. The person who loves fantasy books is Peter.\n6. The person who loves baseball is the person who loves romance books.\n7. The person who loves hip-hop music is somewhere to the left of the person who loves biography books.\n8. The person in a ranch-style home is somewhere to the left of the person who loves romance books.\n9. Bob is the person who loves swimming.\n10. The person who loves romance books is somewhere to the left of the person who loves mystery books.\n11. The person who loves basketball is in the fourth house.\n12. Bob is the person who loves jazz music.\n13. The person in a Craftsman-style house is the person who loves mystery books.\n14. Peter is somewhere to the left of the person who loves basketball.\n15. The person who loves volleyball is somewhere to the right of the person in a Mediterranean-style villa.\n16. The person in a Mediterranean-style villa is Alice.\n17. The person who loves historical fiction books is directly left of the person living in a colonial-style house.\n18. Carol is directly left of the person who loves pop music.\n19. There is one house between the person who loves pop music and the person who loves classical music.\n20. There are two houses between the person who loves tennis and Alice.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "HouseStyle",
        "FavoriteSport",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "country",
          "victorian",
          "tennis",
          "fantasy"
        ],
        [
          "2",
          "Carol",
          "hip hop",
          "ranch",
          "soccer",
          "science fiction"
        ],
        [
          "3",
          "Arnold",
          "pop",
          "modern",
          "baseball",
          "romance"
        ],
        [
          "4",
          "Alice",
          "rock",
          "mediterranean",
          "basketball",
          "historical fiction"
        ],
        [
          "5",
          "Eric",
          "classical",
          "colonial",
          "volleyball",
          "biography"
        ],
        [
          "6",
          "Bob",
          "jazz",
          "craftsman",
          "swimming",
          "mystery"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Peter, Bob, Alice, Carol])\nmusicGenres = EnumSort([jazz, country, pop, classical, rock, hip_hop])\nhouseStyles = EnumSort([mediterranean, modern, colonial, ranch, victorian, craftsman])\nsports = EnumSort([tennis, baseball, soccer, volleyball, swimming, basketball])\nbookGenres = EnumSort([science_fiction, historical_fiction, mystery, biography, fantasy, romance])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_sport = Function([people] -> [sports])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves baseball is Arnold\nAlice is somewhere to the left of the person living in a colonial-style house\nThe person who loves country music is directly left of the person who loves hip-hop music\nPeter is the person residing in a Victorian house\nThe person who loves fantasy books is Peter\nThe person who loves baseball is the person who loves romance books\nThe person who loves hip-hop music is somewhere to the left of the person who loves biography books\nThe person in a ranch-style home is somewhere to the left of the person who loves romance books\nBob is the person who loves swimming\nThe person who loves romance books is somewhere to the left of the person who loves mystery books\nThe person who loves basketball is in the fourth house\nBob is the person who loves jazz music\nThe person in a Craftsman-style house is the person who loves mystery books\nPeter is somewhere to the left of the person who loves basketball\nThe person who loves volleyball is somewhere to the right of the person in a Mediterranean-style villa\nThe person in a Mediterranean-style villa is Alice\nThe person who loves historical fiction books is directly left of the person living in a colonial-style house\nCarol is directly left of the person who loves pop music\nThere is one house between the person who loves pop music and the person who loves classical music\nThere are two houses between the person who loves tennis and Alice",
    "queries": "And( And(lives(Peter) == 1, has_musicGenre(Peter) == country, has_houseStyle(Peter) == victorian, has_sport(Peter) == tennis, has_bookGenre(Peter) == fantasy), And(lives(Carol) == 2, has_musicGenre(Carol) == hip_hop, has_houseStyle(Carol) == ranch, has_sport(Carol) == soccer, has_bookGenre(Carol) == science_fiction), And(lives(Arnold) == 3, has_musicGenre(Arnold) == pop, has_houseStyle(Arnold) == modern, has_sport(Arnold) == baseball, has_bookGenre(Arnold) == romance), And(lives(Alice) == 4, has_musicGenre(Alice) == rock, has_houseStyle(Alice) == mediterranean, has_sport(Alice) == basketball, has_bookGenre(Alice) == historical_fiction), And(lives(Eric) == 5, has_musicGenre(Eric) == classical, has_houseStyle(Eric) == colonial, has_sport(Eric) == volleyball, has_bookGenre(Eric) == biography), And(lives(Bob) == 6, has_musicGenre(Bob) == jazz, has_houseStyle(Bob) == craftsman, has_sport(Bob) == swimming, has_bookGenre(Bob) == mystery) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-39",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Peter`, `Alice`, `Carol`, `Bob`\n - People have unique favorite book genres: `mystery`, `biography`, `science fiction`, `romance`, `fantasy`, `historical fiction`\n - Each person has a unique favorite drink: `water`, `milk`, `boba tea`, `coffee`, `tea`, `root beer`\n - People have unique hair colors: `blonde`, `red`, `gray`, `black`, `auburn`, `brown`\n - Each person has a unique birthday month: `may`, `mar`, `sept`, `jan`, `april`, `feb`\n\nClues:\n1. The person who likes milk is the person who has gray hair.\n2. Alice is somewhere to the right of the person who has auburn hair.\n3. The person whose birthday is in September is not in the sixth house.\n4. The tea drinker is somewhere to the left of the person who has auburn hair.\n5. Carol is the person who loves biography books.\n6. The person who likes milk is in the fourth house.\n7. The person who has auburn hair is directly left of Eric.\n8. The boba tea drinker is the person who has brown hair.\n9. The person whose birthday is in February is the person who has gray hair.\n10. Carol is the person who has blonde hair.\n11. The person who loves fantasy books is somewhere to the left of Bob.\n12. The person who has blonde hair is the person whose birthday is in April.\n13. Peter is the coffee drinker.\n14. The person who loves historical fiction books is somewhere to the right of the person who loves science fiction books.\n15. The person who loves science fiction books is Bob.\n16. The root beer lover is not in the first house.\n17. There is one house between the person whose birthday is in May and Peter.\n18. The person who has black hair is in the second house.\n19. The person whose birthday is in February is the person who loves historical fiction books.\n20. Arnold is the person whose birthday is in March.\n21. The root beer lover is somewhere to the left of the person whose birthday is in May.\n22. The person who loves mystery books is in the sixth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "Drink",
        "HairColor",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "biography",
          "tea",
          "blonde",
          "april"
        ],
        [
          "2",
          "Arnold",
          "fantasy",
          "root beer",
          "black",
          "mar"
        ],
        [
          "3",
          "Bob",
          "science fiction",
          "water",
          "auburn",
          "may"
        ],
        [
          "4",
          "Eric",
          "historical fiction",
          "milk",
          "gray",
          "feb"
        ],
        [
          "5",
          "Peter",
          "romance",
          "coffee",
          "red",
          "sept"
        ],
        [
          "6",
          "Alice",
          "mystery",
          "boba tea",
          "brown",
          "jan"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Peter, Alice, Carol, Bob])\nbookGenres = EnumSort([mystery, biography, science_fiction, romance, fantasy, historical_fiction])\ndrinks = EnumSort([water, milk, boba_tea, coffee, tea, root_beer])\nhairColors = EnumSort([blonde, red, gray, black, auburn, brown])\nbirthMonths = EnumSort([may, mar, sept, jan, april, feb])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_drink = Function([people] -> [drinks])\nhas_hairColor = Function([people] -> [hairColors])\nhas_birthMonth = Function([people] -> [birthMonths])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who likes milk is the person who has gray hair\nAlice is somewhere to the right of the person who has auburn hair\nThe person whose birthday is in September is not in the sixth house\nThe tea drinker is somewhere to the left of the person who has auburn hair\nCarol is the person who loves biography books\nThe person who likes milk is in the fourth house\nThe person who has auburn hair is directly left of Eric\nThe boba tea drinker is the person who has brown hair\nThe person whose birthday is in February is the person who has gray hair\nCarol is the person who has blonde hair\nThe person who loves fantasy books is somewhere to the left of Bob\nThe person who has blonde hair is the person whose birthday is in April\nPeter is the coffee drinker\nThe person who loves historical fiction books is somewhere to the right of the person who loves science fiction books\nThe person who loves science fiction books is Bob\nThe root beer lover is not in the first house\nThere is one house between the person whose birthday is in May and Peter\nThe person who has black hair is in the second house\nThe person whose birthday is in February is the person who loves historical fiction books\nArnold is the person whose birthday is in March\nThe root beer lover is somewhere to the left of the person whose birthday is in May\nThe person who loves mystery books is in the sixth house",
    "queries": "And( And(lives(Carol) == 1, has_bookGenre(Carol) == biography, has_drink(Carol) == tea, has_hairColor(Carol) == blonde, has_birthMonth(Carol) == april), And(lives(Arnold) == 2, has_bookGenre(Arnold) == fantasy, has_drink(Arnold) == root_beer, has_hairColor(Arnold) == black, has_birthMonth(Arnold) == mar), And(lives(Bob) == 3, has_bookGenre(Bob) == science_fiction, has_drink(Bob) == water, has_hairColor(Bob) == auburn, has_birthMonth(Bob) == may), And(lives(Eric) == 4, has_bookGenre(Eric) == historical_fiction, has_drink(Eric) == milk, has_hairColor(Eric) == gray, has_birthMonth(Eric) == feb), And(lives(Peter) == 5, has_bookGenre(Peter) == romance, has_drink(Peter) == coffee, has_hairColor(Peter) == red, has_birthMonth(Peter) == sept), And(lives(Alice) == 6, has_bookGenre(Alice) == mystery, has_drink(Alice) == boba_tea, has_hairColor(Alice) == brown, has_birthMonth(Alice) == jan) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-14",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Carol`, `Arnold`, `Peter`, `Alice`\n - Everyone has a unique favorite cigar: `blends`, `prince`, `dunhill`, `yellow monster`, `blue master`, `pall mall`\n - People have unique hair colors: `auburn`, `gray`, `blonde`, `black`, `red`, `brown`\n - Each person has a unique favorite drink: `boba tea`, `root beer`, `water`, `tea`, `coffee`, `milk`\n - Each person has an occupation: `artist`, `nurse`, `teacher`, `doctor`, `engineer`, `lawyer`\n\nClues:\n1. Bob is the tea drinker.\n2. The Dunhill smoker is not in the second house.\n3. There is one house between Carol and Arnold.\n4. The Prince smoker is the person who has black hair.\n5. The person who has auburn hair is not in the third house.\n6. Arnold is in the fourth house.\n7. The Prince smoker is not in the fourth house.\n8. The person who is an artist is the person partial to Pall Mall.\n9. The person who is an engineer is directly left of the root beer lover.\n10. The boba tea drinker is the person who has brown hair.\n11. The person who is a lawyer is in the fifth house.\n12. The person who is an engineer is the person who smokes Blue Master.\n13. The person who likes milk is the person who has auburn hair.\n14. Alice is somewhere to the left of the person who is a teacher.\n15. The person who has blonde hair is the person who smokes Yellow Monster.\n16. The person who has black hair is the person who is a doctor.\n17. Arnold is somewhere to the right of the person who has gray hair.\n18. The person who has auburn hair is not in the first house.\n19. The one who only drinks water is the person who smokes many unique blends.\n20. The person who smokes many unique blends is somewhere to the right of the person who has brown hair.\n21. Arnold is the root beer lover.\n22. The person who has brown hair is not in the third house.\n23. The person who smokes many unique blends is somewhere to the left of Peter.\n24. The person who likes milk is somewhere to the left of the person who has blonde hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "HairColor",
        "Drink",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "dunhill",
          "brown",
          "boba tea",
          "nurse"
        ],
        [
          "2",
          "Carol",
          "pall mall",
          "auburn",
          "milk",
          "artist"
        ],
        [
          "3",
          "Bob",
          "blue master",
          "gray",
          "tea",
          "engineer"
        ],
        [
          "4",
          "Arnold",
          "yellow monster",
          "blonde",
          "root beer",
          "teacher"
        ],
        [
          "5",
          "Eric",
          "blends",
          "red",
          "water",
          "lawyer"
        ],
        [
          "6",
          "Peter",
          "prince",
          "black",
          "coffee",
          "doctor"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Carol, Arnold, Peter, Alice])\ncigars = EnumSort([blends, prince, dunhill, yellow_monster, blue_master, pall_mall])\nhairColors = EnumSort([auburn, gray, blonde, black, red, brown])\ndrinks = EnumSort([boba_tea, root_beer, water, tea, coffee, milk])\noccupations = EnumSort([artist, nurse, teacher, doctor, engineer, lawyer])\nlives = Function([people] -> [int])\nhas_cigar = Function([people] -> [cigars])\nhas_hairColor = Function([people] -> [hairColors])\nhas_drink = Function([people] -> [drinks])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Bob is the tea drinker\nThe Dunhill smoker is not in the second house\nThere is one house between Carol and Arnold\nThe Prince smoker is the person who has black hair\nThe person who has auburn hair is not in the third house\nArnold is in the fourth house\nThe Prince smoker is not in the fourth house\nThe person who is an artist is the person partial to Pall Mall\nThe person who is an engineer is directly left of the root beer lover\nThe boba tea drinker is the person who has brown hair\nThe person who is a lawyer is in the fifth house\nThe person who is an engineer is the person who smokes Blue Master\nThe person who likes milk is the person who has auburn hair\nAlice is somewhere to the left of the person who is a teacher\nThe person who has blonde hair is the person who smokes Yellow Monster\nThe person who has black hair is the person who is a doctor\nArnold is somewhere to the right of the person who has gray hair\nThe person who has auburn hair is not in the first house\nThe one who only drinks water is the person who smokes many unique blends\nThe person who smokes many unique blends is somewhere to the right of the person who has brown hair\nArnold is the root beer lover\nThe person who has brown hair is not in the third house\nThe person who smokes many unique blends is somewhere to the left of Peter\nThe person who likes milk is somewhere to the left of the person who has blonde hair",
    "queries": "And( And(lives(Alice) == 1, has_cigar(Alice) == dunhill, has_hairColor(Alice) == brown, has_drink(Alice) == boba_tea, has_occupation(Alice) == nurse), And(lives(Carol) == 2, has_cigar(Carol) == pall_mall, has_hairColor(Carol) == auburn, has_drink(Carol) == milk, has_occupation(Carol) == artist), And(lives(Bob) == 3, has_cigar(Bob) == blue_master, has_hairColor(Bob) == gray, has_drink(Bob) == tea, has_occupation(Bob) == engineer), And(lives(Arnold) == 4, has_cigar(Arnold) == yellow_monster, has_hairColor(Arnold) == blonde, has_drink(Arnold) == root_beer, has_occupation(Arnold) == teacher), And(lives(Eric) == 5, has_cigar(Eric) == blends, has_hairColor(Eric) == red, has_drink(Eric) == water, has_occupation(Eric) == lawyer), And(lives(Peter) == 6, has_cigar(Peter) == prince, has_hairColor(Peter) == black, has_drink(Peter) == coffee, has_occupation(Peter) == doctor) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-11",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Bob`, `Alice`\n - People have unique heights: `average`, `very tall`, `very short`, `short`, `tall`\n - Everyone has a unique favorite cigar: `prince`, `dunhill`, `blends`, `pall mall`, `blue master`\n - Everyone has a favorite smoothie: `lime`, `cherry`, `dragonfruit`, `watermelon`, `desert`\n - People use unique phone models: `oneplus 9`, `samsung galaxy s21`, `iphone 13`, `huawei p50`, `google pixel 6`\n\nClues:\n1. The Prince smoker is the Desert smoothie lover.\n2. There is one house between Eric and Alice.\n3. The person who is short is the person who smokes many unique blends.\n4. The person who uses an iPhone 13 is directly left of the person who smokes Blue Master.\n5. The person who has an average height is the Dunhill smoker.\n6. Eric is the person who is very tall.\n7. Arnold is directly left of the person who uses a Huawei P50.\n8. Bob is not in the fourth house.\n9. Eric is directly left of the person who likes Cherry smoothies.\n10. Bob is the Dunhill smoker.\n11. The Dragonfruit smoothie lover is Bob.\n12. The person who uses an iPhone 13 and the person who uses a OnePlus 9 are next to each other.\n13. The person who uses a Samsung Galaxy S21 is the person who is short.\n14. There are two houses between the person who is very tall and the Dragonfruit smoothie lover.\n15. The person who uses an iPhone 13 is Eric.\n16. The Desert smoothie lover is somewhere to the left of the person who drinks Lime smoothies.\n17. Arnold and the person who is very short are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Cigar",
        "Smoothie",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "short",
          "blends",
          "watermelon",
          "samsung galaxy s21"
        ],
        [
          "2",
          "Eric",
          "very tall",
          "prince",
          "desert",
          "iphone 13"
        ],
        [
          "3",
          "Arnold",
          "tall",
          "blue master",
          "cherry",
          "oneplus 9"
        ],
        [
          "4",
          "Alice",
          "very short",
          "pall mall",
          "lime",
          "huawei p50"
        ],
        [
          "5",
          "Bob",
          "average",
          "dunhill",
          "dragonfruit",
          "google pixel 6"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Bob, Alice])\nheights = EnumSort([average, very_tall, very_short, short, tall])\ncigars = EnumSort([prince, dunhill, blends, pall_mall, blue_master])\nsmoothies = EnumSort([lime, cherry, dragonfruit, watermelon, desert])\nphones = EnumSort([oneplus_9, samsung_galaxy_s21, iphone_13, huawei_p50, google_pixel_6])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_cigar = Function([people] -> [cigars])\nhas_smoothie = Function([people] -> [smoothies])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The Prince smoker is the Desert smoothie lover\nThere is one house between Eric and Alice\nThe person who is short is the person who smokes many unique blends\nThe person who uses an iPhone 13 is directly left of the person who smokes Blue Master\nThe person who has an average height is the Dunhill smoker\nEric is the person who is very tall\nArnold is directly left of the person who uses a Huawei P50\nBob is not in the fourth house\nEric is directly left of the person who likes Cherry smoothies\nBob is the Dunhill smoker\nThe Dragonfruit smoothie lover is Bob\nThe person who uses an iPhone 13 and the person who uses a OnePlus 9 are next to each other\nThe person who uses a Samsung Galaxy S21 is the person who is short\nThere are two houses between the person who is very tall and the Dragonfruit smoothie lover\nThe person who uses an iPhone 13 is Eric\nThe Desert smoothie lover is somewhere to the left of the person who drinks Lime smoothies\nArnold and the person who is very short are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_height(Peter) == short, has_cigar(Peter) == blends, has_smoothie(Peter) == watermelon, has_phone(Peter) == samsung_galaxy_s21), And(lives(Eric) == 2, has_height(Eric) == very_tall, has_cigar(Eric) == prince, has_smoothie(Eric) == desert, has_phone(Eric) == iphone_13), And(lives(Arnold) == 3, has_height(Arnold) == tall, has_cigar(Arnold) == blue_master, has_smoothie(Arnold) == cherry, has_phone(Arnold) == oneplus_9), And(lives(Alice) == 4, has_height(Alice) == very_short, has_cigar(Alice) == pall_mall, has_smoothie(Alice) == lime, has_phone(Alice) == huawei_p50), And(lives(Bob) == 5, has_height(Bob) == average, has_cigar(Bob) == dunhill, has_smoothie(Bob) == dragonfruit, has_phone(Bob) == google_pixel_6) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-0",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Peter`\n - Each person has a unique level of education: `master`, `bachelor`, `associate`, `high school`\n - People have unique favorite sports: `tennis`, `soccer`, `swimming`, `basketball`\n - Each person has an occupation: `teacher`, `engineer`, `doctor`, `artist`\n - They all have a unique favorite flower: `carnations`, `daffodils`, `lilies`, `roses`\n - People have unique heights: `very short`, `average`, `tall`, `short`\n\nClues:\n1. Eric is the person who loves a carnations arrangement.\n2. The person who loves swimming is somewhere to the left of the person who is an artist.\n3. Arnold is directly left of the person who is tall.\n4. The person who loves swimming and the person who is a teacher are next to each other.\n5. The person who loves basketball is the person with a bachelor's degree.\n6. The person who is a doctor is the person who loves the rose bouquet.\n7. The person who loves the boquet of lilies is the person who loves tennis.\n8. The person who loves a carnations arrangement is the person with a master's degree.\n9. The person who is a teacher is directly left of Alice.\n10. The person who is an artist is the person with an associate's degree.\n11. The person who loves a bouquet of daffodils is the person who is an artist.\n12. The person who loves soccer is not in the fourth house.\n13. The person who loves a bouquet of daffodils is somewhere to the right of the person who is short.\n14. The person with a master's degree is the person who is very short.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "FavoriteSport",
        "Occupation",
        "Flower",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "master",
          "swimming",
          "engineer",
          "carnations",
          "very short"
        ],
        [
          "2",
          "Arnold",
          "high school",
          "tennis",
          "teacher",
          "lilies",
          "short"
        ],
        [
          "3",
          "Alice",
          "associate",
          "soccer",
          "artist",
          "daffodils",
          "tall"
        ],
        [
          "4",
          "Peter",
          "bachelor",
          "basketball",
          "doctor",
          "roses",
          "average"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Peter])\neducationLevels = EnumSort([master, bachelor, associate, high_school])\nsports = EnumSort([tennis, soccer, swimming, basketball])\noccupations = EnumSort([teacher, engineer, doctor, artist])\nflowers = EnumSort([carnations, daffodils, lilies, roses])\nheights = EnumSort([very_short, average, tall, short])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_sport = Function([people] -> [sports])\nhas_occupation = Function([people] -> [occupations])\nhas_flower = Function([people] -> [flowers])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "Eric is the person who loves a carnations arrangement\nThe person who loves swimming is somewhere to the left of the person who is an artist\nArnold is directly left of the person who is tall\nThe person who loves swimming and the person who is a teacher are next to each other\nThe person who loves basketball is the person with a bachelor's degree\nThe person who is a doctor is the person who loves the rose bouquet\nThe person who loves the boquet of lilies is the person who loves tennis\nThe person who loves a carnations arrangement is the person with a master's degree\nThe person who is a teacher is directly left of Alice\nThe person who is an artist is the person with an associate's degree\nThe person who loves a bouquet of daffodils is the person who is an artist\nThe person who loves soccer is not in the fourth house\nThe person who loves a bouquet of daffodils is somewhere to the right of the person who is short\nThe person with a master's degree is the person who is very short",
    "queries": "And( And( lives(Eric) == 1, has_education(Eric) == master, has_sport(Eric) == swimming, has_occupation(Eric) == engineer, has_flower(Eric) == carnations, has_height(Eric) == very_short ), And( lives(Arnold) == 2, has_education(Arnold) == high_school, has_sport(Arnold) == tennis, has_occupation(Arnold) == teacher, has_flower(Arnold) == lilies, has_height(Arnold) == short ), And( lives(Alice) == 3, has_education(Alice) == associate, has_sport(Alice) == soccer, has_occupation(Alice) == artist, has_flower(Alice) == daffodils, has_height(Alice) == tall ), And( lives(Peter) == 4, has_education(Peter) == bachelor, has_sport(Peter) == basketball, has_occupation(Peter) == doctor, has_flower(Peter) == roses, has_height(Peter) == average ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-25",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Arnold`, `Peter`\n - Each person has a unique hobby: `painting`, `gardening`, `photography`, `cooking`\n - People have unique favorite book genres: `romance`, `science fiction`, `mystery`, `fantasy`\n - Each person prefers a unique type of vacation: `city`, `beach`, `mountain`, `cruise`\n - People have unique favorite music genres: `rock`, `pop`, `classical`, `jazz`\n - Each person has a unique level of education: `high school`, `associate`, `bachelor`, `master`\n\nClues:\n1. The person who loves science fiction books is somewhere to the right of the person who loves fantasy books.\n2. The person who paints as a hobby is the person who loves fantasy books.\n3. Arnold is the person who loves fantasy books.\n4. The person with a high school diploma is the person who loves pop music.\n5. The person who loves cooking is somewhere to the right of Eric.\n6. There are two houses between the photography enthusiast and the person who loves beach vacations.\n7. The person who loves romance books is Peter.\n8. The person who enjoys mountain retreats is not in the second house.\n9. The person with a bachelor's degree is somewhere to the right of the person with a high school diploma.\n10. The person who loves classical music is not in the third house.\n11. The person who prefers city breaks is the person who loves science fiction books.\n12. The person who loves rock music is Peter.\n13. The person with a bachelor's degree is not in the fourth house.\n14. The person with a master's degree is the person who loves jazz music.\n15. The person who enjoys gardening is the person who loves romance books.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "BookGenre",
        "Vacation",
        "MusicGenre",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "photography",
          "mystery",
          "mountain",
          "pop",
          "high school"
        ],
        [
          "2",
          "Arnold",
          "painting",
          "fantasy",
          "cruise",
          "classical",
          "bachelor"
        ],
        [
          "3",
          "Alice",
          "cooking",
          "science fiction",
          "city",
          "jazz",
          "master"
        ],
        [
          "4",
          "Peter",
          "gardening",
          "romance",
          "beach",
          "rock",
          "associate"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Arnold, Peter])\nhobbies = EnumSort([painting, gardening, photography, cooking])\nbookGenres = EnumSort([romance, science_fiction, mystery, fantasy])\nvacations = EnumSort([city, beach, mountain, cruise])\nmusicGenres = EnumSort([rock, pop, classical, jazz])\neducationLevels = EnumSort([high_school, associate, bachelor, master])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_vacation = Function([people] -> [vacations])\nhas_music = Function([people] -> [musicGenres])\nhas_education = Function([people] -> [educationLevels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves science fiction books is somewhere to the right of the person who loves fantasy books\nThe person who paints as a hobby is the person who loves fantasy books\nArnold is the person who loves fantasy books\nThe person with a high school diploma is the person who loves pop music\nThe person who loves cooking is somewhere to the right of Eric\nThere are two houses between the photography enthusiast and the person who loves beach vacations\nThe person who loves romance books is Peter\nThe person who enjoys mountain retreats is not in the second house\nThe person with a bachelor's degree is somewhere to the right of the person with a high school diploma\nThe person who loves classical music is not in the third house\nThe person who prefers city breaks is the person who loves science fiction books\nThe person who loves rock music is Peter\nThe person with a bachelor's degree is not in the fourth house\nThe person with a master's degree is the person who loves jazz music\nThe person who enjoys gardening is the person who loves romance books",
    "queries": "And( And( lives(Eric) == 1, has_hobby(Eric) == photography, has_bookGenre(Eric) == mystery, has_vacation(Eric) == mountain, has_music(Eric) == pop, has_education(Eric) == high_school ), And( lives(Arnold) == 2, has_hobby(Arnold) == painting, has_bookGenre(Arnold) == fantasy, has_vacation(Arnold) == cruise, has_music(Arnold) == classical, has_education(Arnold) == bachelor ), And( lives(Alice) == 3, has_hobby(Alice) == cooking, has_bookGenre(Alice) == science_fiction, has_vacation(Alice) == city, has_music(Alice) == jazz, has_education(Alice) == master ), And( lives(Peter) == 4, has_hobby(Peter) == gardening, has_bookGenre(Peter) == romance, has_vacation(Peter) == beach, has_music(Peter) == rock, has_education(Peter) == associate ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-29",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Peter`, `Arnold`, `Bob`, `Eric`, `Alice`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `oneplus 9`, `huawei p50`, `samsung galaxy s21`, `xiaomi mi 11`\n - People have unique hair colors: `gray`, `auburn`, `red`, `brown`, `black`, `blonde`\n - Each person has a unique favorite drink: `coffee`, `water`, `root beer`, `tea`, `milk`, `boba tea`\n - People have unique favorite music genres: `classical`, `jazz`, `rock`, `country`, `hip hop`, `pop`\n\nClues:\n1. Alice is the person who uses a Huawei P50.\n2. The person who uses a Xiaomi Mi 11 is somewhere to the left of the one who only drinks water.\n3. The one who only drinks water is somewhere to the left of Bob.\n4. Carol is the person who has gray hair.\n5. Eric is the tea drinker.\n6. The person who has black hair is not in the sixth house.\n7. The person who uses a Samsung Galaxy S21 is directly left of the person who loves classical music.\n8. The person who uses a OnePlus 9 is not in the third house.\n9. Alice is somewhere to the right of Carol.\n10. The person who loves jazz music is Alice.\n11. The person who loves jazz music is the boba tea drinker.\n12. There is one house between the person who uses a OnePlus 9 and Eric.\n13. The person who has brown hair is the person who loves hip-hop music.\n14. The person who loves pop music is not in the first house.\n15. The root beer lover is in the second house.\n16. Eric is the person who uses an iPhone 13.\n17. The person who has red hair is the person who uses an iPhone 13.\n18. The person who has red hair and the coffee drinker are next to each other.\n19. Peter is in the first house.\n20. Arnold is somewhere to the right of the person who has auburn hair.\n21. The person who has gray hair is not in the second house.\n22. The person who loves country music is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "HairColor",
        "Drink",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "xiaomi mi 11",
          "auburn",
          "milk",
          "rock"
        ],
        [
          "2",
          "Arnold",
          "oneplus 9",
          "brown",
          "root beer",
          "hip hop"
        ],
        [
          "3",
          "Carol",
          "samsung galaxy s21",
          "gray",
          "water",
          "pop"
        ],
        [
          "4",
          "Eric",
          "iphone 13",
          "red",
          "tea",
          "classical"
        ],
        [
          "5",
          "Bob",
          "google pixel 6",
          "black",
          "coffee",
          "country"
        ],
        [
          "6",
          "Alice",
          "huawei p50",
          "blonde",
          "boba tea",
          "jazz"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Peter, Arnold, Bob, Eric, Alice])\nphoneModels = EnumSort([iphone_13, google_pixel_6, oneplus_9, huawei_p50, samsung_galaxy_s21, xiaomi_mi_11])\nhairColors = EnumSort([gray, auburn, red, brown, black, blonde])\ndrinks = EnumSort([coffee, water, root_beer, tea, milk, boba_tea])\nmusicGenres = EnumSort([classical, jazz, rock, country, hip_hop, pop])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_hairColor = Function([people] -> [hairColors])\ndrinks_favorite = Function([people] -> [drinks])\nloves_music = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is the person who uses a Huawei P50\nThe person who uses a Xiaomi Mi 11 is somewhere to the left of the one who only drinks water\nThe one who only drinks water is somewhere to the left of Bob\nCarol is the person who has gray hair\nEric is the tea drinker\nThe person who has black hair is not in the sixth house\nThe person who uses a Samsung Galaxy S21 is directly left of the person who loves classical music\nThe person who uses a OnePlus 9 is not in the third house\nAlice is somewhere to the right of Carol\nThe person who loves jazz music is Alice\nThe person who loves jazz music is the boba tea drinker\nThere is one house between the person who uses a OnePlus 9 and Eric\nThe person who has brown hair is the person who loves hip-hop music\nThe person who loves pop music is not in the first house\nThe root beer lover is in the second house\nEric is the person who uses an iPhone 13\nThe person who has red hair is the person who uses an iPhone 13\nThe person who has red hair and the coffee drinker are next to each other\nPeter is in the first house\nArnold is somewhere to the right of the person who has auburn hair\nThe person who has gray hair is not in the second house\nThe person who loves country music is in the fifth house",
    "queries": "And( And(lives(Peter) == 1, uses_phone(Peter) == xiaomi_mi_11, has_hairColor(Peter) == auburn, drinks_favorite(Peter) == milk, loves_music(Peter) == rock), And(lives(Arnold) == 2, uses_phone(Arnold) == oneplus_9, has_hairColor(Arnold) == brown, drinks_favorite(Arnold) == root_beer, loves_music(Arnold) == hip_hop), And(lives(Carol) == 3, uses_phone(Carol) == samsung_galaxy_s21, has_hairColor(Carol) == gray, drinks_favorite(Carol) == water, loves_music(Carol) == pop), And(lives(Eric) == 4, uses_phone(Eric) == iphone_13, has_hairColor(Eric) == red, drinks_favorite(Eric) == tea, loves_music(Eric) == classical), And(lives(Bob) == 5, uses_phone(Bob) == google_pixel_6, has_hairColor(Bob) == black, drinks_favorite(Bob) == coffee, loves_music(Bob) == country), And(lives(Alice) == 6, uses_phone(Alice) == huawei_p50, has_hairColor(Alice) == blonde, drinks_favorite(Alice) == boba_tea, loves_music(Alice) == jazz) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-34",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Alice`, `Arnold`\n - Each person has a favorite color: `red`, `white`, `yellow`, `green`\n - Each person has a unique birthday month: `feb`, `sept`, `jan`, `april`\n - The mothers' names in different houses are unique: `Aniya`, `Janelle`, `Kailyn`, `Holly`\n - Everyone has a unique favorite cigar: `pall mall`, `prince`, `blue master`, `dunhill`\n - They all have a unique favorite flower: `lilies`, `daffodils`, `carnations`, `roses`\n\nClues:\n1. The person who loves yellow is directly left of The person whose mother's name is Kailyn.\n2. The person whose birthday is in September and Peter are next to each other.\n3. The person whose favorite color is red is not in the fourth house.\n4. The person who smokes Blue Master and Arnold are next to each other.\n5. The person whose mother's name is Holly is the Dunhill smoker.\n6. The person whose birthday is in January is the person who loves a bouquet of daffodils.\n7. There are two houses between the person who loves the boquet of lilies and the person whose birthday is in January.\n8. The person whose mother's name is Janelle is the person who loves a carnations arrangement.\n9. The person whose birthday is in September and the person whose favorite color is red are next to each other.\n10. The person whose birthday is in February is the person whose favorite color is green.\n11. The person whose favorite color is green is directly left of The person whose mother's name is Janelle.\n12. There is one house between the person whose birthday is in February and the person partial to Pall Mall.\n13. The person who smokes Blue Master is The person whose mother's name is Aniya.\n14. Eric is the person whose birthday is in February.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Birthday",
        "Mother",
        "Cigar",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "green",
          "feb",
          "Aniya",
          "blue master",
          "lilies"
        ],
        [
          "2",
          "Arnold",
          "yellow",
          "sept",
          "Janelle",
          "prince",
          "carnations"
        ],
        [
          "3",
          "Peter",
          "red",
          "april",
          "Kailyn",
          "pall mall",
          "roses"
        ],
        [
          "4",
          "Alice",
          "white",
          "jan",
          "Holly",
          "dunhill",
          "daffodils"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Alice, Arnold])\ncolors = EnumSort([red, white, yellow, green])\nmonths = EnumSort([feb, sept, jan, april])\nmothers = EnumSort([Aniya, Janelle, Kailyn, Holly])\ncigars = EnumSort([pall_mall, prince, blue_master, dunhill])\nflowers = EnumSort([lilies, daffodils, carnations, roses])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_month = Function([people] -> [months])\nhas_mother = Function([people] -> [mothers])\nhas_cigar = Function([people] -> [cigars])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves yellow is directly left of The person whose mother's name is Kailyn\nThe person whose birthday is in September and Peter are next to each other\nThe person whose favorite color is red is not in the fourth house\nThe person who smokes Blue Master and Arnold are next to each other\nThe person whose mother's name is Holly is the Dunhill smoker\nThe person whose birthday is in January is the person who loves a bouquet of daffodils\nThere are two houses between the person who loves the boquet of lilies and the person whose birthday is in January\nThe person whose mother's name is Janelle is the person who loves a carnations arrangement\nThe person whose birthday is in September and the person whose favorite color is red are next to each other\nThe person whose birthday is in February is the person whose favorite color is green\nThe person whose favorite color is green is directly left of The person whose mother's name is Janelle\nThere is one house between the person whose birthday is in February and the person partial to Pall Mall\nThe person who smokes Blue Master is The person whose mother's name is Aniya\nEric is the person whose birthday is in February",
    "queries": "And( And(lives(Eric) == 1, has_color(Eric) == green, has_month(Eric) == feb, has_mother(Eric) == Aniya, has_cigar(Eric) == blue_master, has_flower(Eric) == lilies), And(lives(Arnold) == 2, has_color(Arnold) == yellow, has_month(Arnold) == sept, has_mother(Arnold) == Janelle, has_cigar(Arnold) == prince, has_flower(Arnold) == carnations), And(lives(Peter) == 3, has_color(Peter) == red, has_month(Peter) == april, has_mother(Peter) == Kailyn, has_cigar(Peter) == pall_mall, has_flower(Peter) == roses), And(lives(Alice) == 4, has_color(Alice) == white, has_month(Alice) == jan, has_mother(Alice) == Holly, has_cigar(Alice) == dunhill, has_flower(Alice) == daffodils) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-28",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Peter`, `Bob`, `Arnold`\n - People have unique favorite sports: `soccer`, `baseball`, `swimming`, `tennis`, `basketball`\n - Each person lives in a unique style of house: `modern`, `victorian`, `colonial`, `craftsman`, `ranch`\n - Each person prefers a unique type of vacation: `beach`, `city`, `cruise`, `mountain`, `camping`\n - Each person has an occupation: `artist`, `engineer`, `lawyer`, `doctor`, `teacher`\n - The mothers' names in different houses are unique: `Penny`, `Aniya`, `Janelle`, `Holly`, `Kailyn`\n\nClues:\n1. There is one house between The person whose mother's name is Janelle and Eric.\n2. Arnold is not in the fifth house.\n3. The person whose mother's name is Janelle is Peter.\n4. The person who enjoys mountain retreats is The person whose mother's name is Holly.\n5. The person whose mother's name is Aniya is the person in a modern-style house.\n6. The person who likes going on cruises is The person whose mother's name is Kailyn.\n7. The person who prefers city breaks is the person living in a colonial-style house.\n8. The person who loves soccer is The person whose mother's name is Holly.\n9. The person who is an artist is Eric.\n10. The person who is a doctor is in the second house.\n11. The person who is a teacher is somewhere to the left of the person in a modern-style house.\n12. The person whose mother's name is Penny is not in the second house.\n13. The person in a ranch-style home is in the third house.\n14. The person who loves swimming is The person whose mother's name is Kailyn.\n15. Arnold is not in the third house.\n16. The person who loves swimming is in the fourth house.\n17. The person who loves baseball and the person who prefers city breaks are next to each other.\n18. The person who loves basketball is somewhere to the left of the person who loves soccer.\n19. Bob is somewhere to the left of the person in a modern-style house.\n20. The person who enjoys camping trips is in the fifth house.\n21. The person in a Craftsman-style house is the person who is an engineer.\n22. There are two houses between the person living in a colonial-style house and the person in a modern-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "HouseStyle",
        "Vacation",
        "Occupation",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "baseball",
          "craftsman",
          "beach",
          "engineer",
          "Penny"
        ],
        [
          "2",
          "Peter",
          "basketball",
          "colonial",
          "city",
          "doctor",
          "Janelle"
        ],
        [
          "3",
          "Bob",
          "soccer",
          "ranch",
          "mountain",
          "teacher",
          "Holly"
        ],
        [
          "4",
          "Eric",
          "swimming",
          "victorian",
          "cruise",
          "artist",
          "Kailyn"
        ],
        [
          "5",
          "Alice",
          "tennis",
          "modern",
          "camping",
          "lawyer",
          "Aniya"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Peter, Bob, Arnold])\nsports = EnumSort([soccer, baseball, swimming, tennis, basketball])\nhouseStyles = EnumSort([modern, victorian, colonial, craftsman, ranch])\nvacations = EnumSort([beach, city, cruise, mountain, camping])\noccupations = EnumSort([artist, engineer, lawyer, doctor, teacher])\nmothers = EnumSort([Penny, Aniya, Janelle, Holly, Kailyn])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_vacation = Function([people] -> [vacations])\nhas_occupation = Function([people] -> [occupations])\nhas_mother = Function([people] -> [mothers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There is one house between The person whose mother's name is Janelle and Eric\nArnold is not in the fifth house\nThe person whose mother's name is Janelle is Peter\nThe person who enjoys mountain retreats is The person whose mother's name is Holly\nThe person whose mother's name is Aniya is the person in a modern-style house\nThe person who likes going on cruises is The person whose mother's name is Kailyn\nThe person who prefers city breaks is the person living in a colonial-style house\nThe person who loves soccer is The person whose mother's name is Holly\nThe person who is an artist is Eric\nThe person who is a doctor is in the second house\nThe person who is a teacher is somewhere to the left of the person in a modern-style house\nThe person whose mother's name is Penny is not in the second house\nThe person in a ranch-style home is in the third house\nThe person who loves swimming is The person whose mother's name is Kailyn\nArnold is not in the third house\nThe person who loves swimming is in the fourth house\nThe person who loves baseball and the person who prefers city breaks are next to each other\nThe person who loves basketball is somewhere to the left of the person who loves soccer\nBob is somewhere to the left of the person in a modern-style house\nThe person who enjoys camping trips is in the fifth house\nThe person in a Craftsman-style house is the person who is an engineer\nThere are two houses between the person living in a colonial-style house and the person in a modern-style house",
    "queries": "And( And(lives(Arnold) == 1, has_sport(Arnold) == baseball, has_houseStyle(Arnold) == craftsman, has_vacation(Arnold) == beach, has_occupation(Arnold) == engineer, has_mother(Arnold) == Penny), And(lives(Peter) == 2, has_sport(Peter) == basketball, has_houseStyle(Peter) == colonial, has_vacation(Peter) == city, has_occupation(Peter) == doctor, has_mother(Peter) == Janelle), And(lives(Bob) == 3, has_sport(Bob) == soccer, has_houseStyle(Bob) == ranch, has_vacation(Bob) == mountain, has_occupation(Bob) == teacher, has_mother(Bob) == Holly), And(lives(Eric) == 4, has_sport(Eric) == swimming, has_houseStyle(Eric) == victorian, has_vacation(Eric) == cruise, has_occupation(Eric) == artist, has_mother(Eric) == Kailyn), And(lives(Alice) == 5, has_sport(Alice) == tennis, has_houseStyle(Alice) == modern, has_vacation(Alice) == camping, has_occupation(Alice) == lawyer, has_mother(Alice) == Aniya) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-39",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Peter`, `Eric`\n - People use unique phone models: `oneplus 9`, `google pixel 6`, `iphone 13`, `huawei p50`, `samsung galaxy s21`\n - Each person has a favorite color: `blue`, `red`, `yellow`, `green`, `white`\n - The mothers' names in different houses are unique: `Janelle`, `Penny`, `Holly`, `Aniya`, `Kailyn`\n - The people are of nationalities: `german`, `norwegian`, `swede`, `dane`, `brit`\n - Everyone has something unique for lunch: `spaghetti`, `grilled cheese`, `stew`, `pizza`, `stir fry`\n\nClues:\n1. The person who uses a OnePlus 9 and Arnold are next to each other.\n2. There are two houses between the person who uses a OnePlus 9 and The person whose mother's name is Kailyn.\n3. The person whose mother's name is Penny is somewhere to the left of the Swedish person.\n4. The person who loves yellow is the person who uses a Google Pixel 6.\n5. The person who loves eating grilled cheese is The person whose mother's name is Holly.\n6. Arnold is the person who loves the spaghetti eater.\n7. Bob is the person who uses a Huawei P50.\n8. The German is the person who is a pizza lover.\n9. Eric is directly left of the person who loves blue.\n10. Alice is The person whose mother's name is Holly.\n11. The person who loves stir fry is the British person.\n12. The person whose mother's name is Penny is not in the third house.\n13. Arnold is directly left of the person who uses a Huawei P50.\n14. The British person is somewhere to the left of the Dane.\n15. The person who uses a Google Pixel 6 is Arnold.\n16. The person whose mother's name is Aniya is the person who uses a Samsung Galaxy S21.\n17. The person who loves blue is the Norwegian.\n18. The person who loves white is the person who uses a Huawei P50.\n19. The person whose favorite color is red is directly left of the person who loves blue.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Color",
        "Mother",
        "Nationality",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "samsung galaxy s21",
          "red",
          "Aniya",
          "brit",
          "stir fry"
        ],
        [
          "2",
          "Alice",
          "oneplus 9",
          "blue",
          "Holly",
          "norwegian",
          "grilled cheese"
        ],
        [
          "3",
          "Arnold",
          "google pixel 6",
          "yellow",
          "Janelle",
          "dane",
          "spaghetti"
        ],
        [
          "4",
          "Bob",
          "huawei p50",
          "white",
          "Penny",
          "german",
          "pizza"
        ],
        [
          "5",
          "Peter",
          "iphone 13",
          "green",
          "Kailyn",
          "swede",
          "stew"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Peter, Eric])\nphoneModels = EnumSort([oneplus_9, google_pixel_6, iphone_13, huawei_p50, samsung_galaxy_s21])\ncolors = EnumSort([blue, red, yellow, green, white])\nmothersNames = EnumSort([Janelle, Penny, Holly, Aniya, Kailyn])\nnationalities = EnumSort([german, norwegian, swede, dane, brit])\nfoods = EnumSort([spaghetti, grilled_cheese, stew, pizza, stir_fry])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_color = Function([people] -> [colors])\nmother_name = Function([people] -> [mothersNames])\nhas_nationality = Function([people] -> [nationalities])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who uses a OnePlus 9 and Arnold are next to each other\nThere are two houses between the person who uses a OnePlus 9 and The person whose mother's name is Kailyn\nThe person whose mother's name is Penny is somewhere to the left of the Swedish person\nThe person who loves yellow is the person who uses a Google Pixel 6\nThe person who loves eating grilled cheese is The person whose mother's name is Holly\nArnold is the person who loves the spaghetti eater\nBob is the person who uses a Huawei P50\nThe German is the person who is a pizza lover\nEric is directly left of the person who loves blue\nAlice is The person whose mother's name is Holly\nThe person who loves stir fry is the British person\nThe person whose mother's name is Penny is not in the third house\nArnold is directly left of the person who uses a Huawei P50\nThe British person is somewhere to the left of the Dane\nThe person who uses a Google Pixel 6 is Arnold\nThe person whose mother's name is Aniya is the person who uses a Samsung Galaxy S21\nThe person who loves blue is the Norwegian\nThe person who loves white is the person who uses a Huawei P50\nThe person whose favorite color is red is directly left of the person who loves blue",
    "queries": "And( And( lives(Eric) == 1, uses_phone(Eric) == samsung_galaxy_s21, has_color(Eric) == red, mother_name(Eric) == Aniya, has_nationality(Eric) == brit, has_food(Eric) == stir_fry ), And( lives(Alice) == 2, uses_phone(Alice) == oneplus_9, has_color(Alice) == blue, mother_name(Alice) == Holly, has_nationality(Alice) == norwegian, has_food(Alice) == grilled_cheese ), And( lives(Arnold) == 3, uses_phone(Arnold) == google_pixel_6, has_color(Arnold) == yellow, mother_name(Arnold) == Janelle, has_nationality(Arnold) == dane, has_food(Arnold) == spaghetti ), And( lives(Bob) == 4, uses_phone(Bob) == huawei_p50, has_color(Bob) == white, mother_name(Bob) == Penny, has_nationality(Bob) == german, has_food(Bob) == pizza ), And( lives(Peter) == 5, uses_phone(Peter) == iphone_13, has_color(Peter) == green, mother_name(Peter) == Kailyn, has_nationality(Peter) == swede, has_food(Peter) == stew ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-22",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Peter`, `Carol`, `Bob`, `Eric`\n - Each person prefers a unique type of vacation: `mountain`, `beach`, `city`, `cruise`, `camping`, `cultural`\n - Everyone has a unique favorite cigar: `yellow monster`, `pall mall`, `prince`, `dunhill`, `blue master`, `blends`\n - People have unique favorite sports: `swimming`, `soccer`, `tennis`, `basketball`, `volleyball`, `baseball`\n\nClues:\n1. Arnold is the person who prefers city breaks.\n2. There is one house between the person who loves volleyball and the person who loves swimming.\n3. Alice is in the fourth house.\n4. The person who likes going on cruises is the person who smokes many unique blends.\n5. The person who enjoys camping trips is somewhere to the left of Eric.\n6. The person who loves volleyball is the person who smokes many unique blends.\n7. Arnold is the Prince smoker.\n8. The person who loves baseball is Peter.\n9. The Prince smoker and the person partial to Pall Mall are next to each other.\n10. The person who loves beach vacations is in the sixth house.\n11. Carol is the person who loves beach vacations.\n12. Carol is the person who smokes Yellow Monster.\n13. The person who loves tennis is somewhere to the right of the person who goes on cultural tours.\n14. The person who goes on cultural tours is the person who smokes Blue Master.\n15. The person who loves basketball is directly left of the person who smokes many unique blends.\n16. The person who loves volleyball and Eric are next to each other.\n17. The person who loves tennis is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Cigar",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "cultural",
          "blue master",
          "baseball"
        ],
        [
          "2",
          "Arnold",
          "city",
          "prince",
          "tennis"
        ],
        [
          "3",
          "Bob",
          "camping",
          "pall mall",
          "basketball"
        ],
        [
          "4",
          "Alice",
          "cruise",
          "blends",
          "volleyball"
        ],
        [
          "5",
          "Eric",
          "mountain",
          "dunhill",
          "soccer"
        ],
        [
          "6",
          "Carol",
          "beach",
          "yellow monster",
          "swimming"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Peter, Carol, Bob, Eric])\nvacations = EnumSort([mountain, beach, city, cruise, camping, cultural])\ncigars = EnumSort([yellow_monster, pall_mall, prince, dunhill, blue_master, blends])\nsports = EnumSort([swimming, soccer, tennis, basketball, volleyball, baseball])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nsmokes_cigar = Function([people] -> [cigars])\nloves_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is the person who prefers city breaks\nThere is one house between the person who loves volleyball and the person who loves swimming\nAlice is in the fourth house\nThe person who likes going on cruises is the person who smokes many unique blends\nThe person who enjoys camping trips is somewhere to the left of Eric\nThe person who loves volleyball is the person who smokes many unique blends\nArnold is the Prince smoker\nThe person who loves baseball is Peter\nThe Prince smoker and the person partial to Pall Mall are next to each other\nThe person who loves beach vacations is in the sixth house\nCarol is the person who loves beach vacations\nCarol is the person who smokes Yellow Monster\nThe person who loves tennis is somewhere to the right of the person who goes on cultural tours\nThe person who goes on cultural tours is the person who smokes Blue Master\nThe person who loves basketball is directly left of the person who smokes many unique blends\nThe person who loves volleyball and Eric are next to each other\nThe person who loves tennis is Arnold",
    "queries": "And( And(lives(Peter) == 1, prefers_vacation(Peter) == cultural, smokes_cigar(Peter) == blue_master, loves_sport(Peter) == baseball), And(lives(Arnold) == 2, prefers_vacation(Arnold) == city, smokes_cigar(Arnold) == prince, loves_sport(Arnold) == tennis), And(lives(Bob) == 3, prefers_vacation(Bob) == camping, smokes_cigar(Bob) == pall_mall, loves_sport(Bob) == basketball), And(lives(Alice) == 4, prefers_vacation(Alice) == cruise, smokes_cigar(Alice) == blends, loves_sport(Alice) == volleyball), And(lives(Eric) == 5, prefers_vacation(Eric) == mountain, smokes_cigar(Eric) == dunhill, loves_sport(Eric) == soccer), And(lives(Carol) == 6, prefers_vacation(Carol) == beach, smokes_cigar(Carol) == yellow_monster, loves_sport(Carol) == swimming) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-0",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Carol`, `Peter`, `Bob`\n - Each person has a unique level of education: `high school`, `trade school`, `bachelor`, `doctorate`, `master`, `associate`\n - Each person has a favorite color: `purple`, `blue`, `white`, `red`, `green`, `yellow`\n - Each person prefers a unique type of vacation: `cultural`, `cruise`, `beach`, `mountain`, `camping`, `city`\n - People have unique favorite book genres: `science fiction`, `biography`, `historical fiction`, `fantasy`, `romance`, `mystery`\n\nClues:\n1. Alice is the person with a master's degree.\n2. There is one house between the person with an associate's degree and Peter.\n3. The person who loves historical fiction books is somewhere to the left of the person who loves biography books.\n4. The person who loves historical fiction books is the person with a high school diploma.\n5. Bob is the person with a bachelor's degree.\n6. Carol is somewhere to the right of Eric.\n7. The person with a master's degree is somewhere to the right of the person who enjoys camping trips.\n8. The person who loves science fiction books is somewhere to the left of the person who loves yellow.\n9. The person who loves historical fiction books is somewhere to the left of the person whose favorite color is green.\n10. The person with a high school diploma is not in the second house.\n11. The person who loves beach vacations is the person with a doctorate.\n12. The person who loves mystery books is somewhere to the left of the person with a bachelor's degree.\n13. The person with a doctorate is in the first house.\n14. The person with a high school diploma is directly left of the person who enjoys camping trips.\n15. The person who loves romance books is not in the third house.\n16. There is one house between the person who loves purple and the person with a bachelor's degree.\n17. The person who loves biography books is the person whose favorite color is red.\n18. There is one house between the person who loves fantasy books and the person who loves blue.\n19. The person who goes on cultural tours is the person who loves blue.\n20. Carol is not in the fifth house.\n21. The person who loves purple is the person with a doctorate.\n22. The person who enjoys mountain retreats is somewhere to the right of the person who loves science fiction books.\n23. The person who prefers city breaks is the person whose favorite color is green.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Color",
        "Vacation",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "doctorate",
          "purple",
          "beach",
          "fantasy"
        ],
        [
          "2",
          "Carol",
          "associate",
          "white",
          "cruise",
          "mystery"
        ],
        [
          "3",
          "Bob",
          "bachelor",
          "blue",
          "cultural",
          "science fiction"
        ],
        [
          "4",
          "Peter",
          "high school",
          "yellow",
          "mountain",
          "historical fiction"
        ],
        [
          "5",
          "Arnold",
          "trade school",
          "red",
          "camping",
          "biography"
        ],
        [
          "6",
          "Alice",
          "master",
          "green",
          "city",
          "romance"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Carol, Peter, Bob])\neducationLevels = EnumSort([high_school, trade_school, bachelor, doctorate, master, associate])\ncolors = EnumSort([purple, blue, white, red, green, yellow])\nvacations = EnumSort([cultural, cruise, beach, mountain, camping, city])\nbookGenres = EnumSort([science_fiction, biography, historical_fiction, fantasy, romance, mystery])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_color = Function([people] -> [colors])\nhas_vacation = Function([people] -> [vacations])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is the person with a master's degree\nThere is one house between the person with an associate's degree and Peter\nThe person who loves historical fiction books is somewhere to the left of the person who loves biography books\nThe person who loves historical fiction books is the person with a high school diploma\nBob is the person with a bachelor's degree\nCarol is somewhere to the right of Eric\nThe person with a master's degree is somewhere to the right of the person who enjoys camping trips\nThe person who loves science fiction books is somewhere to the left of the person who loves yellow\nThe person who loves historical fiction books is somewhere to the left of the person whose favorite color is green\nThe person with a high school diploma is not in the second house\nThe person who loves beach vacations is the person with a doctorate\nThe person who loves mystery books is somewhere to the left of the person with a bachelor's degree\nThe person with a doctorate is in the first house\nThe person with a high school diploma is directly left of the person who enjoys camping trips\nThe person who loves romance books is not in the third house\nThere is one house between the person who loves purple and the person with a bachelor's degree\nThe person who loves biography books is the person whose favorite color is red\nThere is one house between the person who loves fantasy books and the person who loves blue\nThe person who goes on cultural tours is the person who loves blue\nCarol is not in the fifth house\nThe person who loves purple is the person with a doctorate\nThe person who enjoys mountain retreats is somewhere to the right of the person who loves science fiction books\nThe person who prefers city breaks is the person whose favorite color is green",
    "queries": "And( And(lives(Eric) == 1, has_education(Eric) == doctorate, has_color(Eric) == purple, has_vacation(Eric) == beach, has_bookGenre(Eric) == fantasy), And(lives(Carol) == 2, has_education(Carol) == associate, has_color(Carol) == white, has_vacation(Carol) == cruise, has_bookGenre(Carol) == mystery), And(lives(Bob) == 3, has_education(Bob) == bachelor, has_color(Bob) == blue, has_vacation(Bob) == cultural, has_bookGenre(Bob) == science_fiction), And(lives(Peter) == 4, has_education(Peter) == high_school, has_color(Peter) == yellow, has_vacation(Peter) == mountain, has_bookGenre(Peter) == historical_fiction), And(lives(Arnold) == 5, has_education(Arnold) == trade_school, has_color(Arnold) == red, has_vacation(Arnold) == camping, has_bookGenre(Arnold) == biography), And(lives(Alice) == 6, has_education(Alice) == master, has_color(Alice) == green, has_vacation(Alice) == city, has_bookGenre(Alice) == romance) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-22",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Carol`, `Alice`, `Bob`\n - People have unique favorite music genres: `country`, `classical`, `pop`, `hip hop`, `jazz`, `rock`\n - Each person lives in a unique style of house: `modern`, `mediterranean`, `victorian`, `craftsman`, `ranch`, `colonial`\n - People use unique phone models: `huawei p50`, `iphone 13`, `google pixel 6`, `oneplus 9`, `xiaomi mi 11`, `samsung galaxy s21`\n - Each person has a unique type of pet: `hamster`, `dog`, `cat`, `rabbit`, `fish`, `bird`\n\nClues:\n1. The person who has a cat is the person in a Mediterranean-style villa.\n2. Peter is in the second house.\n3. The person in a modern-style house is the person who uses a Samsung Galaxy S21.\n4. The person who keeps a pet bird is the person who uses a Google Pixel 6.\n5. The person who keeps a pet bird is directly left of the person who uses a Xiaomi Mi 11.\n6. Arnold is the person residing in a Victorian house.\n7. The person who loves rock music is the person living in a colonial-style house.\n8. The person in a Craftsman-style house is Carol.\n9. The person who owns a rabbit is in the sixth house.\n10. The person who loves pop music is somewhere to the left of the person living in a colonial-style house.\n11. The person who uses a Huawei P50 and the person who loves country music are next to each other.\n12. The person who loves hip-hop music is the person who uses a Samsung Galaxy S21.\n13. Carol and Peter are next to each other.\n14. The person who uses a OnePlus 9 is Peter.\n15. The person with a pet hamster is not in the first house.\n16. The person in a ranch-style home is somewhere to the left of the person who loves classical music.\n17. There are two houses between Carol and Alice.\n18. The person who owns a dog is in the fifth house.\n19. The person in a modern-style house is Eric.\n20. Peter is the person living in a colonial-style house.\n21. The person who has a cat is not in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "HouseStyle",
        "PhoneModel",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "pop",
          "craftsman",
          "iphone 13",
          "fish"
        ],
        [
          "2",
          "Peter",
          "rock",
          "colonial",
          "oneplus 9",
          "hamster"
        ],
        [
          "3",
          "Bob",
          "jazz",
          "mediterranean",
          "huawei p50",
          "cat"
        ],
        [
          "4",
          "Alice",
          "country",
          "ranch",
          "google pixel 6",
          "bird"
        ],
        [
          "5",
          "Arnold",
          "classical",
          "victorian",
          "xiaomi mi 11",
          "dog"
        ],
        [
          "6",
          "Eric",
          "hip hop",
          "modern",
          "samsung galaxy s21",
          "rabbit"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Carol, Alice, Bob])\nmusicGenres = EnumSort([country, classical, pop, hip_hop, jazz, rock])\nhouseStyles = EnumSort([modern, mediterranean, victorian, craftsman, ranch, colonial])\nphoneModels = EnumSort([huawei_p50, iphone_13, google_pixel_6, oneplus_9, xiaomi_mi_11, samsung_galaxy_s21])\npets = EnumSort([hamster, dog, cat, rabbit, fish, bird])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_houseStyle = Function([people] -> [houseStyles])\nuses_phone = Function([people] -> [phoneModels])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who has a cat is the person in a Mediterranean-style villa\nPeter is in the second house\nThe person in a modern-style house is the person who uses a Samsung Galaxy S21\nThe person who keeps a pet bird is the person who uses a Google Pixel 6\nThe person who keeps a pet bird is directly left of the person who uses a Xiaomi Mi 11\nArnold is the person residing in a Victorian house\nThe person who loves rock music is the person living in a colonial-style house\nThe person in a Craftsman-style house is Carol\nThe person who owns a rabbit is in the sixth house\nThe person who loves pop music is somewhere to the left of the person living in a colonial-style house\nThe person who uses a Huawei P50 and the person who loves country music are next to each other\nThe person who loves hip-hop music is the person who uses a Samsung Galaxy S21\nCarol and Peter are next to each other\nThe person who uses a OnePlus 9 is Peter\nThe person with a pet hamster is not in the first house\nThe person in a ranch-style home is somewhere to the left of the person who loves classical music\nThere are two houses between Carol and Alice\nThe person who owns a dog is in the fifth house\nThe person in a modern-style house is Eric\nPeter is the person living in a colonial-style house\nThe person who has a cat is not in the fourth house",
    "queries": "And( And(lives(Carol) == 1, has_musicGenre(Carol) == pop, has_houseStyle(Carol) == craftsman, uses_phone(Carol) == iphone_13, has_pet(Carol) == fish), And(lives(Peter) == 2, has_musicGenre(Peter) == rock, has_houseStyle(Peter) == colonial, uses_phone(Peter) == oneplus_9, has_pet(Peter) == hamster), And(lives(Bob) == 3, has_musicGenre(Bob) == jazz, has_houseStyle(Bob) == mediterranean, uses_phone(Bob) == huawei_p50, has_pet(Bob) == cat), And(lives(Alice) == 4, has_musicGenre(Alice) == country, has_houseStyle(Alice) == ranch, uses_phone(Alice) == google_pixel_6, has_pet(Alice) == bird), And(lives(Arnold) == 5, has_musicGenre(Arnold) == classical, has_houseStyle(Arnold) == victorian, uses_phone(Arnold) == xiaomi_mi_11, has_pet(Arnold) == dog), And(lives(Eric) == 6, has_musicGenre(Eric) == hip_hop, has_houseStyle(Eric) == modern, uses_phone(Eric) == samsung_galaxy_s21, has_pet(Eric) == rabbit) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-7",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Arnold`, `Bob`, `Peter`\n - They all have a unique favorite flower: `lilies`, `roses`, `carnations`, `tulips`, `daffodils`\n - Each person has a unique birthday month: `sept`, `april`, `feb`, `mar`, `jan`\n - Everyone has something unique for lunch: `pizza`, `grilled cheese`, `spaghetti`, `stir fry`, `stew`\n - Each person lives in a unique style of house: `colonial`, `craftsman`, `victorian`, `ranch`, `modern`\n\nClues:\n1. The person whose birthday is in September is the person who loves the spaghetti eater.\n2. The person whose birthday is in February is Alice.\n3. The person in a Craftsman-style house is Eric.\n4. The person who loves the stew is the person in a modern-style house.\n5. The person who loves the vase of tulips is somewhere to the left of the person who is a pizza lover.\n6. The person who loves the stew is in the fourth house.\n7. The person whose birthday is in March is in the third house.\n8. The person whose birthday is in September is in the first house.\n9. The person who loves the boquet of lilies is the person whose birthday is in February.\n10. The person residing in a Victorian house is directly left of the person who is a pizza lover.\n11. The person whose birthday is in January is the person who loves a carnations arrangement.\n12. The person who loves eating grilled cheese is directly left of the person who loves the stew.\n13. The person living in a colonial-style house is the person whose birthday is in March.\n14. The person who is a pizza lover is somewhere to the left of Arnold.\n15. There is one house between the person who loves the rose bouquet and the person whose birthday is in April.\n16. The person in a modern-style house is Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Birthday",
        "Food",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "tulips",
          "sept",
          "spaghetti",
          "victorian"
        ],
        [
          "2",
          "Alice",
          "lilies",
          "feb",
          "pizza",
          "ranch"
        ],
        [
          "3",
          "Arnold",
          "roses",
          "mar",
          "grilled cheese",
          "colonial"
        ],
        [
          "4",
          "Peter",
          "carnations",
          "jan",
          "stew",
          "modern"
        ],
        [
          "5",
          "Eric",
          "daffodils",
          "april",
          "stir fry",
          "craftsman"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Arnold, Bob, Peter])\nflowers = EnumSort([lilies, roses, carnations, tulips, daffodils])\nmonths = EnumSort([sept, april, feb, mar, jan])\nfoods = EnumSort([pizza, grilled_cheese, spaghetti, stir_fry, stew])\nhouseStyles = EnumSort([colonial, craftsman, victorian, ranch, modern])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_month = Function([people] -> [months])\nhas_food = Function([people] -> [foods])\nhas_houseStyle = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose birthday is in September is the person who loves the spaghetti eater\nThe person whose birthday is in February is Alice\nThe person in a Craftsman-style house is Eric\nThe person who loves the stew is the person in a modern-style house\nThe person who loves the vase of tulips is somewhere to the left of the person who is a pizza lover\nThe person who loves the stew is in the fourth house\nThe person whose birthday is in March is in the third house\nThe person whose birthday is in September is in the first house\nThe person who loves the boquet of lilies is the person whose birthday is in February\nThe person residing in a Victorian house is directly left of the person who is a pizza lover\nThe person whose birthday is in January is the person who loves a carnations arrangement\nThe person who loves eating grilled cheese is directly left of the person who loves the stew\nThe person living in a colonial-style house is the person whose birthday is in March\nThe person who is a pizza lover is somewhere to the left of Arnold\nThere is one house between the person who loves the rose bouquet and the person whose birthday is in April\nThe person in a modern-style house is Peter",
    "queries": "And( And(lives(Bob) == 1, has_flower(Bob) == tulips, has_month(Bob) == sept, has_food(Bob) == spaghetti, has_houseStyle(Bob) == victorian), And(lives(Alice) == 2, has_flower(Alice) == lilies, has_month(Alice) == feb, has_food(Alice) == pizza, has_houseStyle(Alice) == ranch), And(lives(Arnold) == 3, has_flower(Arnold) == roses, has_month(Arnold) == mar, has_food(Arnold) == grilled_cheese, has_houseStyle(Arnold) == colonial), And(lives(Peter) == 4, has_flower(Peter) == carnations, has_month(Peter) == jan, has_food(Peter) == stew, has_houseStyle(Peter) == modern), And(lives(Eric) == 5, has_flower(Eric) == daffodils, has_month(Eric) == april, has_food(Eric) == stir_fry, has_houseStyle(Eric) == craftsman) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-24",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Arnold`, `Alice`, `Eric`\n - Everyone has a unique favorite cigar: `blue master`, `dunhill`, `prince`, `blends`, `pall mall`\n - People have unique favorite music genres: `rock`, `classical`, `hip hop`, `pop`, `jazz`\n - Each person has a unique birthday month: `feb`, `april`, `sept`, `jan`, `mar`\n - People have unique favorite book genres: `romance`, `science fiction`, `mystery`, `biography`, `fantasy`\n\nClues:\n1. The person who loves pop music is the person who loves romance books.\n2. The person who loves fantasy books is in the second house.\n3. The person who smokes Blue Master is the person who loves science fiction books.\n4. The person who loves hip-hop music is the person whose birthday is in September.\n5. The person who loves biography books is Arnold.\n6. Alice is the person who loves science fiction books.\n7. The person who loves jazz music is somewhere to the left of Eric.\n8. The person who smokes Blue Master is the person whose birthday is in April.\n9. The person who smokes many unique blends is not in the third house.\n10. The Dunhill smoker is the person whose birthday is in February.\n11. The person who loves science fiction books is in the fifth house.\n12. The person who loves classical music is Bob.\n13. The person who loves pop music is Eric.\n14. The person who loves mystery books is the person partial to Pall Mall.\n15. Peter is the person whose birthday is in February.\n16. The person whose birthday is in March is the person who smokes many unique blends.\n17. The person who loves classical music is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "MusicGenre",
        "Birthday",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "prince",
          "hip hop",
          "sept",
          "biography"
        ],
        [
          "2",
          "Peter",
          "dunhill",
          "jazz",
          "feb",
          "fantasy"
        ],
        [
          "3",
          "Bob",
          "pall mall",
          "classical",
          "jan",
          "mystery"
        ],
        [
          "4",
          "Eric",
          "blends",
          "pop",
          "mar",
          "romance"
        ],
        [
          "5",
          "Alice",
          "blue master",
          "rock",
          "april",
          "science fiction"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Arnold, Alice, Eric])\ncigars = EnumSort([blue_master, dunhill, prince, blends, pall_mall])\nmusicGenres = EnumSort([rock, classical, hip_hop, pop, jazz])\nmonths = EnumSort([feb, april, sept, jan, mar])\nbookGenres = EnumSort([romance, science_fiction, mystery, biography, fantasy])\nlives = Function([people] -> [int])\nhas_cigar = Function([people] -> [cigars])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_month = Function([people] -> [months])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves pop music is the person who loves romance books\nThe person who loves fantasy books is in the second house\nThe person who smokes Blue Master is the person who loves science fiction books\nThe person who loves hip-hop music is the person whose birthday is in September\nThe person who loves biography books is Arnold\nAlice is the person who loves science fiction books\nThe person who loves jazz music is somewhere to the left of Eric\nThe person who smokes Blue Master is the person whose birthday is in April\nThe person who smokes many unique blends is not in the third house\nThe Dunhill smoker is the person whose birthday is in February\nThe person who loves science fiction books is in the fifth house\nThe person who loves classical music is Bob\nThe person who loves pop music is Eric\nThe person who loves mystery books is the person partial to Pall Mall\nPeter is the person whose birthday is in February\nThe person whose birthday is in March is the person who smokes many unique blends\nThe person who loves classical music is not in the first house",
    "queries": "And( And(lives(Arnold) == 1, has_cigar(Arnold) == prince, has_musicGenre(Arnold) == hip_hop, has_month(Arnold) == sept, has_bookGenre(Arnold) == biography), And(lives(Peter) == 2, has_cigar(Peter) == dunhill, has_musicGenre(Peter) == jazz, has_month(Peter) == feb, has_bookGenre(Peter) == fantasy), And(lives(Bob) == 3, has_cigar(Bob) == pall_mall, has_musicGenre(Bob) == classical, has_month(Bob) == jan, has_bookGenre(Bob) == mystery), And(lives(Eric) == 4, has_cigar(Eric) == blends, has_musicGenre(Eric) == pop, has_month(Eric) == mar, has_bookGenre(Eric) == romance), And(lives(Alice) == 5, has_cigar(Alice) == blue_master, has_musicGenre(Alice) == rock, has_month(Alice) == april, has_bookGenre(Alice) == science_fiction) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-1",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Carol`, `Eric`, `Alice`, `Arnold`\n - Each person has a unique favorite drink: `coffee`, `milk`, `water`, `root beer`, `tea`, `boba tea`\n - They all have a unique favorite flower: `tulips`, `lilies`, `daffodils`, `iris`, `roses`, `carnations`\n - Each person has an occupation: `doctor`, `artist`, `nurse`, `engineer`, `teacher`, `lawyer`\n - Each person has a unique hobby: `woodworking`, `photography`, `cooking`, `painting`, `knitting`, `gardening`\n\nClues:\n1. Alice is somewhere to the right of the person who loves cooking.\n2. Peter is not in the second house.\n3. The person who loves the rose bouquet is directly left of the person who likes milk.\n4. Bob is the person who is a lawyer.\n5. The person who loves a carnations arrangement is somewhere to the right of Bob.\n6. The person who enjoys knitting is somewhere to the left of the coffee drinker.\n7. The person who is a nurse is directly left of the person who is a doctor.\n8. Eric is the photography enthusiast.\n9. The person who loves the boquet of lilies is the woodworking hobbyist.\n10. The person who paints as a hobby is in the first house.\n11. The person who loves a carnations arrangement is the root beer lover.\n12. The person who is an artist is the person who likes milk.\n13. The person who loves a bouquet of daffodils is in the first house.\n14. The photography enthusiast is somewhere to the right of the boba tea drinker.\n15. The person who loves the rose bouquet is somewhere to the right of the person who is a doctor.\n16. The tea drinker is the person who is an engineer.\n17. Arnold is directly left of Carol.\n18. The coffee drinker is the person who is a nurse.\n19. The person who loves the vase of tulips is the person who loves cooking.\n20. The person who is a teacher is somewhere to the right of the root beer lover.\n21. The person who enjoys gardening is Carol.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Flower",
        "Occupation",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "tea",
          "daffodils",
          "engineer",
          "painting"
        ],
        [
          "2",
          "Bob",
          "boba tea",
          "iris",
          "lawyer",
          "knitting"
        ],
        [
          "3",
          "Arnold",
          "coffee",
          "tulips",
          "nurse",
          "cooking"
        ],
        [
          "4",
          "Carol",
          "root beer",
          "carnations",
          "doctor",
          "gardening"
        ],
        [
          "5",
          "Eric",
          "water",
          "roses",
          "teacher",
          "photography"
        ],
        [
          "6",
          "Alice",
          "milk",
          "lilies",
          "artist",
          "woodworking"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Carol, Eric, Alice, Arnold])\ndrinks = EnumSort([coffee, milk, water, root_beer, tea, boba_tea])\nflowers = EnumSort([tulips, lilies, daffodils, iris, roses, carnations])\noccupations = EnumSort([doctor, artist, nurse, engineer, teacher, lawyer])\nhobbies = EnumSort([woodworking, photography, cooking, painting, knitting, gardening])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_flower = Function([people] -> [flowers])\nhas_occupation = Function([people] -> [occupations])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is somewhere to the right of the person who loves cooking\nPeter is not in the second house\nThe person who loves the rose bouquet is directly left of the person who likes milk\nBob is the person who is a lawyer\nThe person who loves a carnations arrangement is somewhere to the right of Bob\nThe person who enjoys knitting is somewhere to the left of the coffee drinker\nThe person who is a nurse is directly left of the person who is a doctor\nEric is the photography enthusiast\nThe person who loves the boquet of lilies is the woodworking hobbyist\nThe person who paints as a hobby is in the first house\nThe person who loves a carnations arrangement is the root beer lover\nThe person who is an artist is the person who likes milk\nThe person who loves a bouquet of daffodils is in the first house\nThe photography enthusiast is somewhere to the right of the boba tea drinker\nThe person who loves the rose bouquet is somewhere to the right of the person who is a doctor\nThe tea drinker is the person who is an engineer\nArnold is directly left of Carol\nThe coffee drinker is the person who is a nurse\nThe person who loves the vase of tulips is the person who loves cooking\nThe person who is a teacher is somewhere to the right of the root beer lover\nThe person who enjoys gardening is Carol",
    "queries": "And( And(lives(Peter) == 1, has_drink(Peter) == tea, has_flower(Peter) == daffodils, has_occupation(Peter) == engineer, has_hobby(Peter) == painting), And(lives(Bob) == 2, has_drink(Bob) == boba_tea, has_flower(Bob) == iris, has_occupation(Bob) == lawyer, has_hobby(Bob) == knitting), And(lives(Arnold) == 3, has_drink(Arnold) == coffee, has_flower(Arnold) == tulips, has_occupation(Arnold) == nurse, has_hobby(Arnold) == cooking), And(lives(Carol) == 4, has_drink(Carol) == root_beer, has_flower(Carol) == carnations, has_occupation(Carol) == doctor, has_hobby(Carol) == gardening), And(lives(Eric) == 5, has_drink(Eric) == water, has_flower(Eric) == roses, has_occupation(Eric) == teacher, has_hobby(Eric) == photography), And(lives(Alice) == 6, has_drink(Alice) == milk, has_flower(Alice) == lilies, has_occupation(Alice) == artist, has_hobby(Alice) == woodworking) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-20",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Bob`, `Eric`, `Arnold`\n - They all have a unique favorite flower: `tulips`, `daffodils`, `lilies`, `roses`, `carnations`\n - Each mother is accompanied by their child: `Fred`, `Bella`, `Timothy`, `Meredith`, `Samantha`\n - Each person has a unique level of education: `high school`, `bachelor`, `doctorate`, `master`, `associate`\n - The people keep unique animals: `cat`, `fish`, `dog`, `horse`, `bird`\n\nClues:\n1. Peter is somewhere to the right of the dog owner.\n2. There is one house between the person who loves a carnations arrangement and the person with a bachelor's degree.\n3. There is one house between the person with a doctorate and the cat lover.\n4. The person with an associate's degree is directly left of the person who loves the vase of tulips.\n5. There is one house between the cat lover and the person who keeps horses.\n6. The person's child is named Fred is somewhere to the left of the person with a bachelor's degree.\n7. The person's child is named Meredith is not in the third house.\n8. The person with a master's degree is the person's child is named Bella.\n9. The person with a bachelor's degree is Bob.\n10. The person who is the mother of Timothy is the person who loves a bouquet of daffodils.\n11. The person's child is named Samantha is Bob.\n12. Arnold is directly left of Peter.\n13. The bird keeper is directly left of the person who loves a bouquet of daffodils.\n14. The person who loves the rose bouquet is the bird keeper.\n15. There is one house between the dog owner and the fish enthusiast.\n16. The person who loves the vase of tulips is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Children",
        "Education",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "roses",
          "Meredith",
          "doctorate",
          "bird"
        ],
        [
          "2",
          "Arnold",
          "daffodils",
          "Timothy",
          "high school",
          "dog"
        ],
        [
          "3",
          "Peter",
          "carnations",
          "Fred",
          "associate",
          "cat"
        ],
        [
          "4",
          "Eric",
          "tulips",
          "Bella",
          "master",
          "fish"
        ],
        [
          "5",
          "Bob",
          "lilies",
          "Samantha",
          "bachelor",
          "horse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Bob, Eric, Arnold])\nflowers = EnumSort([tulips, daffodils, lilies, roses, carnations])\nchildren = EnumSort([Fred, Bella, Timothy, Meredith, Samantha])\neducationLevels = EnumSort([high_school, bachelor, doctorate, master, associate])\nanimals = EnumSort([cat, fish, dog, horse, bird])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_child = Function([people] -> [children])\nhas_education = Function([people] -> [educationLevels])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Peter is somewhere to the right of the dog owner\nThere is one house between the person who loves a carnations arrangement and the person with a bachelor's degree\nThere is one house between the person with a doctorate and the cat lover\nThe person with an associate's degree is directly left of the person who loves the vase of tulips\nThere is one house between the cat lover and the person who keeps horses\nThe person's child is named Fred is somewhere to the left of the person with a bachelor's degree\nThe person's child is named Meredith is not in the third house\nThe person with a master's degree is the person's child is named Bella\nThe person with a bachelor's degree is Bob\nThe person who is the mother of Timothy is the person who loves a bouquet of daffodils\nThe person's child is named Samantha is Bob\nArnold is directly left of Peter\nThe bird keeper is directly left of the person who loves a bouquet of daffodils\nThe person who loves the rose bouquet is the bird keeper\nThere is one house between the dog owner and the fish enthusiast\nThe person who loves the vase of tulips is Eric",
    "queries": "And( And(lives(Alice) == 1, has_flower(Alice) == roses, has_child(Alice) == Meredith, has_education(Alice) == doctorate, has_animal(Alice) == bird), And(lives(Arnold) == 2, has_flower(Arnold) == daffodils, has_child(Arnold) == Timothy, has_education(Arnold) == high_school, has_animal(Arnold) == dog), And(lives(Peter) == 3, has_flower(Peter) == carnations, has_child(Peter) == Fred, has_education(Peter) == associate, has_animal(Peter) == cat), And(lives(Eric) == 4, has_flower(Eric) == tulips, has_child(Eric) == Bella, has_education(Eric) == master, has_animal(Eric) == fish), And(lives(Bob) == 5, has_flower(Bob) == lilies, has_child(Bob) == Samantha, has_education(Bob) == bachelor, has_animal(Bob) == horse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-17",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Alice`\n - Each person lives in a unique style of house: `victorian`, `ranch`, `colonial`, `craftsman`\n - Each person has an occupation: `teacher`, `engineer`, `doctor`, `artist`\n - Everyone has a unique favorite cigar: `prince`, `dunhill`, `pall mall`, `blue master`\n - People have unique favorite music genres: `pop`, `rock`, `classical`, `jazz`\n - People have unique heights: `very short`, `tall`, `average`, `short`\n\nClues:\n1. The person who loves classical music is the person living in a colonial-style house.\n2. The person who smokes Blue Master is the person in a ranch-style home.\n3. The person who loves rock music is the person who smokes Blue Master.\n4. The Dunhill smoker is directly left of Peter.\n5. Eric is in the first house.\n6. The person residing in a Victorian house is in the third house.\n7. The person who loves rock music and the person who loves classical music are next to each other.\n8. The person who is a teacher is the person who is short.\n9. The person who loves classical music is the Prince smoker.\n10. The person who is a doctor is somewhere to the left of the person who is very short.\n11. Arnold is the person who is an artist.\n12. The person who smokes Blue Master is in the first house.\n13. The person who is tall is directly left of the person who loves pop music.\n14. The person residing in a Victorian house is the person who is a teacher.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Occupation",
        "Cigar",
        "MusicGenre",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "ranch",
          "doctor",
          "blue master",
          "rock",
          "average"
        ],
        [
          "2",
          "Arnold",
          "colonial",
          "artist",
          "prince",
          "classical",
          "tall"
        ],
        [
          "3",
          "Alice",
          "victorian",
          "teacher",
          "dunhill",
          "pop",
          "short"
        ],
        [
          "4",
          "Peter",
          "craftsman",
          "engineer",
          "pall mall",
          "jazz",
          "very short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Alice])\nhouseStyles = EnumSort([victorian, ranch, colonial, craftsman])\noccupations = EnumSort([teacher, engineer, doctor, artist])\ncigars = EnumSort([prince, dunhill, pall_mall, blue_master])\nmusicGenres = EnumSort([pop, rock, classical, jazz])\nheights = EnumSort([very_short, tall, average, short])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_occupation = Function([people] -> [occupations])\nhas_cigar = Function([people] -> [cigars])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves classical music is the person living in a colonial-style house\nThe person who smokes Blue Master is the person in a ranch-style home\nThe person who loves rock music is the person who smokes Blue Master\nThe Dunhill smoker is directly left of Peter\nEric is in the first house\nThe person residing in a Victorian house is in the third house\nThe person who loves rock music and the person who loves classical music are next to each other\nThe person who is a teacher is the person who is short\nThe person who loves classical music is the Prince smoker\nThe person who is a doctor is somewhere to the left of the person who is very short\nArnold is the person who is an artist\nThe person who smokes Blue Master is in the first house\nThe person who is tall is directly left of the person who loves pop music\nThe person residing in a Victorian house is the person who is a teacher",
    "queries": "And( And(lives(Eric) == 1, has_houseStyle(Eric) == ranch, has_occupation(Eric) == doctor, has_cigar(Eric) == blue_master, has_musicGenre(Eric) == rock, has_height(Eric) == average), And(lives(Arnold) == 2, has_houseStyle(Arnold) == colonial, has_occupation(Arnold) == artist, has_cigar(Arnold) == prince, has_musicGenre(Arnold) == classical, has_height(Arnold) == tall), And(lives(Alice) == 3, has_houseStyle(Alice) == victorian, has_occupation(Alice) == teacher, has_cigar(Alice) == dunhill, has_musicGenre(Alice) == pop, has_height(Alice) == short), And(lives(Peter) == 4, has_houseStyle(Peter) == craftsman, has_occupation(Peter) == engineer, has_cigar(Peter) == pall_mall, has_musicGenre(Peter) == jazz, has_height(Peter) == very_short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-9",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Bob`, `Peter`, `Carol`, `Alice`\n - Each mother is accompanied by their child: `Fred`, `Bella`, `Timothy`, `Meredith`, `Samantha`, `Alice`\n - Everyone has something unique for lunch: `pizza`, `stir fry`, `grilled cheese`, `spaghetti`, `soup`, `stew`\n - Each person has a unique type of pet: `rabbit`, `fish`, `cat`, `dog`, `bird`, `hamster`\n - Each person has a unique birthday month: `may`, `sept`, `mar`, `jan`, `april`, `feb`\n - Each person has a unique favorite drink: `water`, `milk`, `coffee`, `tea`, `boba tea`, `root beer`\n\nClues:\n1. The person whose birthday is in May is the person who loves the spaghetti eater.\n2. The person's child is named Fred is the person who loves the stew.\n3. The person who likes milk is the person with a pet hamster.\n4. There is one house between the person who loves the spaghetti eater and the person who has a cat.\n5. The person who is the mother of Timothy is Bob.\n6. The person whose birthday is in January is directly left of the one who only drinks water.\n7. Carol is the coffee drinker.\n8. Peter is not in the fifth house.\n9. The person whose birthday is in April is the person's child is named Alice.\n10. The person who loves eating grilled cheese is somewhere to the right of the person whose birthday is in September.\n11. The person's child is named Bella and Bob are next to each other.\n12. The person who owns a rabbit is Peter.\n13. The person who keeps a pet bird is the person who loves the soup.\n14. The person who owns a rabbit is somewhere to the right of the person who loves stir fry.\n15. The person who loves eating grilled cheese is somewhere to the left of the person who owns a rabbit.\n16. The person whose birthday is in March is the tea drinker.\n17. Peter is the person's child is named Bella.\n18. The person who is the mother of Timothy is somewhere to the right of the person's child is named Bella.\n19. The person with an aquarium of fish and the person's child is named Bella are next to each other.\n20. The one who only drinks water is the person's child is named Fred.\n21. The person whose birthday is in May is somewhere to the right of the person with an aquarium of fish.\n22. The person with a pet hamster is the person's child is named Meredith.\n23. The root beer lover is the person who loves the spaghetti eater.\n24. Carol is directly left of Alice.\n25. Eric is in the third house.\n26. The person who is a pizza lover is Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "Food",
        "Pet",
        "Birthday",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "Alice",
          "soup",
          "bird",
          "april",
          "coffee"
        ],
        [
          "2",
          "Alice",
          "Meredith",
          "stir fry",
          "hamster",
          "sept",
          "milk"
        ],
        [
          "3",
          "Eric",
          "Samantha",
          "grilled cheese",
          "fish",
          "mar",
          "tea"
        ],
        [
          "4",
          "Peter",
          "Bella",
          "spaghetti",
          "rabbit",
          "may",
          "root beer"
        ],
        [
          "5",
          "Bob",
          "Timothy",
          "pizza",
          "dog",
          "jan",
          "boba tea"
        ],
        [
          "6",
          "Arnold",
          "Fred",
          "stew",
          "cat",
          "feb",
          "water"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Bob, Peter, Carol, Alice])\nchildren = EnumSort([Fred, Bella, Timothy, Meredith, Samantha, Alice])\nfoods = EnumSort([pizza, stir_fry, grilled_cheese, spaghetti, soup, stew])\npets = EnumSort([rabbit, fish, cat, dog, bird, hamster])\nmonths = EnumSort([may, sept, mar, jan, april, feb])\ndrinks = EnumSort([water, milk, coffee, tea, boba_tea, root_beer])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_food = Function([people] -> [foods])\nhas_pet = Function([people] -> [pets])\nhas_month = Function([people] -> [months])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in May is the person who loves the spaghetti eater\nThe person's child is named Fred is the person who loves the stew\nThe person who likes milk is the person with a pet hamster\nThere is one house between the person who loves the spaghetti eater and the person who has a cat\nThe person who is the mother of Timothy is Bob\nThe person whose birthday is in January is directly left of the one who only drinks water\nCarol is the coffee drinker\nPeter is not in the fifth house\nThe person whose birthday is in April is the person's child is named Alice\nThe person who loves eating grilled cheese is somewhere to the right of the person whose birthday is in September\nThe person's child is named Bella and Bob are next to each other\nThe person who owns a rabbit is Peter\nThe person who keeps a pet bird is the person who loves the soup\nThe person who owns a rabbit is somewhere to the right of the person who loves stir fry\nThe person who loves eating grilled cheese is somewhere to the left of the person who owns a rabbit\nThe person whose birthday is in March is the tea drinker\nPeter is the person's child is named Bella\nThe person who is the mother of Timothy is somewhere to the right of the person's child is named Bella\nThe person with an aquarium of fish and the person's child is named Bella are next to each other\nThe one who only drinks water is the person's child is named Fred\nThe person whose birthday is in May is somewhere to the right of the person with an aquarium of fish\nThe person with a pet hamster is the person's child is named Meredith\nThe root beer lover is the person who loves the spaghetti eater\nCarol is directly left of Alice\nEric is in the third house\nThe person who is a pizza lover is Bob",
    "queries": "And( And( lives(Carol) == 1, has_child(Carol) == Alice, has_food(Carol) == soup, has_pet(Carol) == bird, has_month(Carol) == april, has_drink(Carol) == coffee ), And( lives(Alice) == 2, has_child(Alice) == Meredith, has_food(Alice) == stir_fry, has_pet(Alice) == hamster, has_month(Alice) == sept, has_drink(Alice) == milk ), And( lives(Eric) == 3, has_child(Eric) == Samantha, has_food(Eric) == grilled_cheese, has_pet(Eric) == fish, has_month(Eric) == mar, has_drink(Eric) == tea ), And( lives(Peter) == 4, has_child(Peter) == Bella, has_food(Peter) == spaghetti, has_pet(Peter) == rabbit, has_month(Peter) == may, has_drink(Peter) == root_beer ), And( lives(Bob) == 5, has_child(Bob) == Timothy, has_food(Bob) == pizza, has_pet(Bob) == dog, has_month(Bob) == jan, has_drink(Bob) == boba_tea ), And( lives(Arnold) == 6, has_child(Arnold) == Fred, has_food(Arnold) == stew, has_pet(Arnold) == cat, has_month(Arnold) == feb, has_drink(Arnold) == water ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-37",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Eric`, `Alice`, `Bob`, `Carol`\n - People have unique favorite book genres: `biography`, `science fiction`, `fantasy`, `mystery`, `romance`, `historical fiction`\n - People have unique favorite sports: `baseball`, `basketball`, `swimming`, `volleyball`, `tennis`, `soccer`\n - People own unique car models: `honda civic`, `ford f150`, `tesla model 3`, `chevrolet silverado`, `bmw 3 series`, `toyota camry`\n\nClues:\n1. Eric is the person who loves mystery books.\n2. The person who loves tennis is the person who loves fantasy books.\n3. The person who loves soccer is directly left of the person who loves science fiction books.\n4. There is one house between the person who owns a Honda Civic and the person who loves biography books.\n5. Peter is somewhere to the right of Carol.\n6. The person who loves tennis is in the first house.\n7. The person who owns a Tesla Model 3 is somewhere to the right of the person who loves baseball.\n8. Eric is somewhere to the left of the person who loves romance books.\n9. The person who owns a Toyota Camry is somewhere to the right of the person who loves romance books.\n10. The person who owns a BMW 3 Series is Peter.\n11. The person who owns a BMW 3 Series is the person who loves basketball.\n12. The person who owns a Tesla Model 3 is directly left of Arnold.\n13. Alice and the person who loves volleyball are next to each other.\n14. The person who loves historical fiction books is the person who loves soccer.\n15. The person who owns a Chevrolet Silverado is not in the first house.\n16. The person who loves science fiction books is directly left of the person who loves swimming.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "FavoriteSport",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "fantasy",
          "tennis",
          "ford f150"
        ],
        [
          "2",
          "Eric",
          "mystery",
          "baseball",
          "chevrolet silverado"
        ],
        [
          "3",
          "Peter",
          "romance",
          "basketball",
          "bmw 3 series"
        ],
        [
          "4",
          "Alice",
          "historical fiction",
          "soccer",
          "honda civic"
        ],
        [
          "5",
          "Bob",
          "science fiction",
          "volleyball",
          "tesla model 3"
        ],
        [
          "6",
          "Arnold",
          "biography",
          "swimming",
          "toyota camry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Eric, Alice, Bob, Carol])\nbookGenres = EnumSort([biography, science_fiction, fantasy, mystery, romance, historical_fiction])\nsports = EnumSort([baseball, basketball, swimming, volleyball, tennis, soccer])\ncars = EnumSort([honda_civic, ford_f150, tesla_model_3, chevrolet_silverado, bmw_3_series, toyota_camry])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_sport = Function([people] -> [sports])\nowns_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Eric is the person who loves mystery books\nThe person who loves tennis is the person who loves fantasy books\nThe person who loves soccer is directly left of the person who loves science fiction books\nThere is one house between the person who owns a Honda Civic and the person who loves biography books\nPeter is somewhere to the right of Carol\nThe person who loves tennis is in the first house\nThe person who owns a Tesla Model 3 is somewhere to the right of the person who loves baseball\nEric is somewhere to the left of the person who loves romance books\nThe person who owns a Toyota Camry is somewhere to the right of the person who loves romance books\nThe person who owns a BMW 3 Series is Peter\nThe person who owns a BMW 3 Series is the person who loves basketball\nThe person who owns a Tesla Model 3 is directly left of Arnold\nAlice and the person who loves volleyball are next to each other\nThe person who loves historical fiction books is the person who loves soccer\nThe person who owns a Chevrolet Silverado is not in the first house\nThe person who loves science fiction books is directly left of the person who loves swimming",
    "queries": "And( And(lives(Carol) == 1, has_bookGenre(Carol) == fantasy, has_sport(Carol) == tennis, owns_car(Carol) == ford_f150), And(lives(Eric) == 2, has_bookGenre(Eric) == mystery, has_sport(Eric) == baseball, owns_car(Eric) == chevrolet_silverado), And(lives(Peter) == 3, has_bookGenre(Peter) == romance, has_sport(Peter) == basketball, owns_car(Peter) == bmw_3_series), And(lives(Alice) == 4, has_bookGenre(Alice) == historical_fiction, has_sport(Alice) == soccer, owns_car(Alice) == honda_civic), And(lives(Bob) == 5, has_bookGenre(Bob) == science_fiction, has_sport(Bob) == volleyball, owns_car(Bob) == tesla_model_3), And(lives(Arnold) == 6, has_bookGenre(Arnold) == biography, has_sport(Arnold) == swimming, owns_car(Arnold) == toyota_camry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-9",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Eric`, `Arnold`, `Alice`\n - Each person has a favorite color: `blue`, `red`, `green`, `yellow`, `white`\n - Everyone has a unique favorite cigar: `dunhill`, `prince`, `pall mall`, `blends`, `blue master`\n - People have unique hair colors: `blonde`, `brown`, `red`, `gray`, `black`\n - Each person has a unique favorite drink: `tea`, `milk`, `coffee`, `water`, `root beer`\n - The people are of nationalities: `dane`, `swede`, `german`, `brit`, `norwegian`\n\nClues:\n1. The Norwegian is directly left of the Prince smoker.\n2. The person who loves yellow is somewhere to the right of the tea drinker.\n3. The person who has blonde hair is the Norwegian.\n4. The root beer lover is somewhere to the left of the Dane.\n5. There is one house between the person whose favorite color is red and the person who has black hair.\n6. The German is in the third house.\n7. The person who loves blue is not in the fourth house.\n8. The person whose favorite color is red and the Dunhill smoker are next to each other.\n9. The root beer lover is directly left of the German.\n10. The Norwegian is Eric.\n11. The British person is the person who likes milk.\n12. Peter is the person who smokes many unique blends.\n13. The coffee drinker is directly left of the Swedish person.\n14. The person who smokes Blue Master is somewhere to the left of the person who smokes many unique blends.\n15. The person who has gray hair is directly left of the person who has red hair.\n16. The person who loves blue is somewhere to the right of the one who only drinks water.\n17. Arnold is the person who has brown hair.\n18. The person who has gray hair is not in the third house.\n19. The coffee drinker is the person whose favorite color is green.\n20. The Dunhill smoker is Alice.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Cigar",
        "HairColor",
        "Drink",
        "Nationality"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "green",
          "blue master",
          "blonde",
          "coffee",
          "norwegian"
        ],
        [
          "2",
          "Bob",
          "red",
          "prince",
          "gray",
          "root beer",
          "swede"
        ],
        [
          "3",
          "Alice",
          "white",
          "dunhill",
          "red",
          "tea",
          "german"
        ],
        [
          "4",
          "Peter",
          "yellow",
          "blends",
          "black",
          "water",
          "dane"
        ],
        [
          "5",
          "Arnold",
          "blue",
          "pall mall",
          "brown",
          "milk",
          "brit"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Eric, Arnold, Alice])\ncolors = EnumSort([blue, red, green, yellow, white])\ncigars = EnumSort([dunhill, prince, pall_mall, blends, blue_master])\nhairColors = EnumSort([blonde, brown, red, gray, black])\ndrinks = EnumSort([tea, milk, coffee, water, root_beer])\nnationalities = EnumSort([dane, swede, german, brit, norwegian])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_cigar = Function([people] -> [cigars])\nhas_hairColor = Function([people] -> [hairColors])\nhas_drink = Function([people] -> [drinks])\nhas_nationality = Function([people] -> [nationalities])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The Norwegian is directly left of the Prince smoker\nThe person who loves yellow is somewhere to the right of the tea drinker\nThe person who has blonde hair is the Norwegian\nThe root beer lover is somewhere to the left of the Dane\nThere is one house between the person whose favorite color is red and the person who has black hair\nThe German is in the third house\nThe person who loves blue is not in the fourth house\nThe person whose favorite color is red and the Dunhill smoker are next to each other\nThe root beer lover is directly left of the German\nThe Norwegian is Eric\nThe British person is the person who likes milk\nPeter is the person who smokes many unique blends\nThe coffee drinker is directly left of the Swedish person\nThe person who smokes Blue Master is somewhere to the left of the person who smokes many unique blends\nThe person who has gray hair is directly left of the person who has red hair\nThe person who loves blue is somewhere to the right of the one who only drinks water\nArnold is the person who has brown hair\nThe person who has gray hair is not in the third house\nThe coffee drinker is the person whose favorite color is green\nThe Dunhill smoker is Alice",
    "queries": "And( And(lives(Eric) == 1, has_color(Eric) == green, has_cigar(Eric) == blue_master, has_hairColor(Eric) == blonde, has_drink(Eric) == coffee, has_nationality(Eric) == norwegian), And(lives(Bob) == 2, has_color(Bob) == red, has_cigar(Bob) == prince, has_hairColor(Bob) == gray, has_drink(Bob) == root_beer, has_nationality(Bob) == swede), And(lives(Alice) == 3, has_color(Alice) == white, has_cigar(Alice) == dunhill, has_hairColor(Alice) == red, has_drink(Alice) == tea, has_nationality(Alice) == german), And(lives(Peter) == 4, has_color(Peter) == yellow, has_cigar(Peter) == blends, has_hairColor(Peter) == black, has_drink(Peter) == water, has_nationality(Peter) == dane), And(lives(Arnold) == 5, has_color(Arnold) == blue, has_cigar(Arnold) == pall_mall, has_hairColor(Arnold) == brown, has_drink(Arnold) == milk, has_nationality(Arnold) == brit) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-31",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Arnold`, `Carol`, `Eric`, `Peter`\n - People use unique phone models: `xiaomi mi 11`, `google pixel 6`, `samsung galaxy s21`, `oneplus 9`, `huawei p50`, `iphone 13`\n - People have unique favorite book genres: `romance`, `historical fiction`, `fantasy`, `mystery`, `science fiction`, `biography`\n - They all have a unique favorite flower: `tulips`, `roses`, `carnations`, `daffodils`, `iris`, `lilies`\n - The people keep unique animals: `dog`, `cat`, `bird`, `fish`, `rabbit`, `horse`\n - Each person has a unique level of education: `trade school`, `high school`, `master`, `associate`, `bachelor`, `doctorate`\n\nClues:\n1. The bird keeper is the person who uses a Google Pixel 6.\n2. The person who loves a bouquet of daffodils is the person with an associate's degree.\n3. The person who uses a OnePlus 9 is not in the fourth house.\n4. There are two houses between the person with a master's degree and the rabbit owner.\n5. The person who loves a carnations arrangement is Arnold.\n6. The person who loves the boquet of lilies is not in the sixth house.\n7. The person who loves the vase of tulips is Carol.\n8. The person with a high school diploma is Bob.\n9. The person who attended trade school is somewhere to the left of the person who keeps horses.\n10. The person who loves mystery books is Eric.\n11. The fish enthusiast is directly left of Carol.\n12. Bob is the fish enthusiast.\n13. Eric is the dog owner.\n14. The person who loves a carnations arrangement is the person who uses a Google Pixel 6.\n15. The person who loves fantasy books is in the second house.\n16. The person who uses a Samsung Galaxy S21 is the person who loves the boquet of iris.\n17. Alice is the person with an associate's degree.\n18. The person who uses a Google Pixel 6 is not in the second house.\n19. The dog owner is the person with a doctorate.\n20. The fish enthusiast is the person who uses a Samsung Galaxy S21.\n21. The person who uses an iPhone 13 is somewhere to the right of the person who loves fantasy books.\n22. The person who loves mystery books is somewhere to the right of the person who loves the boquet of iris.\n23. Alice is the person who uses an iPhone 13.\n24. The person who attended trade school is not in the fourth house.\n25. The person who loves biography books is directly left of Eric.\n26. There is one house between the rabbit owner and the person who loves historical fiction books.\n27. The person who loves the boquet of iris is somewhere to the right of the person who uses a Xiaomi Mi 11.\n28. The person who loves science fiction books is the person who uses a Samsung Galaxy S21.\n29. The person who loves the boquet of lilies is not in the second house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "BookGenre",
        "Flower",
        "Animal",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "google pixel 6",
          "romance",
          "carnations",
          "bird",
          "master"
        ],
        [
          "2",
          "Peter",
          "xiaomi mi 11",
          "fantasy",
          "roses",
          "cat",
          "trade school"
        ],
        [
          "3",
          "Bob",
          "samsung galaxy s21",
          "science fiction",
          "iris",
          "fish",
          "high school"
        ],
        [
          "4",
          "Carol",
          "huawei p50",
          "biography",
          "tulips",
          "rabbit",
          "bachelor"
        ],
        [
          "5",
          "Eric",
          "oneplus 9",
          "mystery",
          "lilies",
          "dog",
          "doctorate"
        ],
        [
          "6",
          "Alice",
          "iphone 13",
          "historical fiction",
          "daffodils",
          "horse",
          "associate"
        ]
      ]
    },
    "declarations": "people = EnumSort([alice, bob, arnold, carol, eric, peter])\nphoneModels = EnumSort([xiaomi_mi_11, google_pixel_6, samsung_galaxy_s21, oneplus_9, huawei_p50, iphone_13])\nbookGenres = EnumSort([romance, historical_fiction, fantasy, mystery, science_fiction, biography])\nflowers = EnumSort([tulips, roses, carnations, daffodils, iris, lilies])\nanimals = EnumSort([dog, cat, bird, fish, rabbit, horse])\neducationLevels = EnumSort([trade_school, high_school, master, associate, bachelor, doctorate])\nlives = Function([people] -> [int])\nhas_phoneModel = Function([people] -> [phoneModels])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_flower = Function([people] -> [flowers])\nhas_animal = Function([people] -> [animals])\nhas_education = Function([people] -> [educationLevels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The bird keeper is the person who uses a Google Pixel 6\nThe person who loves a bouquet of daffodils is the person with an associate's degree\nThe person who uses a OnePlus 9 is not in the fourth house\nThere are two houses between the person with a master's degree and the rabbit owner\nThe person who loves a carnations arrangement is Arnold\nThe person who loves the boquet of lilies is not in the sixth house\nThe person who loves the vase of tulips is Carol\nThe person with a high school diploma is Bob\nThe person who attended trade school is somewhere to the left of the person who keeps horses\nThe person who loves mystery books is Eric\nThe fish enthusiast is directly left of Carol\nBob is the fish enthusiast\nEric is the dog owner\nThe person who loves a carnations arrangement is the person who uses a Google Pixel 6\nThe person who loves fantasy books is in the second house\nThe person who uses a Samsung Galaxy S21 is the person who loves the boquet of iris\nAlice is the person with an associate's degree\nThe person who uses a Google Pixel 6 is not in the second house\nThe dog owner is the person with a doctorate\nThe fish enthusiast is the person who uses a Samsung Galaxy S21\nThe person who uses an iPhone 13 is somewhere to the right of the person who loves fantasy books\nThe person who loves mystery books is somewhere to the right of the person who loves the boquet of iris\nAlice is the person who uses an iPhone 13\nThe person who attended trade school is not in the fourth house\nThe person who loves biography books is directly left of Eric\nThere is one house between the rabbit owner and the person who loves historical fiction books\nThe person who loves the boquet of iris is somewhere to the right of the person who uses a Xiaomi Mi 11\nThe person who loves science fiction books is the person who uses a Samsung Galaxy S21\nThe person who loves the boquet of lilies is not in the second house",
    "queries": "And( And(lives(Arnold) == 1, has_phoneModel(Arnold) == google_pixel_6, has_bookGenre(Arnold) == romance, has_flower(Arnold) == carnations, has_animal(Arnold) == bird, has_education(Arnold) == master), And(lives(Peter) == 2, has_phoneModel(Peter) == xiaomi_mi_11, has_bookGenre(Peter) == fantasy, has_flower(Peter) == roses, has_animal(Peter) == cat, has_education(Peter) == trade_school), And(lives(Bob) == 3, has_phoneModel(Bob) == samsung_galaxy_s21, has_bookGenre(Bob) == science_fiction, has_flower(Bob) == iris, has_animal(Bob) == fish, has_education(Bob) == high_school), And(lives(Carol) == 4, has_phoneModel(Carol) == huawei_p50, has_bookGenre(Carol) == biography, has_flower(Carol) == tulips, has_animal(Carol) == rabbit, has_education(Carol) == bachelor), And(lives(Eric) == 5, has_phoneModel(Eric) == oneplus_9, has_bookGenre(Eric) == mystery, has_flower(Eric) == lilies, has_animal(Eric) == dog, has_education(Eric) == doctorate), And(lives(Alice) == 6, has_phoneModel(Alice) == iphone_13, has_bookGenre(Alice) == historical_fiction, has_flower(Alice) == daffodils, has_animal(Alice) == horse, has_education(Alice) == associate) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-21",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Alice`, `Arnold`, `Carol`, `Bob`\n - People have unique heights: `very tall`, `very short`, `tall`, `super tall`, `short`, `average`\n - Each person prefers a unique type of vacation: `cruise`, `mountain`, `camping`, `beach`, `city`, `cultural`\n - People have unique hair colors: `blonde`, `red`, `gray`, `brown`, `auburn`, `black`\n - Each person has a unique favorite drink: `tea`, `boba tea`, `milk`, `water`, `coffee`, `root beer`\n - They all have a unique favorite flower: `lilies`, `carnations`, `iris`, `tulips`, `roses`, `daffodils`\n\nClues:\n1. The person who loves the vase of tulips is the person who has auburn hair.\n2. The person who is short is somewhere to the right of Arnold.\n3. The person who goes on cultural tours is Arnold.\n4. The person who has auburn hair is Bob.\n5. The person who is very short is the person who loves a bouquet of daffodils.\n6. The person who loves the boquet of iris is the person who is very tall.\n7. Peter is somewhere to the right of the root beer lover.\n8. The person who loves beach vacations is directly left of the person who prefers city breaks.\n9. Bob is directly left of the coffee drinker.\n10. The person who is very short is the person who has gray hair.\n11. Eric is somewhere to the right of the tea drinker.\n12. The person who has red hair is the person who is tall.\n13. The person who is tall is somewhere to the right of the person who is short.\n14. The person who has black hair is the person who enjoys mountain retreats.\n15. The one who only drinks water is the person who prefers city breaks.\n16. The person who has brown hair is Carol.\n17. The person who has an average height is Arnold.\n18. The person who has brown hair is directly left of the person who likes milk.\n19. The root beer lover is the person who is very short.\n20. The person who is short is somewhere to the left of the coffee drinker.\n21. The person who enjoys camping trips is the person who loves a carnations arrangement.\n22. The person who is super tall and Arnold are next to each other.\n23. There is one house between the person who loves the boquet of lilies and Peter.\n24. The person who loves the vase of tulips is directly left of the person who has black hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Vacation",
        "HairColor",
        "Drink",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "very short",
          "beach",
          "gray",
          "root beer",
          "daffodils"
        ],
        [
          "2",
          "Carol",
          "super tall",
          "city",
          "brown",
          "water",
          "roses"
        ],
        [
          "3",
          "Arnold",
          "average",
          "cultural",
          "blonde",
          "milk",
          "lilies"
        ],
        [
          "4",
          "Bob",
          "short",
          "cruise",
          "auburn",
          "tea",
          "tulips"
        ],
        [
          "5",
          "Peter",
          "very tall",
          "mountain",
          "black",
          "coffee",
          "iris"
        ],
        [
          "6",
          "Eric",
          "tall",
          "camping",
          "red",
          "boba tea",
          "carnations"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Alice, Arnold, Carol, Bob])\nheights = EnumSort([very_tall, very_short, tall, super_tall, short, average])\nvacations = EnumSort([cruise, mountain, camping, beach, city, cultural])\nhairColors = EnumSort([blonde, red, gray, brown, auburn, black])\ndrinks = EnumSort([tea, boba_tea, milk, water, coffee, root_beer])\nflowers = EnumSort([lilies, carnations, iris, tulips, roses, daffodils])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nprefers_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\nhas_drink = Function([people] -> [drinks])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves the vase of tulips is the person who has auburn hair\nThe person who is short is somewhere to the right of Arnold\nThe person who goes on cultural tours is Arnold\nThe person who has auburn hair is Bob\nThe person who is very short is the person who loves a bouquet of daffodils\nThe person who loves the boquet of iris is the person who is very tall\nPeter is somewhere to the right of the root beer lover\nThe person who loves beach vacations is directly left of the person who prefers city breaks\nBob is directly left of the coffee drinker\nThe person who is very short is the person who has gray hair\nEric is somewhere to the right of the tea drinker\nThe person who has red hair is the person who is tall\nThe person who is tall is somewhere to the right of the person who is short\nThe person who has black hair is the person who enjoys mountain retreats\nThe one who only drinks water is the person who prefers city breaks\nThe person who has brown hair is Carol\nThe person who has an average height is Arnold\nThe person who has brown hair is directly left of the person who likes milk\nThe root beer lover is the person who is very short\nThe person who is short is somewhere to the left of the coffee drinker\nThe person who enjoys camping trips is the person who loves a carnations arrangement\nThe person who is super tall and Arnold are next to each other\nThere is one house between the person who loves the boquet of lilies and Peter\nThe person who loves the vase of tulips is directly left of the person who has black hair",
    "queries": "And( And(lives(Alice) == 1, has_height(Alice) == very_short, prefers_vacation(Alice) == beach, has_hairColor(Alice) == gray, has_drink(Alice) == root_beer, has_flower(Alice) == daffodils), And(lives(Carol) == 2, has_height(Carol) == super_tall, prefers_vacation(Carol) == city, has_hairColor(Carol) == brown, has_drink(Carol) == water, has_flower(Carol) == roses), And(lives(Arnold) == 3, has_height(Arnold) == average, prefers_vacation(Arnold) == cultural, has_hairColor(Arnold) == blonde, has_drink(Arnold) == milk, has_flower(Arnold) == lilies), And(lives(Bob) == 4, has_height(Bob) == short, prefers_vacation(Bob) == cruise, has_hairColor(Bob) == auburn, has_drink(Bob) == tea, has_flower(Bob) == tulips), And(lives(Peter) == 5, has_height(Peter) == very_tall, prefers_vacation(Peter) == mountain, has_hairColor(Peter) == black, has_drink(Peter) == coffee, has_flower(Peter) == iris), And(lives(Eric) == 6, has_height(Eric) == tall, prefers_vacation(Eric) == camping, has_hairColor(Eric) == red, has_drink(Eric) == boba_tea, has_flower(Eric) == carnations) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-12",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Arnold`, `Alice`, `Peter`, `Eric`\n - The people are of nationalities: `swede`, `german`, `dane`, `brit`, `chinese`, `norwegian`\n - Each person has a unique type of pet: `bird`, `cat`, `dog`, `rabbit`, `fish`, `hamster`\n - Each person has a favorite color: `red`, `green`, `purple`, `yellow`, `white`, `blue`\n\nClues:\n1. The person who has a cat is the British person.\n2. The person with a pet hamster is in the fourth house.\n3. The person who owns a rabbit is the person who loves purple.\n4. Arnold is the person who loves white.\n5. The Dane is somewhere to the left of the person who owns a dog.\n6. Carol and Peter are next to each other.\n7. The Swedish person is somewhere to the right of the person whose favorite color is green.\n8. The person who loves blue is the person with a pet hamster.\n9. There are two houses between the person whose favorite color is red and Bob.\n10. The person who keeps a pet bird is in the second house.\n11. Carol is in the first house.\n12. The person who loves yellow and the German are next to each other.\n13. Alice is the person who loves yellow.\n14. The Dane is the person who loves yellow.\n15. Bob is the Norwegian.\n16. Alice is directly left of the person who loves white.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Pet",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "brit",
          "cat",
          "red"
        ],
        [
          "2",
          "Peter",
          "chinese",
          "bird",
          "green"
        ],
        [
          "3",
          "Eric",
          "swede",
          "rabbit",
          "purple"
        ],
        [
          "4",
          "Bob",
          "norwegian",
          "hamster",
          "blue"
        ],
        [
          "5",
          "Alice",
          "dane",
          "fish",
          "yellow"
        ],
        [
          "6",
          "Arnold",
          "german",
          "dog",
          "white"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Arnold, Alice, Peter, Eric])\nnationalities = EnumSort([swede, german, dane, brit, chinese, norwegian])\npets = EnumSort([bird, cat, dog, rabbit, fish, hamster])\ncolors = EnumSort([red, green, purple, yellow, white, blue])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_pet = Function([people] -> [pets])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who has a cat is the British person\nThe person with a pet hamster is in the fourth house\nThe person who owns a rabbit is the person who loves purple\nArnold is the person who loves white\nThe Dane is somewhere to the left of the person who owns a dog\nCarol and Peter are next to each other\nThe Swedish person is somewhere to the right of the person whose favorite color is green\nThe person who loves blue is the person with a pet hamster\nThere are two houses between the person whose favorite color is red and Bob\nThe person who keeps a pet bird is in the second house\nCarol is in the first house\nThe person who loves yellow and the German are next to each other\nAlice is the person who loves yellow\nThe Dane is the person who loves yellow\nBob is the Norwegian\nAlice is directly left of the person who loves white",
    "queries": "And( And(lives(Carol) == 1, has_nationality(Carol) == brit, has_pet(Carol) == cat, has_color(Carol) == red), And(lives(Peter) == 2, has_nationality(Peter) == chinese, has_pet(Peter) == bird, has_color(Peter) == green), And(lives(Eric) == 3, has_nationality(Eric) == swede, has_pet(Eric) == rabbit, has_color(Eric) == purple), And(lives(Bob) == 4, has_nationality(Bob) == norwegian, has_pet(Bob) == hamster, has_color(Bob) == blue), And(lives(Alice) == 5, has_nationality(Alice) == dane, has_pet(Alice) == fish, has_color(Alice) == yellow), And(lives(Arnold) == 6, has_nationality(Arnold) == german, has_pet(Arnold) == dog, has_color(Arnold) == white) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-3",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Arnold`, `Peter`, `Alice`, `Eric`\n - Each person has a unique favorite drink: `boba tea`, `coffee`, `root beer`, `water`, `milk`, `tea`\n - Each person lives in a unique style of house: `ranch`, `victorian`, `craftsman`, `mediterranean`, `colonial`, `modern`\n - Everyone has a unique favorite cigar: `dunhill`, `prince`, `yellow monster`, `blue master`, `blends`, `pall mall`\n\nClues:\n1. Eric is the Dunhill smoker.\n2. Peter and the root beer lover are next to each other.\n3. The Prince smoker is Bob.\n4. The person in a modern-style house is somewhere to the left of Arnold.\n5. The one who only drinks water is somewhere to the right of Bob.\n6. The person in a modern-style house is the person who smokes Blue Master.\n7. The person in a ranch-style home is directly left of the person in a modern-style house.\n8. The person who smokes Yellow Monster is somewhere to the right of the coffee drinker.\n9. The root beer lover is in the sixth house.\n10. The person who likes milk is somewhere to the left of the tea drinker.\n11. Arnold is the person living in a colonial-style house.\n12. The person in a Craftsman-style house is the coffee drinker.\n13. The boba tea drinker is somewhere to the left of the person living in a colonial-style house.\n14. The boba tea drinker is the person partial to Pall Mall.\n15. The person residing in a Victorian house is not in the fifth house.\n16. The person living in a colonial-style house is in the third house.\n17. Alice is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "HouseStyle",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "boba tea",
          "ranch",
          "pall mall"
        ],
        [
          "2",
          "Alice",
          "milk",
          "modern",
          "blue master"
        ],
        [
          "3",
          "Arnold",
          "tea",
          "colonial",
          "blends"
        ],
        [
          "4",
          "Bob",
          "coffee",
          "craftsman",
          "prince"
        ],
        [
          "5",
          "Peter",
          "water",
          "mediterranean",
          "yellow monster"
        ],
        [
          "6",
          "Eric",
          "root beer",
          "victorian",
          "dunhill"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Arnold, Peter, Alice, Eric])\ndrinks = EnumSort([boba_tea, coffee, root_beer, water, milk, tea])\nhouseStyles = EnumSort([ranch, victorian, craftsman, mediterranean, colonial, modern])\ncigars = EnumSort([dunhill, prince, yellow_monster, blue_master, blends, pall_mall])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Eric is the Dunhill smoker\nPeter and the root beer lover are next to each other\nThe Prince smoker is Bob\nThe person in a modern-style house is somewhere to the left of Arnold\nThe one who only drinks water is somewhere to the right of Bob\nThe person in a modern-style house is the person who smokes Blue Master\nThe person in a ranch-style home is directly left of the person in a modern-style house\nThe person who smokes Yellow Monster is somewhere to the right of the coffee drinker\nThe root beer lover is in the sixth house\nThe person who likes milk is somewhere to the left of the tea drinker\nArnold is the person living in a colonial-style house\nThe person in a Craftsman-style house is the coffee drinker\nThe boba tea drinker is somewhere to the left of the person living in a colonial-style house\nThe boba tea drinker is the person partial to Pall Mall\nThe person residing in a Victorian house is not in the fifth house\nThe person living in a colonial-style house is in the third house\nAlice is not in the first house",
    "queries": "And( And(lives(Carol) == 1, has_drink(Carol) == boba_tea, has_houseStyle(Carol) == ranch, has_cigar(Carol) == pall_mall), And(lives(Alice) == 2, has_drink(Alice) == milk, has_houseStyle(Alice) == modern, has_cigar(Alice) == blue_master), And(lives(Arnold) == 3, has_drink(Arnold) == tea, has_houseStyle(Arnold) == colonial, has_cigar(Arnold) == blends), And(lives(Bob) == 4, has_drink(Bob) == coffee, has_houseStyle(Bob) == craftsman, has_cigar(Bob) == prince), And(lives(Peter) == 5, has_drink(Peter) == water, has_houseStyle(Peter) == mediterranean, has_cigar(Peter) == yellow_monster), And(lives(Eric) == 6, has_drink(Eric) == root_beer, has_houseStyle(Eric) == victorian, has_cigar(Eric) == dunhill) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-1",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Arnold`, `Eric`, `Alice`, `Carol`\n - People have unique hair colors: `red`, `gray`, `auburn`, `blonde`, `brown`, `black`\n - People have unique favorite book genres: `historical fiction`, `biography`, `romance`, `fantasy`, `mystery`, `science fiction`\n - People have unique heights: `very short`, `very tall`, `tall`, `short`, `super tall`, `average`\n - Each person has a unique level of education: `associate`, `doctorate`, `high school`, `trade school`, `bachelor`, `master`\n - Each person has a unique favorite drink: `boba tea`, `milk`, `water`, `root beer`, `coffee`, `tea`\n\nClues:\n1. The person with a doctorate and Bob are next to each other.\n2. There is one house between Carol and the person who has black hair.\n3. Peter is the person with a doctorate.\n4. The person who loves science fiction books is Eric.\n5. The one who only drinks water is the person who has an average height.\n6. Alice is the person who loves mystery books.\n7. The person who loves romance books is Bob.\n8. The person who has brown hair is in the second house.\n9. The person who has an average height is in the fourth house.\n10. The boba tea drinker is the person who is very tall.\n11. The person with a high school diploma is Bob.\n12. The person who is short is somewhere to the left of the person who is super tall.\n13. The person who loves historical fiction books and the person with a bachelor's degree are next to each other.\n14. The person who attended trade school is the person who has red hair.\n15. Carol is the person who has auburn hair.\n16. The person who is very short is somewhere to the right of the person who has gray hair.\n17. There are two houses between Eric and the person who loves fantasy books.\n18. There are two houses between the tea drinker and the person who is very short.\n19. Eric is somewhere to the left of the person with a bachelor's degree.\n20. The root beer lover is Alice.\n21. The person with an associate's degree is Arnold.\n22. The person who is tall is not in the second house.\n23. The person who loves science fiction books is the boba tea drinker.\n24. The person who has black hair is not in the fourth house.\n25. The person who is short is the coffee drinker.\n26. The coffee drinker and the person with a high school diploma are next to each other.\n27. The coffee drinker is not in the second house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "BookGenre",
        "Height",
        "Education",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "gray",
          "biography",
          "short",
          "doctorate",
          "coffee"
        ],
        [
          "2",
          "Bob",
          "brown",
          "romance",
          "super tall",
          "high school",
          "tea"
        ],
        [
          "3",
          "Eric",
          "red",
          "science fiction",
          "very tall",
          "trade school",
          "boba tea"
        ],
        [
          "4",
          "Carol",
          "auburn",
          "historical fiction",
          "average",
          "master",
          "water"
        ],
        [
          "5",
          "Alice",
          "blonde",
          "mystery",
          "very short",
          "bachelor",
          "root beer"
        ],
        [
          "6",
          "Arnold",
          "black",
          "fantasy",
          "tall",
          "associate",
          "milk"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Arnold, Eric, Alice, Carol])\nhairColors = EnumSort([red, gray, auburn, blonde, brown, black])\nbookGenres = EnumSort([historical_fiction, biography, romance, fantasy, mystery, science_fiction])\nheights = EnumSort([very_short, very_tall, tall, short, super_tall, average])\neducationLevels = EnumSort([associate, doctorate, high_school, trade_school, bachelor, master])\ndrinks = EnumSort([boba_tea, milk, water, root_beer, coffee, tea])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_height = Function([people] -> [heights])\nhas_education = Function([people] -> [educationLevels])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with a doctorate and Bob are next to each other\nThere is one house between Carol and the person who has black hair\nPeter is the person with a doctorate\nThe person who loves science fiction books is Eric\nThe one who only drinks water is the person who has an average height\nAlice is the person who loves mystery books\nThe person who loves romance books is Bob\nThe person who has brown hair is in the second house\nThe person who has an average height is in the fourth house\nThe boba tea drinker is the person who is very tall\nThe person with a high school diploma is Bob\nThe person who is short is somewhere to the left of the person who is super tall\nThe person who loves historical fiction books and the person with a bachelor's degree are next to each other\nThe person who attended trade school is the person who has red hair\nCarol is the person who has auburn hair\nThe person who is very short is somewhere to the right of the person who has gray hair\nThere are two houses between Eric and the person who loves fantasy books\nThere are two houses between the tea drinker and the person who is very short\nEric is somewhere to the left of the person with a bachelor's degree\nThe root beer lover is Alice\nThe person with an associate's degree is Arnold\nThe person who is tall is not in the second house\nThe person who loves science fiction books is the boba tea drinker\nThe person who has black hair is not in the fourth house\nThe person who is short is the coffee drinker\nThe coffee drinker and the person with a high school diploma are next to each other\nThe coffee drinker is not in the second house",
    "queries": "And( And(lives(Peter) == 1, has_hairColor(Peter) == gray, has_bookGenre(Peter) == biography, has_height(Peter) == short, has_education(Peter) == doctorate, has_drink(Peter) == coffee), And(lives(Bob) == 2, has_hairColor(Bob) == brown, has_bookGenre(Bob) == romance, has_height(Bob) == super_tall, has_education(Bob) == high_school, has_drink(Bob) == tea), And(lives(Eric) == 3, has_hairColor(Eric) == red, has_bookGenre(Eric) == science_fiction, has_height(Eric) == very_tall, has_education(Eric) == trade_school, has_drink(Eric) == boba_tea), And(lives(Carol) == 4, has_hairColor(Carol) == auburn, has_bookGenre(Carol) == historical_fiction, has_height(Carol) == average, has_education(Carol) == master, has_drink(Carol) == water), And(lives(Alice) == 5, has_hairColor(Alice) == blonde, has_bookGenre(Alice) == mystery, has_height(Alice) == very_short, has_education(Alice) == bachelor, has_drink(Alice) == root_beer), And(lives(Arnold) == 6, has_hairColor(Arnold) == black, has_bookGenre(Arnold) == fantasy, has_height(Arnold) == tall, has_education(Arnold) == associate, has_drink(Arnold) == milk) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-15",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Carol`, `Bob`, `Peter`, `Alice`\n - Each person lives in a unique style of house: `ranch`, `victorian`, `modern`, `colonial`, `craftsman`, `mediterranean`\n - Each person has a unique favorite drink: `coffee`, `water`, `root beer`, `tea`, `milk`, `boba tea`\n - Each person has an occupation: `engineer`, `nurse`, `doctor`, `artist`, `lawyer`, `teacher`\n - The people keep unique animals: `horse`, `fish`, `dog`, `cat`, `rabbit`, `bird`\n - Each person has a favorite color: `red`, `purple`, `white`, `green`, `yellow`, `blue`\n\nClues:\n1. The fish enthusiast is in the first house.\n2. Carol is somewhere to the left of the person in a Mediterranean-style villa.\n3. The bird keeper is the person who loves purple.\n4. The person in a ranch-style home is the one who only drinks water.\n5. The coffee drinker is not in the fourth house.\n6. The person living in a colonial-style house and the boba tea drinker are next to each other.\n7. The cat lover is the person who is a teacher.\n8. The person in a modern-style house is in the third house.\n9. The person who is an engineer and Peter are next to each other.\n10. Arnold is the person who is an artist.\n11. The person whose favorite color is red is Arnold.\n12. The coffee drinker is somewhere to the right of the person who is a teacher.\n13. The bird keeper is the person in a ranch-style home.\n14. The rabbit owner is in the sixth house.\n15. The boba tea drinker is Peter.\n16. Eric is the cat lover.\n17. The person who is a nurse is directly left of the person in a modern-style house.\n18. The bird keeper is Carol.\n19. There are two houses between the cat lover and the boba tea drinker.\n20. Bob is the tea drinker.\n21. The person residing in a Victorian house is the dog owner.\n22. The person whose favorite color is green is in the fourth house.\n23. The person who loves blue is the root beer lover.\n24. The person who loves white is not in the sixth house.\n25. Peter is the person who is a doctor.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Drink",
        "Occupation",
        "Animal",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "craftsman",
          "milk",
          "artist",
          "fish",
          "red"
        ],
        [
          "2",
          "Carol",
          "ranch",
          "water",
          "nurse",
          "bird",
          "purple"
        ],
        [
          "3",
          "Eric",
          "modern",
          "root beer",
          "teacher",
          "cat",
          "blue"
        ],
        [
          "4",
          "Bob",
          "victorian",
          "tea",
          "lawyer",
          "dog",
          "green"
        ],
        [
          "5",
          "Alice",
          "colonial",
          "coffee",
          "engineer",
          "horse",
          "white"
        ],
        [
          "6",
          "Peter",
          "mediterranean",
          "boba tea",
          "doctor",
          "rabbit",
          "yellow"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Carol, Bob, Peter, Alice])\nhouseStyles = EnumSort([ranch, victorian, modern, colonial, craftsman, mediterranean])\ndrinks = EnumSort([coffee, water, root_beer, tea, milk, boba_tea])\noccupations = EnumSort([engineer, nurse, doctor, artist, lawyer, teacher])\nanimals = EnumSort([horse, fish, dog, cat, rabbit, bird])\ncolors = EnumSort([red, purple, white, green, yellow, blue])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_drink = Function([people] -> [drinks])\nhas_occupation = Function([people] -> [occupations])\nhas_animal = Function([people] -> [animals])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The fish enthusiast is in the first house\nCarol is somewhere to the left of the person in a Mediterranean-style villa\nThe bird keeper is the person who loves purple\nThe person in a ranch-style home is the one who only drinks water\nThe coffee drinker is not in the fourth house\nThe person living in a colonial-style house and the boba tea drinker are next to each other\nThe cat lover is the person who is a teacher\nThe person in a modern-style house is in the third house\nThe person who is an engineer and Peter are next to each other\nArnold is the person who is an artist\nThe person whose favorite color is red is Arnold\nThe coffee drinker is somewhere to the right of the person who is a teacher\nThe bird keeper is the person in a ranch-style home\nThe rabbit owner is in the sixth house\nThe boba tea drinker is Peter\nEric is the cat lover\nThe person who is a nurse is directly left of the person in a modern-style house\nThe bird keeper is Carol\nThere are two houses between the cat lover and the boba tea drinker\nBob is the tea drinker\nThe person residing in a Victorian house is the dog owner\nThe person whose favorite color is green is in the fourth house\nThe person who loves blue is the root beer lover\nThe person who loves white is not in the sixth house\nPeter is the person who is a doctor",
    "queries": "And( And(lives(Arnold) == 1, has_houseStyle(Arnold) == craftsman, has_drink(Arnold) == milk, has_occupation(Arnold) == artist, has_animal(Arnold) == fish, has_color(Arnold) == red), And(lives(Carol) == 2, has_houseStyle(Carol) == ranch, has_drink(Carol) == water, has_occupation(Carol) == nurse, has_animal(Carol) == bird, has_color(Carol) == purple), And(lives(Eric) == 3, has_houseStyle(Eric) == modern, has_drink(Eric) == root_beer, has_occupation(Eric) == teacher, has_animal(Eric) == cat, has_color(Eric) == blue), And(lives(Bob) == 4, has_houseStyle(Bob) == victorian, has_drink(Bob) == tea, has_occupation(Bob) == lawyer, has_animal(Bob) == dog, has_color(Bob) == green), And(lives(Alice) == 5, has_houseStyle(Alice) == colonial, has_drink(Alice) == coffee, has_occupation(Alice) == engineer, has_animal(Alice) == horse, has_color(Alice) == white), And(lives(Peter) == 6, has_houseStyle(Peter) == mediterranean, has_drink(Peter) == boba_tea, has_occupation(Peter) == doctor, has_animal(Peter) == rabbit, has_color(Peter) == yellow) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-15",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Alice`, `Eric`\n - Each person has a unique favorite drink: `milk`, `root beer`, `coffee`, `water`, `tea`\n - Each person has a unique type of pet: `dog`, `bird`, `hamster`, `cat`, `fish`\n - Each mother is accompanied by their child: `Timothy`, `Meredith`, `Fred`, `Bella`, `Samantha`\n - The mothers' names in different houses are unique: `Kailyn`, `Penny`, `Aniya`, `Janelle`, `Holly`\n - People have unique favorite sports: `tennis`, `soccer`, `swimming`, `baseball`, `basketball`\n\nClues:\n1. The tea drinker is the person who loves tennis.\n2. The person whose mother's name is Aniya is Arnold.\n3. The person whose mother's name is Janelle is somewhere to the right of the person who loves swimming.\n4. The person whose mother's name is Janelle is the person's child is named Bella.\n5. The person's child is named Samantha is the person who likes milk.\n6. The coffee drinker is not in the fifth house.\n7. Bob is the person's child is named Bella.\n8. The person who loves swimming and the person who loves basketball are next to each other.\n9. The person who is the mother of Timothy is somewhere to the left of the person who owns a dog.\n10. The person whose mother's name is Kailyn is in the fifth house.\n11. The root beer lover is Alice.\n12. The person whose mother's name is Holly is directly left of the root beer lover.\n13. The person who likes milk is not in the second house.\n14. There is one house between the person who has a cat and the person who loves baseball.\n15. The person whose mother's name is Penny is somewhere to the right of the person who loves tennis.\n16. The person's child is named Fred is the person who keeps a pet bird.\n17. The person who likes milk is directly left of the person with a pet hamster.\n18. The person who keeps a pet bird is Alice.\n19. There are two houses between Eric and The person whose mother's name is Aniya.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Pet",
        "Children",
        "Mother",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "tea",
          "fish",
          "Timothy",
          "Holly",
          "tennis"
        ],
        [
          "2",
          "Alice",
          "root beer",
          "bird",
          "Fred",
          "Penny",
          "swimming"
        ],
        [
          "3",
          "Bob",
          "coffee",
          "cat",
          "Bella",
          "Janelle",
          "basketball"
        ],
        [
          "4",
          "Arnold",
          "milk",
          "dog",
          "Samantha",
          "Aniya",
          "soccer"
        ],
        [
          "5",
          "Peter",
          "water",
          "hamster",
          "Meredith",
          "Kailyn",
          "baseball"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Alice, Eric])\ndrinks = EnumSort([milk, root_beer, coffee, water, tea])\npets = EnumSort([dog, bird, hamster, cat, fish])\nchildren = EnumSort([Timothy, Meredith, Fred, Bella, Samantha])\nmothers = EnumSort([Kailyn, Penny, Aniya, Janelle, Holly])\nsports = EnumSort([tennis, soccer, swimming, baseball, basketball])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_pet = Function([people] -> [pets])\nhas_child = Function([people] -> [children])\nhas_mother = Function([people] -> [mothers])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The tea drinker is the person who loves tennis\nThe person whose mother's name is Aniya is Arnold\nThe person whose mother's name is Janelle is somewhere to the right of the person who loves swimming\nThe person whose mother's name is Janelle is the person's child is named Bella\nThe person's child is named Samantha is the person who likes milk\nThe coffee drinker is not in the fifth house\nBob is the person's child is named Bella\nThe person who loves swimming and the person who loves basketball are next to each other\nThe person who is the mother of Timothy is somewhere to the left of the person who owns a dog\nThe person whose mother's name is Kailyn is in the fifth house\nThe root beer lover is Alice\nThe person whose mother's name is Holly is directly left of the root beer lover\nThe person who likes milk is not in the second house\nThere is one house between the person who has a cat and the person who loves baseball\nThe person whose mother's name is Penny is somewhere to the right of the person who loves tennis\nThe person's child is named Fred is the person who keeps a pet bird\nThe person who likes milk is directly left of the person with a pet hamster\nThe person who keeps a pet bird is Alice\nThere are two houses between Eric and The person whose mother's name is Aniya",
    "queries": "And( And(lives(Eric) == 1, has_drink(Eric) == tea, has_pet(Eric) == fish, has_child(Eric) == Timothy, has_mother(Eric) == Holly, has_sport(Eric) == tennis), And(lives(Alice) == 2, has_drink(Alice) == root_beer, has_pet(Alice) == bird, has_child(Alice) == Fred, has_mother(Alice) == Penny, has_sport(Alice) == swimming), And(lives(Bob) == 3, has_drink(Bob) == coffee, has_pet(Bob) == cat, has_child(Bob) == Bella, has_mother(Bob) == Janelle, has_sport(Bob) == basketball), And(lives(Arnold) == 4, has_drink(Arnold) == milk, has_pet(Arnold) == dog, has_child(Arnold) == Samantha, has_mother(Arnold) == Aniya, has_sport(Arnold) == soccer), And(lives(Peter) == 5, has_drink(Peter) == water, has_pet(Peter) == hamster, has_child(Peter) == Meredith, has_mother(Peter) == Kailyn, has_sport(Peter) == baseball) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-35",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Carol`, `Alice`, `Peter`, `Arnold`, `Eric`\n - People have unique heights: `average`, `super tall`, `very short`, `short`, `very tall`, `tall`\n - Each person has a unique favorite drink: `coffee`, `milk`, `boba tea`, `root beer`, `tea`, `water`\n - Each person has a favorite color: `blue`, `yellow`, `red`, `green`, `purple`, `white`\n - Each person lives in a unique style of house: `mediterranean`, `colonial`, `modern`, `ranch`, `victorian`, `craftsman`\n - They all have a unique favorite flower: `lilies`, `roses`, `iris`, `daffodils`, `carnations`, `tulips`\n\nClues:\n1. Eric is not in the second house.\n2. The coffee drinker is somewhere to the right of the person residing in a Victorian house.\n3. The person who is very tall is directly left of the person in a Craftsman-style house.\n4. The person living in a colonial-style house is the person who likes milk.\n5. The root beer lover is directly left of the person whose favorite color is green.\n6. The person who loves yellow is the person who loves the boquet of lilies.\n7. Arnold is the person whose favorite color is red.\n8. The person who loves the rose bouquet is Bob.\n9. The person who is very tall is the root beer lover.\n10. Alice is somewhere to the left of the person who loves a bouquet of daffodils.\n11. The boba tea drinker is Carol.\n12. There is one house between the person in a ranch-style home and the person who loves the boquet of iris.\n13. The person who loves a carnations arrangement is the tea drinker.\n14. The boba tea drinker is the person in a Mediterranean-style villa.\n15. The person who loves a bouquet of daffodils is in the second house.\n16. The person who is tall and the person who loves the vase of tulips are next to each other.\n17. Carol is somewhere to the left of the person who loves the boquet of iris.\n18. The person who has an average height is directly left of Arnold.\n19. The person who is super tall and Eric are next to each other.\n20. The person who loves the vase of tulips is somewhere to the right of the person who loves the boquet of lilies.\n21. The person who is super tall is the tea drinker.\n22. The person who is short is Carol.\n23. The coffee drinker is the person who loves purple.\n24. The person who loves blue is somewhere to the right of the person who loves a carnations arrangement.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Drink",
        "Color",
        "HouseStyle",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "very tall",
          "root beer",
          "yellow",
          "victorian",
          "lilies"
        ],
        [
          "2",
          "Peter",
          "tall",
          "water",
          "green",
          "craftsman",
          "daffodils"
        ],
        [
          "3",
          "Carol",
          "short",
          "boba tea",
          "white",
          "mediterranean",
          "tulips"
        ],
        [
          "4",
          "Bob",
          "average",
          "coffee",
          "purple",
          "ranch",
          "roses"
        ],
        [
          "5",
          "Arnold",
          "super tall",
          "tea",
          "red",
          "modern",
          "carnations"
        ],
        [
          "6",
          "Eric",
          "very short",
          "milk",
          "blue",
          "colonial",
          "iris"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Carol, Alice, Peter, Arnold, Eric])\nheights = EnumSort([average, super_tall, very_short, short, very_tall, tall])\ndrinks = EnumSort([coffee, milk, boba_tea, root_beer, tea, water])\ncolors = EnumSort([blue, yellow, red, green, purple, white])\nhouse_styles = EnumSort([mediterranean, colonial, modern, ranch, victorian, craftsman])\nflowers = EnumSort([lilies, roses, iris, daffodils, carnations, tulips])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_drink = Function([people] -> [drinks])\nhas_color = Function([people] -> [colors])\nhas_house_style = Function([people] -> [house_styles])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Eric is not in the second house\nThe coffee drinker is somewhere to the right of the person residing in a Victorian house\nThe person who is very tall is directly left of the person in a Craftsman-style house\nThe person living in a colonial-style house is the person who likes milk\nThe root beer lover is directly left of the person whose favorite color is green\nThe person who loves yellow is the person who loves the boquet of lilies\nArnold is the person whose favorite color is red\nThe person who loves the rose bouquet is Bob\nThe person who is very tall is the root beer lover\nAlice is somewhere to the left of the person who loves a bouquet of daffodils\nThe boba tea drinker is Carol\nThere is one house between the person in a ranch-style home and the person who loves the boquet of iris\nThe person who loves a carnations arrangement is the tea drinker\nThe boba tea drinker is the person in a Mediterranean-style villa\nThe person who loves a bouquet of daffodils is in the second house\nThe person who is tall and the person who loves the vase of tulips are next to each other\nCarol is somewhere to the left of the person who loves the boquet of iris\nThe person who has an average height is directly left of Arnold\nThe person who is super tall and Eric are next to each other\nThe person who loves the vase of tulips is somewhere to the right of the person who loves the boquet of lilies\nThe person who is super tall is the tea drinker\nThe person who is short is Carol\nThe coffee drinker is the person who loves purple\nThe person who loves blue is somewhere to the right of the person who loves a carnations arrangement",
    "queries": "And( And(lives(Alice) == 1, has_height(Alice) == very_tall, has_drink(Alice) == root_beer, has_color(Alice) == yellow, has_house_style(Alice) == victorian, has_flower(Alice) == lilies), And(lives(Peter) == 2, has_height(Peter) == tall, has_drink(Peter) == water, has_color(Peter) == green, has_house_style(Peter) == craftsman, has_flower(Peter) == daffodils), And(lives(Carol) == 3, has_height(Carol) == short, has_drink(Carol) == boba_tea, has_color(Carol) == white, has_house_style(Carol) == mediterranean, has_flower(Carol) == tulips), And(lives(Bob) == 4, has_height(Bob) == average, has_drink(Bob) == coffee, has_color(Bob) == purple, has_house_style(Bob) == ranch, has_flower(Bob) == roses), And(lives(Arnold) == 5, has_height(Arnold) == super_tall, has_drink(Arnold) == tea, has_color(Arnold) == red, has_house_style(Arnold) == modern, has_flower(Arnold) == carnations), And(lives(Eric) == 6, has_height(Eric) == very_short, has_drink(Eric) == milk, has_color(Eric) == blue, has_house_style(Eric) == colonial, has_flower(Eric) == iris) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-14",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Bob`, `Arnold`\n - People have unique favorite music genres: `rock`, `classical`, `hip hop`, `pop`, `jazz`\n - Each person has a unique hobby: `photography`, `knitting`, `cooking`, `painting`, `gardening`\n - Each person prefers a unique type of vacation: `camping`, `city`, `beach`, `mountain`, `cruise`\n - Each mother is accompanied by their child: `Timothy`, `Samantha`, `Fred`, `Bella`, `Meredith`\n - They all have a unique favorite flower: `lilies`, `roses`, `tulips`, `carnations`, `daffodils`\n\nClues:\n1. The person who is the mother of Timothy is somewhere to the right of the person who likes going on cruises.\n2. The photography enthusiast is somewhere to the right of the person who loves hip-hop music.\n3. The person who paints as a hobby is the person who enjoys camping trips.\n4. The person who loves the boquet of lilies is somewhere to the right of the person who prefers city breaks.\n5. The person who loves a carnations arrangement is the person who loves cooking.\n6. The person who loves a bouquet of daffodils is the person who loves classical music.\n7. The person's child is named Samantha is somewhere to the right of Arnold.\n8. The person who loves the rose bouquet is the person who likes going on cruises.\n9. The person who loves hip-hop music is the person who loves the vase of tulips.\n10. The person who is the mother of Timothy is somewhere to the left of the person who prefers city breaks.\n11. The person who loves jazz music is the person's child is named Bella.\n12. Eric is the person who likes going on cruises.\n13. The person who loves a carnations arrangement is directly left of the person who loves jazz music.\n14. The person who enjoys mountain retreats is the person who is the mother of Timothy.\n15. The person who loves the boquet of lilies is Bob.\n16. The person who enjoys gardening is directly left of the person who is the mother of Timothy.\n17. The person's child is named Fred is the person who loves the boquet of lilies.\n18. Alice is the person who loves rock music.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Hobby",
        "Vacation",
        "Children",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "rock",
          "cooking",
          "beach",
          "Meredith",
          "carnations"
        ],
        [
          "2",
          "Eric",
          "jazz",
          "gardening",
          "cruise",
          "Bella",
          "roses"
        ],
        [
          "3",
          "Arnold",
          "hip hop",
          "knitting",
          "mountain",
          "Timothy",
          "tulips"
        ],
        [
          "4",
          "Peter",
          "classical",
          "photography",
          "city",
          "Samantha",
          "daffodils"
        ],
        [
          "5",
          "Bob",
          "pop",
          "painting",
          "camping",
          "Fred",
          "lilies"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Bob, Arnold])\nmusicGenres = EnumSort([rock, classical, hip_hop, pop, jazz])\nhobbies = EnumSort([photography, knitting, cooking, painting, gardening])\nvacations = EnumSort([camping, city, beach, mountain, cruise])\nchildren = EnumSort([Timothy, Samantha, Fred, Bella, Meredith])\nflowers = EnumSort([lilies, roses, tulips, carnations, daffodils])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_hobby = Function([people] -> [hobbies])\nhas_vacation = Function([people] -> [vacations])\nhas_child = Function([people] -> [children])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who is the mother of Timothy is somewhere to the right of the person who likes going on cruises\nThe photography enthusiast is somewhere to the right of the person who loves hip-hop music\nThe person who paints as a hobby is the person who enjoys camping trips\nThe person who loves the boquet of lilies is somewhere to the right of the person who prefers city breaks\nThe person who loves a carnations arrangement is the person who loves cooking\nThe person who loves a bouquet of daffodils is the person who loves classical music\nThe person's child is named Samantha is somewhere to the right of Arnold\nThe person who loves the rose bouquet is the person who likes going on cruises\nThe person who loves hip-hop music is the person who loves the vase of tulips\nThe person who is the mother of Timothy is somewhere to the left of the person who prefers city breaks\nThe person who loves jazz music is the person's child is named Bella\nEric is the person who likes going on cruises\nThe person who loves a carnations arrangement is directly left of the person who loves jazz music\nThe person who enjoys mountain retreats is the person who is the mother of Timothy\nThe person who loves the boquet of lilies is Bob\nThe person who enjoys gardening is directly left of the person who is the mother of Timothy\nThe person's child is named Fred is the person who loves the boquet of lilies\nAlice is the person who loves rock music",
    "queries": "And( And(lives(Alice) == 1, has_musicGenre(Alice) == rock, has_hobby(Alice) == cooking, has_vacation(Alice) == beach, has_child(Alice) == Meredith, has_flower(Alice) == carnations), And(lives(Eric) == 2, has_musicGenre(Eric) == jazz, has_hobby(Eric) == gardening, has_vacation(Eric) == cruise, has_child(Eric) == Bella, has_flower(Eric) == roses), And(lives(Arnold) == 3, has_musicGenre(Arnold) == hip_hop, has_hobby(Arnold) == knitting, has_vacation(Arnold) == mountain, has_child(Arnold) == Timothy, has_flower(Arnold) == tulips), And(lives(Peter) == 4, has_musicGenre(Peter) == classical, has_hobby(Peter) == photography, has_vacation(Peter) == city, has_child(Peter) == Samantha, has_flower(Peter) == daffodils), And(lives(Bob) == 5, has_musicGenre(Bob) == pop, has_hobby(Bob) == painting, has_vacation(Bob) == camping, has_child(Bob) == Fred, has_flower(Bob) == lilies) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-1",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Arnold`, `Alice`\n - Each person has a unique birthday month: `april`, `sept`, `jan`, `feb`\n - Everyone has a unique favorite cigar: `dunhill`, `prince`, `pall mall`, `blue master`\n - People use unique phone models: `google pixel 6`, `samsung galaxy s21`, `oneplus 9`, `iphone 13`\n - They all have a unique favorite flower: `lilies`, `roses`, `carnations`, `daffodils`\n - People have unique heights: `average`, `short`, `tall`, `very short`\n\nClues:\n1. The person who loves a bouquet of daffodils is Arnold.\n2. The person whose birthday is in April is directly left of the person who smokes Blue Master.\n3. The person who is short is the person who uses an iPhone 13.\n4. The person who uses a Samsung Galaxy S21 is the person who is tall.\n5. Eric is the person who uses a OnePlus 9.\n6. The person who uses a Samsung Galaxy S21 is directly left of the person who uses a Google Pixel 6.\n7. The person whose birthday is in February is Alice.\n8. The Prince smoker is somewhere to the right of the person who is short.\n9. The Prince smoker is the person whose birthday is in February.\n10. The person who uses a OnePlus 9 is directly left of the person who loves the rose bouquet.\n11. The person partial to Pall Mall is somewhere to the left of the person who loves the boquet of lilies.\n12. The person who has an average height and the person whose birthday is in September are next to each other.\n13. The person who loves a bouquet of daffodils is in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Cigar",
        "PhoneModel",
        "Flower",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "april",
          "pall mall",
          "oneplus 9",
          "carnations",
          "average"
        ],
        [
          "2",
          "Peter",
          "sept",
          "blue master",
          "iphone 13",
          "roses",
          "short"
        ],
        [
          "3",
          "Alice",
          "feb",
          "prince",
          "samsung galaxy s21",
          "lilies",
          "tall"
        ],
        [
          "4",
          "Arnold",
          "jan",
          "dunhill",
          "google pixel 6",
          "daffodils",
          "very short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Arnold, Alice])\nmonths = EnumSort([april, sept, jan, feb])\ncigars = EnumSort([dunhill, prince, pall_mall, blue_master])\nphones = EnumSort([google_pixel_6, samsung_galaxy_s21, oneplus_9, iphone_13])\nflowers = EnumSort([lilies, roses, carnations, daffodils])\nheights = EnumSort([average, short, tall, very_short])\nlives = Function([people] -> [int])\nhas_month = Function([people] -> [months])\nhas_cigar = Function([people] -> [cigars])\nhas_phone = Function([people] -> [phones])\nhas_flower = Function([people] -> [flowers])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves a bouquet of daffodils is Arnold\nThe person whose birthday is in April is directly left of the person who smokes Blue Master\nThe person who is short is the person who uses an iPhone 13\nThe person who uses a Samsung Galaxy S21 is the person who is tall\nEric is the person who uses a OnePlus 9\nThe person who uses a Samsung Galaxy S21 is directly left of the person who uses a Google Pixel 6\nThe person whose birthday is in February is Alice\nThe Prince smoker is somewhere to the right of the person who is short\nThe Prince smoker is the person whose birthday is in February\nThe person who uses a OnePlus 9 is directly left of the person who loves the rose bouquet\nThe person partial to Pall Mall is somewhere to the left of the person who loves the boquet of lilies\nThe person who has an average height and the person whose birthday is in September are next to each other\nThe person who loves a bouquet of daffodils is in the fourth house",
    "queries": "And( And(lives(Eric) == 1, has_month(Eric) == april, has_cigar(Eric) == pall_mall, has_phone(Eric) == oneplus_9, has_flower(Eric) == carnations, has_height(Eric) == average), And(lives(Peter) == 2, has_month(Peter) == sept, has_cigar(Peter) == blue_master, has_phone(Peter) == iphone_13, has_flower(Peter) == roses, has_height(Peter) == short), And(lives(Alice) == 3, has_month(Alice) == feb, has_cigar(Alice) == prince, has_phone(Alice) == samsung_galaxy_s21, has_flower(Alice) == lilies, has_height(Alice) == tall), And(lives(Arnold) == 4, has_month(Arnold) == jan, has_cigar(Arnold) == dunhill, has_phone(Arnold) == google_pixel_6, has_flower(Arnold) == daffodils, has_height(Arnold) == very_short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-30",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Carol`, `Alice`, `Arnold`, `Peter`, `Bob`\n - People have unique favorite book genres: `historical fiction`, `science fiction`, `fantasy`, `romance`, `mystery`, `biography`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `samsung galaxy s21`, `oneplus 9`, `huawei p50`, `xiaomi mi 11`\n - Each person has a unique favorite drink: `tea`, `water`, `boba tea`, `milk`, `root beer`, `coffee`\n\nClues:\n1. The boba tea drinker is the person who uses a Xiaomi Mi 11.\n2. Eric is the root beer lover.\n3. The person who loves science fiction books is the person who likes milk.\n4. The person who likes milk is somewhere to the right of Eric.\n5. Arnold is the person who uses a Huawei P50.\n6. The person who loves romance books is not in the fourth house.\n7. Alice is the person who uses an iPhone 13.\n8. The person who loves fantasy books is somewhere to the right of Bob.\n9. There are two houses between the person who uses an iPhone 13 and the person who loves fantasy books.\n10. The root beer lover is directly left of Peter.\n11. The person who uses an iPhone 13 and the person who loves science fiction books are next to each other.\n12. The person who uses a Samsung Galaxy S21 is the person who loves romance books.\n13. The tea drinker is the person who uses a Huawei P50.\n14. There is one house between the person who loves romance books and the person who uses a OnePlus 9.\n15. There are two houses between the person who loves biography books and the boba tea drinker.\n16. The person who loves historical fiction books is somewhere to the right of the root beer lover.\n17. There is one house between the one who only drinks water and the person who uses a Huawei P50.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "PhoneModel",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "mystery",
          "google pixel 6",
          "root beer"
        ],
        [
          "2",
          "Peter",
          "romance",
          "samsung galaxy s21",
          "coffee"
        ],
        [
          "3",
          "Alice",
          "biography",
          "iphone 13",
          "water"
        ],
        [
          "4",
          "Bob",
          "science fiction",
          "oneplus 9",
          "milk"
        ],
        [
          "5",
          "Arnold",
          "historical fiction",
          "huawei p50",
          "tea"
        ],
        [
          "6",
          "Carol",
          "fantasy",
          "xiaomi mi 11",
          "boba tea"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Carol, Alice, Arnold, Peter, Bob])\nbookGenres = EnumSort([historical_fiction, science_fiction, fantasy, romance, mystery, biography])\nphoneModels = EnumSort([iphone_13, google_pixel_6, samsung_galaxy_s21, oneplus_9, huawei_p50, xiaomi_mi_11])\ndrinks = EnumSort([tea, water, boba_tea, milk, root_beer, coffee])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nuses_phone = Function([people] -> [phoneModels])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The boba tea drinker is the person who uses a Xiaomi Mi 11\nEric is the root beer lover\nThe person who loves science fiction books is the person who likes milk\nThe person who likes milk is somewhere to the right of Eric\nArnold is the person who uses a Huawei P50\nThe person who loves romance books is not in the fourth house\nAlice is the person who uses an iPhone 13\nThe person who loves fantasy books is somewhere to the right of Bob\nThere are two houses between the person who uses an iPhone 13 and the person who loves fantasy books\nThe root beer lover is directly left of Peter\nThe person who uses an iPhone 13 and the person who loves science fiction books are next to each other\nThe person who uses a Samsung Galaxy S21 is the person who loves romance books\nThe tea drinker is the person who uses a Huawei P50\nThere is one house between the person who loves romance books and the person who uses a OnePlus 9\nThere are two houses between the person who loves biography books and the boba tea drinker\nThe person who loves historical fiction books is somewhere to the right of the root beer lover\nThere is one house between the one who only drinks water and the person who uses a Huawei P50",
    "queries": "And( And(lives(Eric) == 1, has_bookGenre(Eric) == mystery, uses_phone(Eric) == google_pixel_6, has_drink(Eric) == root_beer), And(lives(Peter) == 2, has_bookGenre(Peter) == romance, uses_phone(Peter) == samsung_galaxy_s21, has_drink(Peter) == coffee), And(lives(Alice) == 3, has_bookGenre(Alice) == biography, uses_phone(Alice) == iphone_13, has_drink(Alice) == water), And(lives(Bob) == 4, has_bookGenre(Bob) == science_fiction, uses_phone(Bob) == oneplus_9, has_drink(Bob) == milk), And(lives(Arnold) == 5, has_bookGenre(Arnold) == historical_fiction, uses_phone(Arnold) == huawei_p50, has_drink(Arnold) == tea), And(lives(Carol) == 6, has_bookGenre(Carol) == fantasy, uses_phone(Carol) == xiaomi_mi_11, has_drink(Carol) == boba_tea) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-12",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Arnold`\n - Each person lives in a unique style of house: `victorian`, `ranch`, `craftsman`, `colonial`\n - Everyone has a unique favorite cigar: `pall mall`, `dunhill`, `blue master`, `prince`\n - Each person has an occupation: `doctor`, `teacher`, `engineer`, `artist`\n - They all have a unique favorite flower: `lilies`, `daffodils`, `roses`, `carnations`\n - The people keep unique animals: `horse`, `bird`, `fish`, `cat`\n\nClues:\n1. The fish enthusiast is somewhere to the right of Eric.\n2. The person who is an engineer is Arnold.\n3. The person who loves a carnations arrangement is the person in a ranch-style home.\n4. Alice is the person in a Craftsman-style house.\n5. The person partial to Pall Mall is the person who loves a bouquet of daffodils.\n6. The cat lover is Arnold.\n7. The Dunhill smoker is Peter.\n8. The person living in a colonial-style house is not in the fourth house.\n9. The person who is a teacher is the bird keeper.\n10. The person residing in a Victorian house is Peter.\n11. The person who loves the boquet of lilies is the person who smokes Blue Master.\n12. Peter is somewhere to the right of the person who is an artist.\n13. The person who is an engineer and the person who is a teacher are next to each other.\n14. The person who is a doctor is the person who loves a carnations arrangement.\n15. The person partial to Pall Mall is the person living in a colonial-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Cigar",
        "Occupation",
        "Flower",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "ranch",
          "prince",
          "doctor",
          "carnations",
          "horse"
        ],
        [
          "2",
          "Alice",
          "craftsman",
          "blue master",
          "artist",
          "lilies",
          "fish"
        ],
        [
          "3",
          "Arnold",
          "colonial",
          "pall mall",
          "engineer",
          "daffodils",
          "cat"
        ],
        [
          "4",
          "Peter",
          "victorian",
          "dunhill",
          "teacher",
          "roses",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Arnold])\nhouseStyles = EnumSort([victorian, ranch, craftsman, colonial])\ncigars = EnumSort([pall_mall, dunhill, blue_master, prince])\noccupations = EnumSort([doctor, teacher, engineer, artist])\nflowers = EnumSort([lilies, daffodils, roses, carnations])\nanimals = EnumSort([horse, bird, fish, cat])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_cigar = Function([people] -> [cigars])\nhas_occupation = Function([people] -> [occupations])\nhas_flower = Function([people] -> [flowers])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The fish enthusiast is somewhere to the right of Eric\nThe person who is an engineer is Arnold\nThe person who loves a carnations arrangement is the person in a ranch-style home\nAlice is the person in a Craftsman-style house\nThe person partial to Pall Mall is the person who loves a bouquet of daffodils\nThe cat lover is Arnold\nThe Dunhill smoker is Peter\nThe person living in a colonial-style house is not in the fourth house\nThe person who is a teacher is the bird keeper\nThe person residing in a Victorian house is Peter\nThe person who loves the boquet of lilies is the person who smokes Blue Master\nPeter is somewhere to the right of the person who is an artist\nThe person who is an engineer and the person who is a teacher are next to each other\nThe person who is a doctor is the person who loves a carnations arrangement\nThe person partial to Pall Mall is the person living in a colonial-style house",
    "queries": "And( And( lives(Eric) == 1, has_houseStyle(Eric) == ranch, has_cigar(Eric) == prince, has_occupation(Eric) == doctor, has_flower(Eric) == carnations, has_animal(Eric) == horse ), And( lives(Alice) == 2, has_houseStyle(Alice) == craftsman, has_cigar(Alice) == blue_master, has_occupation(Alice) == artist, has_flower(Alice) == lilies, has_animal(Alice) == fish ), And( lives(Arnold) == 3, has_houseStyle(Arnold) == colonial, has_cigar(Arnold) == pall_mall, has_occupation(Arnold) == engineer, has_flower(Arnold) == daffodils, has_animal(Arnold) == cat ), And( lives(Peter) == 4, has_houseStyle(Peter) == victorian, has_cigar(Peter) == dunhill, has_occupation(Peter) == teacher, has_flower(Peter) == roses, has_animal(Peter) == bird ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-6",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Peter`, `Bob`, `Eric`, `Arnold`, `Alice`\n - Each person has a unique birthday month: `jan`, `may`, `mar`, `feb`, `april`, `sept`\n - Each person has a unique type of pet: `rabbit`, `bird`, `cat`, `dog`, `fish`, `hamster`\n - People have unique favorite music genres: `hip hop`, `rock`, `pop`, `country`, `classical`, `jazz`\n - People have unique favorite book genres: `fantasy`, `romance`, `historical fiction`, `mystery`, `biography`, `science fiction`\n\nClues:\n1. The person with an aquarium of fish is not in the first house.\n2. The person who loves country music is the person whose birthday is in February.\n3. Arnold is directly left of the person whose birthday is in May.\n4. There are two houses between the person who loves science fiction books and Alice.\n5. The person who loves biography books is Eric.\n6. The person with a pet hamster is Arnold.\n7. The person who loves biography books is the person whose birthday is in May.\n8. The person who loves pop music is the person who loves fantasy books.\n9. The person who loves historical fiction books is the person whose birthday is in February.\n10. The person who has a cat is the person whose birthday is in January.\n11. Bob is in the sixth house.\n12. The person who loves hip-hop music is the person whose birthday is in January.\n13. The person who loves pop music is directly left of the person who loves jazz music.\n14. The person who loves classical music is not in the third house.\n15. The person whose birthday is in March is somewhere to the left of Carol.\n16. Alice is the person whose birthday is in September.\n17. The person with an aquarium of fish is the person who loves country music.\n18. The person who owns a dog is not in the fifth house.\n19. The person who loves pop music is in the fifth house.\n20. Bob is the person who loves mystery books.\n21. The person who keeps a pet bird is the person whose birthday is in April.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Pet",
        "MusicGenre",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "jan",
          "cat",
          "hip hop",
          "romance"
        ],
        [
          "2",
          "Arnold",
          "mar",
          "hamster",
          "classical",
          "science fiction"
        ],
        [
          "3",
          "Eric",
          "may",
          "dog",
          "rock",
          "biography"
        ],
        [
          "4",
          "Carol",
          "feb",
          "fish",
          "country",
          "historical fiction"
        ],
        [
          "5",
          "Alice",
          "sept",
          "rabbit",
          "pop",
          "fantasy"
        ],
        [
          "6",
          "Bob",
          "april",
          "bird",
          "jazz",
          "mystery"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Peter, Bob, Eric, Arnold, Alice])\nbirthdayMonths = EnumSort([jan, may, mar, feb, april, sept])\npets = EnumSort([rabbit, bird, cat, dog, fish, hamster])\nmusicGenres = EnumSort([hip_hop, rock, pop, country, classical, jazz])\nbookGenres = EnumSort([fantasy, romance, historical_fiction, mystery, biography, science_fiction])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [birthdayMonths])\nhas_pet = Function([people] -> [pets])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with an aquarium of fish is not in the first house\nThe person who loves country music is the person whose birthday is in February\nArnold is directly left of the person whose birthday is in May\nThere are two houses between the person who loves science fiction books and Alice\nThe person who loves biography books is Eric\nThe person with a pet hamster is Arnold\nThe person who loves biography books is the person whose birthday is in May\nThe person who loves pop music is the person who loves fantasy books\nThe person who loves historical fiction books is the person whose birthday is in February\nThe person who has a cat is the person whose birthday is in January\nBob is in the sixth house\nThe person who loves hip-hop music is the person whose birthday is in January\nThe person who loves pop music is directly left of the person who loves jazz music\nThe person who loves classical music is not in the third house\nThe person whose birthday is in March is somewhere to the left of Carol\nAlice is the person whose birthday is in September\nThe person with an aquarium of fish is the person who loves country music\nThe person who owns a dog is not in the fifth house\nThe person who loves pop music is in the fifth house\nBob is the person who loves mystery books\nThe person who keeps a pet bird is the person whose birthday is in April",
    "queries": "And( And(lives(Peter) == 1, has_birthday(Peter) == jan, has_pet(Peter) == cat, has_musicGenre(Peter) == hip_hop, has_bookGenre(Peter) == romance), And(lives(Arnold) == 2, has_birthday(Arnold) == mar, has_pet(Arnold) == hamster, has_musicGenre(Arnold) == classical, has_bookGenre(Arnold) == science_fiction), And(lives(Eric) == 3, has_birthday(Eric) == may, has_pet(Eric) == dog, has_musicGenre(Eric) == rock, has_bookGenre(Eric) == biography), And(lives(Carol) == 4, has_birthday(Carol) == feb, has_pet(Carol) == fish, has_musicGenre(Carol) == country, has_bookGenre(Carol) == historical_fiction), And(lives(Alice) == 5, has_birthday(Alice) == sept, has_pet(Alice) == rabbit, has_musicGenre(Alice) == pop, has_bookGenre(Alice) == fantasy), And(lives(Bob) == 6, has_birthday(Bob) == april, has_pet(Bob) == bird, has_musicGenre(Bob) == jazz, has_bookGenre(Bob) == mystery) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-9",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Alice`, `Eric`\n - Each person has a unique favorite drink: `milk`, `root beer`, `coffee`, `tea`, `water`\n - Each person has a favorite color: `blue`, `green`, `white`, `yellow`, `red`\n - They all have a unique favorite flower: `daffodils`, `roses`, `lilies`, `tulips`, `carnations`\n - Each person has a unique hobby: `painting`, `cooking`, `photography`, `gardening`, `knitting`\n\nClues:\n1. Alice is not in the fourth house.\n2. The root beer lover is the person who enjoys gardening.\n3. The person whose favorite color is green is the coffee drinker.\n4. The person whose favorite color is green is the person who loves the boquet of lilies.\n5. The person who loves blue is somewhere to the right of the person who loves a bouquet of daffodils.\n6. The person who loves cooking is the person who loves blue.\n7. Eric is directly left of the tea drinker.\n8. The one who only drinks water is Peter.\n9. Arnold is the photography enthusiast.\n10. The person who loves white is the person who loves the rose bouquet.\n11. There is one house between the person who loves a carnations arrangement and the person whose favorite color is red.\n12. The person who loves cooking is somewhere to the left of the person who paints as a hobby.\n13. The one who only drinks water is in the third house.\n14. The person who loves a carnations arrangement is the root beer lover.\n15. The person who loves white is in the second house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Color",
        "Flower",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "root beer",
          "yellow",
          "carnations",
          "gardening"
        ],
        [
          "2",
          "Arnold",
          "tea",
          "white",
          "roses",
          "photography"
        ],
        [
          "3",
          "Peter",
          "water",
          "red",
          "daffodils",
          "knitting"
        ],
        [
          "4",
          "Bob",
          "milk",
          "blue",
          "tulips",
          "cooking"
        ],
        [
          "5",
          "Alice",
          "coffee",
          "green",
          "lilies",
          "painting"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Alice, Eric])\ndrinks = EnumSort([milk, root_beer, coffee, tea, water])\ncolors = EnumSort([blue, green, white, yellow, red])\nflowers = EnumSort([daffodils, roses, lilies, tulips, carnations])\nhobbies = EnumSort([painting, cooking, photography, gardening, knitting])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_color = Function([people] -> [colors])\nhas_flower = Function([people] -> [flowers])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Alice is not in the fourth house\nThe root beer lover is the person who enjoys gardening\nThe person whose favorite color is green is the coffee drinker\nThe person whose favorite color is green is the person who loves the boquet of lilies\nThe person who loves blue is somewhere to the right of the person who loves a bouquet of daffodils\nThe person who loves cooking is the person who loves blue\nEric is directly left of the tea drinker\nThe one who only drinks water is Peter\nArnold is the photography enthusiast\nThe person who loves white is the person who loves the rose bouquet\nThere is one house between the person who loves a carnations arrangement and the person whose favorite color is red\nThe person who loves cooking is somewhere to the left of the person who paints as a hobby\nThe one who only drinks water is in the third house\nThe person who loves a carnations arrangement is the root beer lover\nThe person who loves white is in the second house",
    "queries": "And( And(lives(Eric) == 1, has_drink(Eric) == root_beer, has_color(Eric) == yellow, has_flower(Eric) == carnations, has_hobby(Eric) == gardening), And(lives(Arnold) == 2, has_drink(Arnold) == tea, has_color(Arnold) == white, has_flower(Arnold) == roses, has_hobby(Arnold) == photography), And(lives(Peter) == 3, has_drink(Peter) == water, has_color(Peter) == red, has_flower(Peter) == daffodils, has_hobby(Peter) == knitting), And(lives(Bob) == 4, has_drink(Bob) == milk, has_color(Bob) == blue, has_flower(Bob) == tulips, has_hobby(Bob) == cooking), And(lives(Alice) == 5, has_drink(Alice) == coffee, has_color(Alice) == green, has_flower(Alice) == lilies, has_hobby(Alice) == painting) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-32",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Peter`, `Bob`, `Alice`\n - Everyone has a favorite smoothie: `watermelon`, `lime`, `cherry`, `dragonfruit`, `desert`\n - The people keep unique animals: `fish`, `bird`, `horse`, `cat`, `dog`\n - Each person prefers a unique type of vacation: `camping`, `beach`, `mountain`, `city`, `cruise`\n - Each person has a unique favorite drink: `root beer`, `water`, `milk`, `tea`, `coffee`\n\nClues:\n1. The person who keeps horses is the person who drinks Lime smoothies.\n2. There is one house between the Watermelon smoothie lover and the person who likes Cherry smoothies.\n3. Bob and the coffee drinker are next to each other.\n4. The fish enthusiast is the one who only drinks water.\n5. The bird keeper is Bob.\n6. The person who enjoys mountain retreats is directly left of the root beer lover.\n7. The person who loves beach vacations is somewhere to the left of the dog owner.\n8. Eric is the person who likes Cherry smoothies.\n9. The tea drinker is Alice.\n10. The person who prefers city breaks is somewhere to the right of the person who enjoys mountain retreats.\n11. Peter is somewhere to the left of the coffee drinker.\n12. Eric is the person who loves beach vacations.\n13. The person who enjoys mountain retreats is Alice.\n14. There are two houses between the Watermelon smoothie lover and Alice.\n15. The person who enjoys camping trips is not in the first house.\n16. The dog owner is not in the fifth house.\n17. The fish enthusiast and the Dragonfruit smoothie lover are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Animal",
        "Vacation",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "watermelon",
          "fish",
          "cruise",
          "water"
        ],
        [
          "2",
          "Bob",
          "dragonfruit",
          "bird",
          "camping",
          "milk"
        ],
        [
          "3",
          "Eric",
          "cherry",
          "cat",
          "beach",
          "coffee"
        ],
        [
          "4",
          "Alice",
          "desert",
          "dog",
          "mountain",
          "tea"
        ],
        [
          "5",
          "Arnold",
          "lime",
          "horse",
          "city",
          "root beer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Peter, Bob, Alice])\nsmoothies = EnumSort([watermelon, lime, cherry, dragonfruit, desert])\nanimals = EnumSort([fish, bird, horse, cat, dog])\nvacations = EnumSort([camping, beach, mountain, city, cruise])\ndrinks = EnumSort([root_beer, water, milk, tea, coffee])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_animal = Function([people] -> [animals])\nhas_vacation = Function([people] -> [vacations])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who keeps horses is the person who drinks Lime smoothies\nThere is one house between the Watermelon smoothie lover and the person who likes Cherry smoothies\nBob and the coffee drinker are next to each other\nThe fish enthusiast is the one who only drinks water\nThe bird keeper is Bob\nThe person who enjoys mountain retreats is directly left of the root beer lover\nThe person who loves beach vacations is somewhere to the left of the dog owner\nEric is the person who likes Cherry smoothies\nThe tea drinker is Alice\nThe person who prefers city breaks is somewhere to the right of the person who enjoys mountain retreats\nPeter is somewhere to the left of the coffee drinker\nEric is the person who loves beach vacations\nThe person who enjoys mountain retreats is Alice\nThere are two houses between the Watermelon smoothie lover and Alice\nThe person who enjoys camping trips is not in the first house\nThe dog owner is not in the fifth house\nThe fish enthusiast and the Dragonfruit smoothie lover are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_smoothie(Peter) == watermelon, has_animal(Peter) == fish, has_vacation(Peter) == cruise, has_drink(Peter) == water), And(lives(Bob) == 2, has_smoothie(Bob) == dragonfruit, has_animal(Bob) == bird, has_vacation(Bob) == camping, has_drink(Bob) == milk), And(lives(Eric) == 3, has_smoothie(Eric) == cherry, has_animal(Eric) == cat, has_vacation(Eric) == beach, has_drink(Eric) == coffee), And(lives(Alice) == 4, has_smoothie(Alice) == desert, has_animal(Alice) == dog, has_vacation(Alice) == mountain, has_drink(Alice) == tea), And(lives(Arnold) == 5, has_smoothie(Arnold) == lime, has_animal(Arnold) == horse, has_vacation(Arnold) == city, has_drink(Arnold) == root_beer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-11",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Eric`, `Arnold`\n - Each person has a unique hobby: `cooking`, `painting`, `gardening`, `photography`\n - The people keep unique animals: `horse`, `fish`, `cat`, `bird`\n - People have unique favorite book genres: `fantasy`, `mystery`, `romance`, `science fiction`\n - Each person has a unique birthday month: `april`, `jan`, `sept`, `feb`\n - People have unique favorite music genres: `pop`, `rock`, `classical`, `jazz`\n\nClues:\n1. The person who loves cooking is the person who loves romance books.\n2. The person whose birthday is in February is the person who loves pop music.\n3. Eric is not in the second house.\n4. The person who loves romance books is not in the fourth house.\n5. The person whose birthday is in February is the fish enthusiast.\n6. Alice is somewhere to the right of the person who loves fantasy books.\n7. The person who keeps horses is the person who loves rock music.\n8. The person who enjoys gardening is the person whose birthday is in April.\n9. The person who loves jazz music is the person who loves cooking.\n10. The person who loves rock music is the person who loves mystery books.\n11. The person who paints as a hobby is directly left of the person who loves romance books.\n12. Peter is the person who loves pop music.\n13. The person who enjoys gardening is Arnold.\n14. The person who loves rock music is directly left of the person whose birthday is in January.\n15. The person who loves cooking is not in the third house.\n16. The cat lover is somewhere to the right of the person who keeps horses.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "Animal",
        "BookGenre",
        "Birthday",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "painting",
          "fish",
          "fantasy",
          "feb",
          "pop"
        ],
        [
          "2",
          "Alice",
          "cooking",
          "bird",
          "romance",
          "sept",
          "jazz"
        ],
        [
          "3",
          "Arnold",
          "gardening",
          "horse",
          "mystery",
          "april",
          "rock"
        ],
        [
          "4",
          "Eric",
          "photography",
          "cat",
          "science fiction",
          "jan",
          "classical"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Eric, Arnold])\nhobbies = EnumSort([cooking, painting, gardening, photography])\nanimals = EnumSort([horse, fish, cat, bird])\nbookGenres = EnumSort([fantasy, mystery, romance, science_fiction])\nbirthMonths = EnumSort([april, jan, sept, feb])\nmusicGenres = EnumSort([pop, rock, classical, jazz])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_animal = Function([people] -> [animals])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_birthMonth = Function([people] -> [birthMonths])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves cooking is the person who loves romance books\nThe person whose birthday is in February is the person who loves pop music\nEric is not in the second house\nThe person who loves romance books is not in the fourth house\nThe person whose birthday is in February is the fish enthusiast\nAlice is somewhere to the right of the person who loves fantasy books\nThe person who keeps horses is the person who loves rock music\nThe person who enjoys gardening is the person whose birthday is in April\nThe person who loves jazz music is the person who loves cooking\nThe person who loves rock music is the person who loves mystery books\nThe person who paints as a hobby is directly left of the person who loves romance books\nPeter is the person who loves pop music\nThe person who enjoys gardening is Arnold\nThe person who loves rock music is directly left of the person whose birthday is in January\nThe person who loves cooking is not in the third house\nThe cat lover is somewhere to the right of the person who keeps horses",
    "queries": "And( And( lives(Peter) == 1, has_hobby(Peter) == painting, has_animal(Peter) == fish, has_bookGenre(Peter) == fantasy, has_birthMonth(Peter) == feb, has_musicGenre(Peter) == pop ), And( lives(Alice) == 2, has_hobby(Alice) == cooking, has_animal(Alice) == bird, has_bookGenre(Alice) == romance, has_birthMonth(Alice) == sept, has_musicGenre(Alice) == jazz ), And( lives(Arnold) == 3, has_hobby(Arnold) == gardening, has_animal(Arnold) == horse, has_bookGenre(Arnold) == mystery, has_birthMonth(Arnold) == april, has_musicGenre(Arnold) == rock ), And( lives(Eric) == 4, has_hobby(Eric) == photography, has_animal(Eric) == cat, has_bookGenre(Eric) == science_fiction, has_birthMonth(Eric) == jan, has_musicGenre(Eric) == classical ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-22",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Eric`, `Alice`, `Bob`\n - Each person prefers a unique type of vacation: `beach`, `mountain`, `cruise`, `city`, `camping`\n - Each person lives in a unique style of house: `ranch`, `modern`, `craftsman`, `colonial`, `victorian`\n - Each person has a unique level of education: `bachelor`, `doctorate`, `master`, `associate`, `high school`\n - The mothers' names in different houses are unique: `Aniya`, `Kailyn`, `Janelle`, `Penny`, `Holly`\n\nClues:\n1. The person whose mother's name is Aniya is the person in a ranch-style home.\n2. The person in a Craftsman-style house is Bob.\n3. The person with a high school diploma is not in the fourth house.\n4. Arnold and the person in a Craftsman-style house are next to each other.\n5. Arnold is The person whose mother's name is Penny.\n6. The person with an associate's degree is somewhere to the left of the person with a master's degree.\n7. Bob and Peter are next to each other.\n8. The person living in a colonial-style house is The person whose mother's name is Penny.\n9. The person whose mother's name is Holly is the person who enjoys camping trips.\n10. The person with a doctorate is the person who prefers city breaks.\n11. The person with a bachelor's degree is The person whose mother's name is Aniya.\n12. The person with an associate's degree is somewhere to the right of Eric.\n13. Arnold is directly left of the person who likes going on cruises.\n14. The person who enjoys camping trips is somewhere to the right of the person residing in a Victorian house.\n15. The person who enjoys mountain retreats is in the first house.\n16. The person whose mother's name is Janelle is the person with an associate's degree.\n17. The person with an associate's degree is directly left of Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "HouseStyle",
        "Education",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "mountain",
          "ranch",
          "bachelor",
          "Aniya"
        ],
        [
          "2",
          "Alice",
          "beach",
          "victorian",
          "associate",
          "Janelle"
        ],
        [
          "3",
          "Arnold",
          "city",
          "colonial",
          "doctorate",
          "Penny"
        ],
        [
          "4",
          "Bob",
          "cruise",
          "craftsman",
          "master",
          "Kailyn"
        ],
        [
          "5",
          "Peter",
          "camping",
          "modern",
          "high school",
          "Holly"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Eric, Alice, Bob])\nvacations = EnumSort([beach, mountain, cruise, city, camping])\nhouseStyles = EnumSort([ranch, modern, craftsman, colonial, victorian])\neducationLevels = EnumSort([bachelor, doctorate, master, associate, high_school])\nmothersNames = EnumSort([Aniya, Kailyn, Janelle, Penny, Holly])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nlives_in_houseStyle = Function([people] -> [houseStyles])\nhas_education = Function([people] -> [educationLevels])\nmothers_name = Function([people] -> [mothersNames])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose mother's name is Aniya is the person in a ranch-style home\nThe person in a Craftsman-style house is Bob\nThe person with a high school diploma is not in the fourth house\nArnold and the person in a Craftsman-style house are next to each other\nArnold is The person whose mother's name is Penny\nThe person with an associate's degree is somewhere to the left of the person with a master's degree\nBob and Peter are next to each other\nThe person living in a colonial-style house is The person whose mother's name is Penny\nThe person whose mother's name is Holly is the person who enjoys camping trips\nThe person with a doctorate is the person who prefers city breaks\nThe person with a bachelor's degree is The person whose mother's name is Aniya\nThe person with an associate's degree is somewhere to the right of Eric\nArnold is directly left of the person who likes going on cruises\nThe person who enjoys camping trips is somewhere to the right of the person residing in a Victorian house\nThe person who enjoys mountain retreats is in the first house\nThe person whose mother's name is Janelle is the person with an associate's degree\nThe person with an associate's degree is directly left of Arnold",
    "queries": "And( And(lives(Eric) == 1, prefers_vacation(Eric) == mountain, lives_in_houseStyle(Eric) == ranch, has_education(Eric) == bachelor, mothers_name(Eric) == Aniya), And(lives(Alice) == 2, prefers_vacation(Alice) == beach, lives_in_houseStyle(Alice) == victorian, has_education(Alice) == associate, mothers_name(Alice) == Janelle), And(lives(Arnold) == 3, prefers_vacation(Arnold) == city, lives_in_houseStyle(Arnold) == colonial, has_education(Arnold) == doctorate, mothers_name(Arnold) == Penny), And(lives(Bob) == 4, prefers_vacation(Bob) == cruise, lives_in_houseStyle(Bob) == craftsman, has_education(Bob) == master, mothers_name(Bob) == Kailyn), And(lives(Peter) == 5, prefers_vacation(Peter) == camping, lives_in_houseStyle(Peter) == modern, has_education(Peter) == high_school, mothers_name(Peter) == Holly) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-34",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Eric`, `Arnold`, `Bob`, `Carol`\n - The people are of nationalities: `dane`, `brit`, `norwegian`, `swede`, `german`, `chinese`\n - People have unique favorite book genres: `historical fiction`, `mystery`, `romance`, `fantasy`, `science fiction`, `biography`\n - The mothers' names in different houses are unique: `Holly`, `Aniya`, `Penny`, `Kailyn`, `Sarah`, `Janelle`\n\nClues:\n1. The person whose mother's name is Janelle is the Swedish person.\n2. Alice is the person who loves science fiction books.\n3. The person who loves romance books is not in the fifth house.\n4. Carol and Peter are next to each other.\n5. The person whose mother's name is Sarah is the Norwegian.\n6. There is one house between Arnold and the British person.\n7. The German and the person who loves historical fiction books are next to each other.\n8. There is one house between the German and Carol.\n9. The Swedish person is the person who loves fantasy books.\n10. Arnold is in the second house.\n11. The person whose mother's name is Sarah is in the third house.\n12. The person who loves historical fiction books is somewhere to the right of The person whose mother's name is Penny.\n13. The Chinese is not in the sixth house.\n14. There are two houses between Alice and the person who loves mystery books.\n15. Carol is somewhere to the right of Alice.\n16. Arnold is the Dane.\n17. The person whose mother's name is Aniya is in the fourth house.\n18. The person whose mother's name is Penny is somewhere to the left of the Swedish person.\n19. The person whose mother's name is Holly and Eric are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "BookGenre",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "german",
          "science fiction",
          "Penny"
        ],
        [
          "2",
          "Arnold",
          "dane",
          "historical fiction",
          "Kailyn"
        ],
        [
          "3",
          "Carol",
          "norwegian",
          "romance",
          "Sarah"
        ],
        [
          "4",
          "Peter",
          "brit",
          "mystery",
          "Aniya"
        ],
        [
          "5",
          "Bob",
          "chinese",
          "biography",
          "Holly"
        ],
        [
          "6",
          "Eric",
          "swede",
          "fantasy",
          "Janelle"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Eric, Arnold, Bob, Carol])\nnationalities = EnumSort([dane, brit, norwegian, swede, german, chinese])\nbookGenres = EnumSort([historical_fiction, mystery, romance, fantasy, science_fiction, biography])\nmothersNames = EnumSort([Holly, Aniya, Penny, Kailyn, Sarah, Janelle])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_mothersName = Function([people] -> [mothersNames])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose mother's name is Janelle is the Swedish person\nAlice is the person who loves science fiction books\nThe person who loves romance books is not in the fifth house\nCarol and Peter are next to each other\nThe person whose mother's name is Sarah is the Norwegian\nThere is one house between Arnold and the British person\nThe German and the person who loves historical fiction books are next to each other\nThere is one house between the German and Carol\nThe Swedish person is the person who loves fantasy books\nArnold is in the second house\nThe person whose mother's name is Sarah is in the third house\nThe person who loves historical fiction books is somewhere to the right of The person whose mother's name is Penny\nThe Chinese is not in the sixth house\nThere are two houses between Alice and the person who loves mystery books\nCarol is somewhere to the right of Alice\nArnold is the Dane\nThe person whose mother's name is Aniya is in the fourth house\nThe person whose mother's name is Penny is somewhere to the left of the Swedish person\nThe person whose mother's name is Holly and Eric are next to each other",
    "queries": "And( And(lives(Alice) == 1, has_nationality(Alice) == german, has_bookGenre(Alice) == science_fiction, has_mothersName(Alice) == Penny), And(lives(Arnold) == 2, has_nationality(Arnold) == dane, has_bookGenre(Arnold) == historical_fiction, has_mothersName(Arnold) == Kailyn), And(lives(Carol) == 3, has_nationality(Carol) == norwegian, has_bookGenre(Carol) == romance, has_mothersName(Carol) == Sarah), And(lives(Peter) == 4, has_nationality(Peter) == brit, has_bookGenre(Peter) == mystery, has_mothersName(Peter) == Aniya), And(lives(Bob) == 5, has_nationality(Bob) == chinese, has_bookGenre(Bob) == biography, has_mothersName(Bob) == Holly), And(lives(Eric) == 6, has_nationality(Eric) == swede, has_bookGenre(Eric) == fantasy, has_mothersName(Eric) == Janelle) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-13",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Arnold`, `Peter`\n - Everyone has a unique favorite cigar: `prince`, `dunhill`, `blue master`, `pall mall`\n - Each person lives in a unique style of house: `victorian`, `colonial`, `ranch`, `craftsman`\n - Each person has a unique birthday month: `april`, `sept`, `feb`, `jan`\n - Each person has an occupation: `teacher`, `artist`, `doctor`, `engineer`\n - Each mother is accompanied by their child: `Samantha`, `Bella`, `Meredith`, `Fred`\n\nClues:\n1. The person who is a doctor is the person's child is named Fred.\n2. The person's child is named Samantha and the person whose birthday is in January are next to each other.\n3. Arnold is the person whose birthday is in September.\n4. The person in a Craftsman-style house is the person who is an engineer.\n5. The Dunhill smoker is the person's child is named Samantha.\n6. Alice is directly left of Arnold.\n7. The person whose birthday is in April and the Prince smoker are next to each other.\n8. Arnold is the person who is a teacher.\n9. The person living in a colonial-style house is not in the first house.\n10. The person who smokes Blue Master is somewhere to the left of Eric.\n11. The person who smokes Blue Master is somewhere to the right of the person's child is named Fred.\n12. The person whose birthday is in April is somewhere to the left of the person who is an engineer.\n13. Eric is not in the fourth house.\n14. The person's child is named Bella is somewhere to the left of the person whose birthday is in April.\n15. The person in a ranch-style home is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "HouseStyle",
        "Birthday",
        "Occupation",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "pall mall",
          "victorian",
          "feb",
          "doctor",
          "Fred"
        ],
        [
          "2",
          "Arnold",
          "blue master",
          "ranch",
          "sept",
          "teacher",
          "Bella"
        ],
        [
          "3",
          "Eric",
          "dunhill",
          "colonial",
          "april",
          "artist",
          "Samantha"
        ],
        [
          "4",
          "Peter",
          "prince",
          "craftsman",
          "jan",
          "engineer",
          "Meredith"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Arnold, Peter])\ncigars = EnumSort([prince, dunhill, blue_master, pall_mall])\nhouseStyles = EnumSort([victorian, colonial, ranch, craftsman])\nmonths = EnumSort([april, sept, feb, jan])\noccupations = EnumSort([teacher, artist, doctor, engineer])\nchildren = EnumSort([Samantha, Bella, Meredith, Fred])\nlives = Function([people] -> [int])\nhas_cigar = Function([people] -> [cigars])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_month = Function([people] -> [months])\nhas_occupation = Function([people] -> [occupations])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who is a doctor is the person's child is named Fred\nThe person's child is named Samantha and the person whose birthday is in January are next to each other\nArnold is the person whose birthday is in September\nThe person in a Craftsman-style house is the person who is an engineer\nThe Dunhill smoker is the person's child is named Samantha\nAlice is directly left of Arnold\nThe person whose birthday is in April and the Prince smoker are next to each other\nArnold is the person who is a teacher\nThe person living in a colonial-style house is not in the first house\nThe person who smokes Blue Master is somewhere to the left of Eric\nThe person who smokes Blue Master is somewhere to the right of the person's child is named Fred\nThe person whose birthday is in April is somewhere to the left of the person who is an engineer\nEric is not in the fourth house\nThe person's child is named Bella is somewhere to the left of the person whose birthday is in April\nThe person in a ranch-style home is Arnold",
    "queries": "And( And( lives(Alice) == 1, has_cigar(Alice) == pall_mall, has_houseStyle(Alice) == victorian, has_month(Alice) == feb, has_occupation(Alice) == doctor, has_child(Alice) == Fred ), And( lives(Arnold) == 2, has_cigar(Arnold) == blue_master, has_houseStyle(Arnold) == ranch, has_month(Arnold) == sept, has_occupation(Arnold) == teacher, has_child(Arnold) == Bella ), And( lives(Eric) == 3, has_cigar(Eric) == dunhill, has_houseStyle(Eric) == colonial, has_month(Eric) == april, has_occupation(Eric) == artist, has_child(Eric) == Samantha ), And( lives(Peter) == 4, has_cigar(Peter) == prince, has_houseStyle(Peter) == craftsman, has_month(Peter) == jan, has_occupation(Peter) == engineer, has_child(Peter) == Meredith ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-35",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Eric`, `Arnold`, `Peter`\n - Each mother is accompanied by their child: `Samantha`, `Meredith`, `Timothy`, `Bella`, `Fred`\n - People have unique hair colors: `red`, `blonde`, `black`, `brown`, `gray`\n - Each person has a unique hobby: `gardening`, `cooking`, `painting`, `knitting`, `photography`\n - Each person has a unique type of pet: `hamster`, `bird`, `cat`, `fish`, `dog`\n - They all have a unique favorite flower: `tulips`, `roses`, `carnations`, `lilies`, `daffodils`\n\nClues:\n1. The person's child is named Samantha is somewhere to the right of the person's child is named Meredith.\n2. The person who loves the boquet of lilies is the person who keeps a pet bird.\n3. The person who has blonde hair is the person who loves the vase of tulips.\n4. Bob is the person who has brown hair.\n5. The person who paints as a hobby is the person with an aquarium of fish.\n6. The person's child is named Fred is Peter.\n7. The person with an aquarium of fish is somewhere to the left of the person who has a cat.\n8. The person with a pet hamster is the person's child is named Samantha.\n9. The person's child is named Bella is Arnold.\n10. The person's child is named Bella is in the third house.\n11. Peter is not in the first house.\n12. Alice is the person who has blonde hair.\n13. The person who loves the rose bouquet is not in the third house.\n14. The person who owns a dog is the person's child is named Fred.\n15. The person who has red hair is directly left of the person who has black hair.\n16. The photography enthusiast is directly left of Eric.\n17. The person who has black hair is the person who loves the rose bouquet.\n18. The person who loves a carnations arrangement is not in the third house.\n19. The person who enjoys knitting is somewhere to the right of the person's child is named Bella.\n20. The person who loves the boquet of lilies is the person who enjoys gardening.\n21. The person who keeps a pet bird is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "HairColor",
        "Hobby",
        "Pet",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "Meredith",
          "blonde",
          "painting",
          "fish",
          "tulips"
        ],
        [
          "2",
          "Peter",
          "Fred",
          "gray",
          "cooking",
          "dog",
          "carnations"
        ],
        [
          "3",
          "Arnold",
          "Bella",
          "red",
          "photography",
          "cat",
          "daffodils"
        ],
        [
          "4",
          "Eric",
          "Samantha",
          "black",
          "knitting",
          "hamster",
          "roses"
        ],
        [
          "5",
          "Bob",
          "Timothy",
          "brown",
          "gardening",
          "bird",
          "lilies"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Eric, Arnold, Peter])\nchildren = EnumSort([Samantha, Meredith, Timothy, Bella, Fred])\nhairColors = EnumSort([red, blonde, black, brown, gray])\nhobbies = EnumSort([gardening, cooking, painting, knitting, photography])\npets = EnumSort([hamster, bird, cat, fish, dog])\nflowers = EnumSort([tulips, roses, carnations, lilies, daffodils])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_hairColor = Function([people] -> [hairColors])\nhas_hobby = Function([people] -> [hobbies])\nhas_pet = Function([people] -> [pets])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person's child is named Samantha is somewhere to the right of the person's child is named Meredith\nThe person who loves the boquet of lilies is the person who keeps a pet bird\nThe person who has blonde hair is the person who loves the vase of tulips\nBob is the person who has brown hair\nThe person who paints as a hobby is the person with an aquarium of fish\nThe person's child is named Fred is Peter\nThe person with an aquarium of fish is somewhere to the left of the person who has a cat\nThe person with a pet hamster is the person's child is named Samantha\nThe person's child is named Bella is Arnold\nThe person's child is named Bella is in the third house\nPeter is not in the first house\nAlice is the person who has blonde hair\nThe person who loves the rose bouquet is not in the third house\nThe person who owns a dog is the person's child is named Fred\nThe person who has red hair is directly left of the person who has black hair\nThe photography enthusiast is directly left of Eric\nThe person who has black hair is the person who loves the rose bouquet\nThe person who loves a carnations arrangement is not in the third house\nThe person who enjoys knitting is somewhere to the right of the person's child is named Bella\nThe person who loves the boquet of lilies is the person who enjoys gardening\nThe person who keeps a pet bird is in the fifth house",
    "queries": "And( And(lives(Alice) == 1, has_child(Alice) == Meredith, has_hairColor(Alice) == blonde, has_hobby(Alice) == painting, has_pet(Alice) == fish, has_flower(Alice) == tulips), And(lives(Peter) == 2, has_child(Peter) == Fred, has_hairColor(Peter) == gray, has_hobby(Peter) == cooking, has_pet(Peter) == dog, has_flower(Peter) == carnations), And(lives(Arnold) == 3, has_child(Arnold) == Bella, has_hairColor(Arnold) == red, has_hobby(Arnold) == photography, has_pet(Arnold) == cat, has_flower(Arnold) == daffodils), And(lives(Eric) == 4, has_child(Eric) == Samantha, has_hairColor(Eric) == black, has_hobby(Eric) == knitting, has_pet(Eric) == hamster, has_flower(Eric) == roses), And(lives(Bob) == 5, has_child(Bob) == Timothy, has_hairColor(Bob) == brown, has_hobby(Bob) == gardening, has_pet(Bob) == bird, has_flower(Bob) == lilies) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-37",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Carol`, `Arnold`, `Bob`, `Eric`\n - Each mother is accompanied by their child: `Alice`, `Meredith`, `Samantha`, `Bella`, `Fred`, `Timothy`\n - Each person prefers a unique type of vacation: `cruise`, `camping`, `mountain`, `cultural`, `beach`, `city`\n - The people are of nationalities: `german`, `dane`, `chinese`, `norwegian`, `swede`, `brit`\n - Each person has a unique type of pet: `rabbit`, `fish`, `cat`, `bird`, `dog`, `hamster`\n\nClues:\n1. The person who loves beach vacations is directly left of Arnold.\n2. The Swedish person is the person who keeps a pet bird.\n3. Peter is not in the sixth house.\n4. There is one house between the Chinese and the person with a pet hamster.\n5. The German is directly left of the person's child is named Samantha.\n6. The Swedish person is the person who enjoys camping trips.\n7. The Dane is the person who prefers city breaks.\n8. The person's child is named Alice is somewhere to the right of the person who enjoys mountain retreats.\n9. The Dane is Carol.\n10. The person who owns a dog is not in the sixth house.\n11. The Swedish person is not in the sixth house.\n12. The Swedish person and Peter are next to each other.\n13. The person's child is named Alice is Peter.\n14. Arnold is the Norwegian.\n15. Bob is somewhere to the right of the Chinese.\n16. Carol is the person who owns a dog.\n17. The person with an aquarium of fish is not in the third house.\n18. The person who owns a rabbit is in the second house.\n19. The person's child is named Bella is somewhere to the left of the British person.\n20. The person's child is named Fred is in the third house.\n21. There is one house between Carol and the person who goes on cultural tours.\n22. Eric is the person who is the mother of Timothy.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "Vacation",
        "Nationality",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "Bella",
          "city",
          "dane",
          "dog"
        ],
        [
          "2",
          "Eric",
          "Timothy",
          "mountain",
          "brit",
          "rabbit"
        ],
        [
          "3",
          "Alice",
          "Fred",
          "cultural",
          "chinese",
          "cat"
        ],
        [
          "4",
          "Bob",
          "Meredith",
          "camping",
          "swede",
          "bird"
        ],
        [
          "5",
          "Peter",
          "Alice",
          "beach",
          "german",
          "hamster"
        ],
        [
          "6",
          "Arnold",
          "Samantha",
          "cruise",
          "norwegian",
          "fish"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Carol, Arnold, Bob, Eric])\nchildren = EnumSort([Alice, Meredith, Samantha, Bella, Fred, Timothy])\nvacations = EnumSort([cruise, camping, mountain, cultural, beach, city])\nnationalities = EnumSort([german, dane, chinese, norwegian, swede, brit])\npets = EnumSort([rabbit, fish, cat, bird, dog, hamster])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nprefers_vacation = Function([people] -> [vacations])\nhas_nationality = Function([people] -> [nationalities])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves beach vacations is directly left of Arnold\nThe Swedish person is the person who keeps a pet bird\nPeter is not in the sixth house\nThere is one house between the Chinese and the person with a pet hamster\nThe German is directly left of the person's child is named Samantha\nThe Swedish person is the person who enjoys camping trips\nThe Dane is the person who prefers city breaks\nThe person's child is named Alice is somewhere to the right of the person who enjoys mountain retreats\nThe Dane is Carol\nThe person who owns a dog is not in the sixth house\nThe Swedish person is not in the sixth house\nThe Swedish person and Peter are next to each other\nThe person's child is named Alice is Peter\nArnold is the Norwegian\nBob is somewhere to the right of the Chinese\nCarol is the person who owns a dog\nThe person with an aquarium of fish is not in the third house\nThe person who owns a rabbit is in the second house\nThe person's child is named Bella is somewhere to the left of the British person\nThe person's child is named Fred is in the third house\nThere is one house between Carol and the person who goes on cultural tours\nEric is the person who is the mother of Timothy",
    "queries": "And( And(lives(Carol) == 1, has_child(Carol) == Bella, prefers_vacation(Carol) == city, has_nationality(Carol) == dane, has_pet(Carol) == dog), And(lives(Eric) == 2, has_child(Eric) == Timothy, prefers_vacation(Eric) == mountain, has_nationality(Eric) == brit, has_pet(Eric) == rabbit), And(lives(Alice) == 3, has_child(Alice) == Fred, prefers_vacation(Alice) == cultural, has_nationality(Alice) == chinese, has_pet(Alice) == cat), And(lives(Bob) == 4, has_child(Bob) == Meredith, prefers_vacation(Bob) == camping, has_nationality(Bob) == swede, has_pet(Bob) == bird), And(lives(Peter) == 5, has_child(Peter) == Alice, prefers_vacation(Peter) == beach, has_nationality(Peter) == german, has_pet(Peter) == hamster), And(lives(Arnold) == 6, has_child(Arnold) == Samantha, prefers_vacation(Arnold) == cruise, has_nationality(Arnold) == norwegian, has_pet(Arnold) == fish) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-22",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Peter`\n - Each person has a unique favorite drink: `milk`, `water`, `coffee`, `tea`\n - They all have a unique favorite flower: `lilies`, `roses`, `daffodils`, `carnations`\n - People have unique favorite sports: `tennis`, `basketball`, `soccer`, `swimming`\n - Each person has an occupation: `doctor`, `teacher`, `artist`, `engineer`\n - Each mother is accompanied by their child: `Fred`, `Samantha`, `Bella`, `Meredith`\n\nClues:\n1. The person who loves basketball is somewhere to the left of the person who is an engineer.\n2. Eric is the person who loves a carnations arrangement.\n3. The person who loves the rose bouquet is somewhere to the left of Peter.\n4. The person who is a doctor is the person who loves tennis.\n5. The person's child is named Bella is directly left of the person's child is named Samantha.\n6. The person who is an artist is not in the third house.\n7. The person who loves the rose bouquet is in the second house.\n8. The person who loves a bouquet of daffodils and the person who loves tennis are next to each other.\n9. The person who loves a bouquet of daffodils is the person who is a teacher.\n10. The person who loves the rose bouquet is the person who likes milk.\n11. The person's child is named Samantha is Alice.\n12. The person who loves tennis is directly left of the one who only drinks water.\n13. The person who loves a carnations arrangement is in the fourth house.\n14. Arnold is somewhere to the left of the person who is an artist.\n15. The person's child is named Fred is not in the fourth house.\n16. The coffee drinker is the person who loves swimming.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Flower",
        "FavoriteSport",
        "Occupation",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "tea",
          "daffodils",
          "basketball",
          "teacher",
          "Bella"
        ],
        [
          "2",
          "Alice",
          "milk",
          "roses",
          "tennis",
          "doctor",
          "Samantha"
        ],
        [
          "3",
          "Peter",
          "water",
          "lilies",
          "soccer",
          "engineer",
          "Fred"
        ],
        [
          "4",
          "Eric",
          "coffee",
          "carnations",
          "swimming",
          "artist",
          "Meredith"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Peter])\ndrinks = EnumSort([milk, water, coffee, tea])\nflowers = EnumSort([lilies, roses, daffodils, carnations])\nsports = EnumSort([tennis, basketball, soccer, swimming])\noccupations = EnumSort([doctor, teacher, artist, engineer])\nchildren = EnumSort([Fred, Samantha, Bella, Meredith])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_flower = Function([people] -> [flowers])\nhas_sport = Function([people] -> [sports])\nhas_occupation = Function([people] -> [occupations])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves basketball is somewhere to the left of the person who is an engineer\nEric is the person who loves a carnations arrangement\nThe person who loves the rose bouquet is somewhere to the left of Peter\nThe person who is a doctor is the person who loves tennis\nThe person's child is named Bella is directly left of the person's child is named Samantha\nThe person who is an artist is not in the third house\nThe person who loves the rose bouquet is in the second house\nThe person who loves a bouquet of daffodils and the person who loves tennis are next to each other\nThe person who loves a bouquet of daffodils is the person who is a teacher\nThe person who loves the rose bouquet is the person who likes milk\nThe person's child is named Samantha is Alice\nThe person who loves tennis is directly left of the one who only drinks water\nThe person who loves a carnations arrangement is in the fourth house\nArnold is somewhere to the left of the person who is an artist\nThe person's child is named Fred is not in the fourth house\nThe coffee drinker is the person who loves swimming",
    "queries": "And( And(lives(Arnold) == 1, has_drink(Arnold) == tea, has_flower(Arnold) == daffodils, has_sport(Arnold) == basketball, has_occupation(Arnold) == teacher, has_child(Arnold) == Bella), And(lives(Alice) == 2, has_drink(Alice) == milk, has_flower(Alice) == roses, has_sport(Alice) == tennis, has_occupation(Alice) == doctor, has_child(Alice) == Samantha), And(lives(Peter) == 3, has_drink(Peter) == water, has_flower(Peter) == lilies, has_sport(Peter) == soccer, has_occupation(Peter) == engineer, has_child(Peter) == Fred), And(lives(Eric) == 4, has_drink(Eric) == coffee, has_flower(Eric) == carnations, has_sport(Eric) == swimming, has_occupation(Eric) == artist, has_child(Eric) == Meredith) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-21",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Peter`, `Alice`, `Eric`, `Arnold`, `Bob`\n - Each person lives in a unique style of house: `ranch`, `colonial`, `victorian`, `mediterranean`, `craftsman`, `modern`\n - People own unique car models: `tesla model 3`, `toyota camry`, `ford f150`, `chevrolet silverado`, `bmw 3 series`, `honda civic`\n - The mothers' names in different houses are unique: `Janelle`, `Aniya`, `Kailyn`, `Penny`, `Sarah`, `Holly`\n\nClues:\n1. The person whose mother's name is Penny is directly left of The person whose mother's name is Aniya.\n2. Peter is in the sixth house.\n3. The person who owns a Chevrolet Silverado is The person whose mother's name is Penny.\n4. The person whose mother's name is Sarah is not in the fifth house.\n5. There is one house between the person who owns a Honda Civic and the person who owns a Toyota Camry.\n6. The person in a Craftsman-style house is somewhere to the right of the person in a ranch-style home.\n7. Eric is somewhere to the left of The person whose mother's name is Sarah.\n8. The person residing in a Victorian house is Carol.\n9. The person who owns a Ford F-150 is the person in a Mediterranean-style villa.\n10. The person whose mother's name is Kailyn is somewhere to the left of the person who owns a Ford F-150.\n11. Bob is The person whose mother's name is Janelle.\n12. The person who owns a BMW 3 Series is somewhere to the left of Eric.\n13. The person whose mother's name is Holly is the person in a modern-style house.\n14. The person who owns a Tesla Model 3 is not in the second house.\n15. The person who owns a Toyota Camry is somewhere to the right of Eric.\n16. The person who owns a Honda Civic is in the fourth house.\n17. The person in a Craftsman-style house is the person who owns a Chevrolet Silverado.\n18. Arnold is the person who owns a Ford F-150.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "CarModel",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "ranch",
          "bmw 3 series",
          "Kailyn"
        ],
        [
          "2",
          "Eric",
          "craftsman",
          "chevrolet silverado",
          "Penny"
        ],
        [
          "3",
          "Arnold",
          "mediterranean",
          "ford f150",
          "Aniya"
        ],
        [
          "4",
          "Carol",
          "victorian",
          "honda civic",
          "Sarah"
        ],
        [
          "5",
          "Bob",
          "colonial",
          "tesla model 3",
          "Janelle"
        ],
        [
          "6",
          "Peter",
          "modern",
          "toyota camry",
          "Holly"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Peter, Alice, Eric, Arnold, Bob])\nhouseStyles = EnumSort([ranch, colonial, victorian, mediterranean, craftsman, modern])\ncarModels = EnumSort([tesla_model_3, toyota_camry, ford_f150, chevrolet_silverado, bmw_3_series, honda_civic])\nmothersNames = EnumSort([Janelle, Aniya, Kailyn, Penny, Sarah, Holly])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nowns_car = Function([people] -> [carModels])\nmothers_name = Function([people] -> [mothersNames])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose mother's name is Penny is directly left of The person whose mother's name is Aniya\nPeter is in the sixth house\nThe person who owns a Chevrolet Silverado is The person whose mother's name is Penny\nThe person whose mother's name is Sarah is not in the fifth house\nThere is one house between the person who owns a Honda Civic and the person who owns a Toyota Camry\nThe person in a Craftsman-style house is somewhere to the right of the person in a ranch-style home\nEric is somewhere to the left of The person whose mother's name is Sarah\nThe person residing in a Victorian house is Carol\nThe person who owns a Ford F-150 is the person in a Mediterranean-style villa\nThe person whose mother's name is Kailyn is somewhere to the left of the person who owns a Ford F-150\nBob is The person whose mother's name is Janelle\nThe person who owns a BMW 3 Series is somewhere to the left of Eric\nThe person whose mother's name is Holly is the person in a modern-style house\nThe person who owns a Tesla Model 3 is not in the second house\nThe person who owns a Toyota Camry is somewhere to the right of Eric\nThe person who owns a Honda Civic is in the fourth house\nThe person in a Craftsman-style house is the person who owns a Chevrolet Silverado\nArnold is the person who owns a Ford F-150",
    "queries": "And( And(lives(Alice) == 1, has_houseStyle(Alice) == ranch, owns_car(Alice) == bmw_3_series, mothers_name(Alice) == Kailyn), And(lives(Eric) == 2, has_houseStyle(Eric) == craftsman, owns_car(Eric) == chevrolet_silverado, mothers_name(Eric) == Penny), And(lives(Arnold) == 3, has_houseStyle(Arnold) == mediterranean, owns_car(Arnold) == ford_f150, mothers_name(Arnold) == Aniya), And(lives(Carol) == 4, has_houseStyle(Carol) == victorian, owns_car(Carol) == honda_civic, mothers_name(Carol) == Sarah), And(lives(Bob) == 5, has_houseStyle(Bob) == colonial, owns_car(Bob) == tesla_model_3, mothers_name(Bob) == Janelle), And(lives(Peter) == 6, has_houseStyle(Peter) == modern, owns_car(Peter) == toyota_camry, mothers_name(Peter) == Holly) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-1",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Eric`, `Peter`, `Alice`\n - Each person has a unique favorite drink: `milk`, `root beer`, `coffee`, `tea`, `water`\n - Everyone has a favorite smoothie: `dragonfruit`, `lime`, `desert`, `cherry`, `watermelon`\n - Everyone has a unique favorite cigar: `prince`, `pall mall`, `dunhill`, `blends`, `blue master`\n - Each person has a favorite color: `red`, `yellow`, `green`, `blue`, `white`\n - People have unique favorite music genres: `pop`, `rock`, `jazz`, `classical`, `hip hop`\n\nClues:\n1. The coffee drinker is the person who likes Cherry smoothies.\n2. The Watermelon smoothie lover is the person who loves rock music.\n3. The person who loves yellow is the person who loves hip-hop music.\n4. Eric is somewhere to the right of the person who loves classical music.\n5. The one who only drinks water is the Prince smoker.\n6. The person who smokes Blue Master is Eric.\n7. The Dunhill smoker is Alice.\n8. The root beer lover is the person whose favorite color is red.\n9. The Dunhill smoker is somewhere to the left of the Prince smoker.\n10. The Dragonfruit smoothie lover is directly left of the person who likes Cherry smoothies.\n11. Arnold is the person whose favorite color is green.\n12. Eric is the tea drinker.\n13. The Dunhill smoker is the person who loves white.\n14. The person who loves classical music and the person who drinks Lime smoothies are next to each other.\n15. The person who drinks Lime smoothies is Eric.\n16. The person who loves rock music is directly left of the root beer lover.\n17. The person who loves pop music is the root beer lover.\n18. The person whose favorite color is green is not in the third house.\n19. The one who only drinks water is the person who loves blue.\n20. The person who loves rock music is the person who loves white.\n21. Peter is not in the third house.\n22. The person who likes Cherry smoothies is somewhere to the right of the person partial to Pall Mall.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Smoothie",
        "Cigar",
        "Color",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "milk",
          "watermelon",
          "dunhill",
          "white",
          "rock"
        ],
        [
          "2",
          "Peter",
          "root beer",
          "desert",
          "pall mall",
          "red",
          "pop"
        ],
        [
          "3",
          "Bob",
          "water",
          "dragonfruit",
          "prince",
          "blue",
          "jazz"
        ],
        [
          "4",
          "Arnold",
          "coffee",
          "cherry",
          "blends",
          "green",
          "classical"
        ],
        [
          "5",
          "Eric",
          "tea",
          "lime",
          "blue master",
          "yellow",
          "hip hop"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Eric, Peter, Alice])\ndrinks = EnumSort([milk, root_beer, coffee, tea, water])\nsmoothies = EnumSort([dragonfruit, lime, desert, cherry, watermelon])\ncigars = EnumSort([prince, pall_mall, dunhill, blends, blue_master])\ncolors = EnumSort([red, yellow, green, blue, white])\nmusicGenres = EnumSort([pop, rock, jazz, classical, hip_hop])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_smoothie = Function([people] -> [smoothies])\nhas_cigar = Function([people] -> [cigars])\nhas_color = Function([people] -> [colors])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The coffee drinker is the person who likes Cherry smoothies\nThe Watermelon smoothie lover is the person who loves rock music\nThe person who loves yellow is the person who loves hip-hop music\nEric is somewhere to the right of the person who loves classical music\nThe one who only drinks water is the Prince smoker\nThe person who smokes Blue Master is Eric\nThe Dunhill smoker is Alice\nThe root beer lover is the person whose favorite color is red\nThe Dunhill smoker is somewhere to the left of the Prince smoker\nThe Dragonfruit smoothie lover is directly left of the person who likes Cherry smoothies\nArnold is the person whose favorite color is green\nEric is the tea drinker\nThe Dunhill smoker is the person who loves white\nThe person who loves classical music and the person who drinks Lime smoothies are next to each other\nThe person who drinks Lime smoothies is Eric\nThe person who loves rock music is directly left of the root beer lover\nThe person who loves pop music is the root beer lover\nThe person whose favorite color is green is not in the third house\nThe one who only drinks water is the person who loves blue\nThe person who loves rock music is the person who loves white\nPeter is not in the third house\nThe person who likes Cherry smoothies is somewhere to the right of the person partial to Pall Mall",
    "queries": "And( And(lives(Alice) == 1, has_drink(Alice) == milk, has_smoothie(Alice) == watermelon, has_cigar(Alice) == dunhill, has_color(Alice) == white, has_musicGenre(Alice) == rock), And(lives(Peter) == 2, has_drink(Peter) == root_beer, has_smoothie(Peter) == desert, has_cigar(Peter) == pall_mall, has_color(Peter) == red, has_musicGenre(Peter) == pop), And(lives(Bob) == 3, has_drink(Bob) == water, has_smoothie(Bob) == dragonfruit, has_cigar(Bob) == prince, has_color(Bob) == blue, has_musicGenre(Bob) == jazz), And(lives(Arnold) == 4, has_drink(Arnold) == coffee, has_smoothie(Arnold) == cherry, has_cigar(Arnold) == blends, has_color(Arnold) == green, has_musicGenre(Arnold) == classical), And(lives(Eric) == 5, has_drink(Eric) == tea, has_smoothie(Eric) == lime, has_cigar(Eric) == blue_master, has_color(Eric) == yellow, has_musicGenre(Eric) == hip_hop) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-19",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Peter`, `Alice`\n - They all have a unique favorite flower: `lilies`, `roses`, `daffodils`, `carnations`\n - People have unique favorite sports: `swimming`, `tennis`, `soccer`, `basketball`\n - People have unique hair colors: `black`, `brown`, `blonde`, `red`\n - Each person has a unique birthday month: `feb`, `jan`, `april`, `sept`\n - Each person prefers a unique type of vacation: `cruise`, `city`, `mountain`, `beach`\n\nClues:\n1. The person who enjoys mountain retreats is in the fourth house.\n2. The person whose birthday is in April and the person who loves a bouquet of daffodils are next to each other.\n3. The person who likes going on cruises is the person who loves a carnations arrangement.\n4. The person whose birthday is in September is the person who loves soccer.\n5. Arnold is the person who loves a bouquet of daffodils.\n6. Alice is in the third house.\n7. The person who loves basketball is the person whose birthday is in April.\n8. The person whose birthday is in February is the person who has brown hair.\n9. The person who has black hair is somewhere to the left of the person who likes going on cruises.\n10. The person who prefers city breaks is Eric.\n11. The person who has brown hair is Arnold.\n12. The person who has blonde hair is the person who loves tennis.\n13. The person who loves tennis is the person who likes going on cruises.\n14. The person who loves beach vacations is not in the third house.\n15. The person who loves the boquet of lilies is in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "FavoriteSport",
        "HairColor",
        "Birthday",
        "Vacation"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "lilies",
          "basketball",
          "black",
          "april",
          "city"
        ],
        [
          "2",
          "Arnold",
          "daffodils",
          "swimming",
          "brown",
          "feb",
          "beach"
        ],
        [
          "3",
          "Alice",
          "carnations",
          "tennis",
          "blonde",
          "jan",
          "cruise"
        ],
        [
          "4",
          "Peter",
          "roses",
          "soccer",
          "red",
          "sept",
          "mountain"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Peter, Alice])\nflowers = EnumSort([lilies, roses, daffodils, carnations])\nsports = EnumSort([swimming, tennis, soccer, basketball])\nhairColors = EnumSort([black, brown, blonde, red])\nmonths = EnumSort([feb, jan, april, sept])\nvacations = EnumSort([cruise, city, mountain, beach])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_sport = Function([people] -> [sports])\nhas_hairColor = Function([people] -> [hairColors])\nhas_month = Function([people] -> [months])\nhas_vacation = Function([people] -> [vacations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who enjoys mountain retreats is in the fourth house\nThe person whose birthday is in April and the person who loves a bouquet of daffodils are next to each other\nThe person who likes going on cruises is the person who loves a carnations arrangement\nThe person whose birthday is in September is the person who loves soccer\nArnold is the person who loves a bouquet of daffodils\nAlice is in the third house\nThe person who loves basketball is the person whose birthday is in April\nThe person whose birthday is in February is the person who has brown hair\nThe person who has black hair is somewhere to the left of the person who likes going on cruises\nThe person who prefers city breaks is Eric\nThe person who has brown hair is Arnold\nThe person who has blonde hair is the person who loves tennis\nThe person who loves tennis is the person who likes going on cruises\nThe person who loves beach vacations is not in the third house\nThe person who loves the boquet of lilies is in the first house",
    "queries": "And( And( lives(Eric) == 1, has_flower(Eric) == lilies, has_sport(Eric) == basketball, has_hairColor(Eric) == black, has_month(Eric) == april, has_vacation(Eric) == city ), And( lives(Arnold) == 2, has_flower(Arnold) == daffodils, has_sport(Arnold) == swimming, has_hairColor(Arnold) == brown, has_month(Arnold) == feb, has_vacation(Arnold) == beach ), And( lives(Alice) == 3, has_flower(Alice) == carnations, has_sport(Alice) == tennis, has_hairColor(Alice) == blonde, has_month(Alice) == jan, has_vacation(Alice) == cruise ), And( lives(Peter) == 4, has_flower(Peter) == roses, has_sport(Peter) == soccer, has_hairColor(Peter) == red, has_month(Peter) == sept, has_vacation(Peter) == mountain ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-11",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Bob`, `Eric`, `Peter`\n - Each person has a unique hobby: `painting`, `photography`, `cooking`, `gardening`, `knitting`\n - Each person has a unique birthday month: `jan`, `sept`, `mar`, `feb`, `april`\n - People have unique favorite sports: `swimming`, `basketball`, `tennis`, `baseball`, `soccer`\n - Each person has an occupation: `engineer`, `lawyer`, `teacher`, `doctor`, `artist`\n - Each person has a unique level of education: `bachelor`, `master`, `high school`, `doctorate`, `associate`\n\nClues:\n1. The person with a high school diploma is directly left of the person whose birthday is in February.\n2. The person who loves soccer is directly left of the photography enthusiast.\n3. Arnold is the person whose birthday is in January.\n4. The person who is a doctor is the person who loves baseball.\n5. The person who is an artist is somewhere to the left of Bob.\n6. The photography enthusiast is somewhere to the right of the person with an associate's degree.\n7. The photography enthusiast is directly left of the person who paints as a hobby.\n8. Eric is in the fifth house.\n9. The person whose birthday is in February is directly left of the person who loves tennis.\n10. The person who loves baseball is somewhere to the right of the person whose birthday is in January.\n11. The person who is an engineer is not in the first house.\n12. Alice is not in the second house.\n13. The person who enjoys gardening is somewhere to the left of the person whose birthday is in September.\n14. The person who loves swimming is not in the first house.\n15. The person who is a teacher is Bob.\n16. Arnold is the person who enjoys knitting.\n17. The person who is an artist is the person whose birthday is in March.\n18. Arnold is the person with a master's degree.\n19. The person whose birthday is in March is directly left of the person who is a doctor.\n20. The person whose birthday is in September is the person with a bachelor's degree.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "Birthday",
        "FavoriteSport",
        "Occupation",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "knitting",
          "jan",
          "basketball",
          "lawyer",
          "master"
        ],
        [
          "2",
          "Peter",
          "gardening",
          "mar",
          "soccer",
          "artist",
          "associate"
        ],
        [
          "3",
          "Alice",
          "photography",
          "april",
          "baseball",
          "doctor",
          "high school"
        ],
        [
          "4",
          "Bob",
          "painting",
          "feb",
          "swimming",
          "teacher",
          "doctorate"
        ],
        [
          "5",
          "Eric",
          "cooking",
          "sept",
          "tennis",
          "engineer",
          "bachelor"
        ]
      ]
    },
    "declarations": "people = EnumSort([alice, arnold, bob, eric, peter])\nhobbies = EnumSort([painting, photography, cooking, gardening, knitting])\nmonths = EnumSort([jan, sept, mar, feb, april])\nsports = EnumSort([swimming, basketball, tennis, baseball, soccer])\noccupations = EnumSort([engineer, lawyer, teacher, doctor, artist])\neducation = EnumSort([bachelor, master, high_school, doctorate, associate])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_birthday = Function([people] -> [months])\nhas_sport = Function([people] -> [sports])\nhas_occupation = Function([people] -> [occupations])\nhas_education = Function([people] -> [education])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person with a high school diploma is directly left of the person whose birthday is in February\nThe person who loves soccer is directly left of the photography enthusiast\nArnold is the person whose birthday is in January\nThe person who is a doctor is the person who loves baseball\nThe person who is an artist is somewhere to the left of Bob\nThe photography enthusiast is somewhere to the right of the person with an associate's degree\nThe photography enthusiast is directly left of the person who paints as a hobby\nEric is in the fifth house\nThe person whose birthday is in February is directly left of the person who loves tennis\nThe person who loves baseball is somewhere to the right of the person whose birthday is in January\nThe person who is an engineer is not in the first house\nAlice is not in the second house\nThe person who enjoys gardening is somewhere to the left of the person whose birthday is in September\nThe person who loves swimming is not in the first house\nThe person who is a teacher is Bob\nArnold is the person who enjoys knitting\nThe person who is an artist is the person whose birthday is in March\nArnold is the person with a master's degree\nThe person whose birthday is in March is directly left of the person who is a doctor\nThe person whose birthday is in September is the person with a bachelor's degree",
    "queries": "And( And(lives(arnold) == 1, has_hobby(arnold) == knitting, has_birthday(arnold) == jan, has_sport(arnold) == basketball, has_occupation(arnold) == lawyer, has_education(arnold) == master), And(lives(peter) == 2, has_hobby(peter) == gardening, has_birthday(peter) == mar, has_sport(peter) == soccer, has_occupation(peter) == artist, has_education(peter) == associate), And(lives(alice) == 3, has_hobby(alice) == photography, has_birthday(alice) == april, has_sport(alice) == baseball, has_occupation(alice) == doctor, has_education(alice) == high_school), And(lives(bob) == 4, has_hobby(bob) == painting, has_birthday(bob) == feb, has_sport(bob) == swimming, has_occupation(bob) == teacher, has_education(bob) == doctorate), And(lives(eric) == 5, has_hobby(eric) == cooking, has_birthday(eric) == sept, has_sport(eric) == tennis, has_occupation(eric) == engineer, has_education(eric) == bachelor) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-2",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Arnold`, `Eric`, `Peter`\n - People have unique favorite book genres: `romance`, `mystery`, `biography`, `fantasy`, `science fiction`\n - Each person has a unique birthday month: `sept`, `feb`, `jan`, `mar`, `april`\n - Each person prefers a unique type of vacation: `mountain`, `beach`, `city`, `camping`, `cruise`\n - The people keep unique animals: `horse`, `bird`, `fish`, `dog`, `cat`\n\nClues:\n1. The person whose birthday is in April is the person who loves mystery books.\n2. The person whose birthday is in March is somewhere to the left of the person who loves mystery books.\n3. The person who loves beach vacations is Arnold.\n4. The person who loves beach vacations is the person whose birthday is in January.\n5. The bird keeper is directly left of Peter.\n6. The person who loves science fiction books is somewhere to the left of the person whose birthday is in February.\n7. The fish enthusiast is somewhere to the right of Bob.\n8. The fish enthusiast is Eric.\n9. The fish enthusiast is the person who loves fantasy books.\n10. The person who enjoys mountain retreats is directly left of the person whose birthday is in April.\n11. The person whose birthday is in April is the person who enjoys camping trips.\n12. The person whose birthday is in September is the person who loves science fiction books.\n13. The cat lover is the person who prefers city breaks.\n14. The person who loves romance books is somewhere to the right of the person who loves science fiction books.\n15. The cat lover is the person whose birthday is in February.\n16. The person who keeps horses is Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "Birthday",
        "Vacation",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "biography",
          "jan",
          "beach",
          "bird"
        ],
        [
          "2",
          "Peter",
          "science fiction",
          "sept",
          "cruise",
          "horse"
        ],
        [
          "3",
          "Bob",
          "romance",
          "feb",
          "city",
          "cat"
        ],
        [
          "4",
          "Eric",
          "fantasy",
          "mar",
          "mountain",
          "fish"
        ],
        [
          "5",
          "Alice",
          "mystery",
          "april",
          "camping",
          "dog"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Arnold, Eric, Peter])\nbookGenres = EnumSort([romance, mystery, biography, fantasy, science_fiction])\nbirthdayMonths = EnumSort([sept, feb, jan, mar, april])\nvacationTypes = EnumSort([mountain, beach, city, camping, cruise])\nanimals = EnumSort([horse, bird, fish, dog, cat])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nhas_vacationType = Function([people] -> [vacationTypes])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose birthday is in April is the person who loves mystery books\nThe person whose birthday is in March is somewhere to the left of the person who loves mystery books\nThe person who loves beach vacations is Arnold\nThe person who loves beach vacations is the person whose birthday is in January\nThe bird keeper is directly left of Peter\nThe person who loves science fiction books is somewhere to the left of the person whose birthday is in February\nThe fish enthusiast is somewhere to the right of Bob\nThe fish enthusiast is Eric\nThe fish enthusiast is the person who loves fantasy books\nThe person who enjoys mountain retreats is directly left of the person whose birthday is in April\nThe person whose birthday is in April is the person who enjoys camping trips\nThe person whose birthday is in September is the person who loves science fiction books\nThe cat lover is the person who prefers city breaks\nThe person who loves romance books is somewhere to the right of the person who loves science fiction books\nThe cat lover is the person whose birthday is in February\nThe person who keeps horses is Peter",
    "queries": "And( And(lives(Arnold) == 1, has_bookGenre(Arnold) == biography, has_birthdayMonth(Arnold) == jan, has_vacationType(Arnold) == beach, has_animal(Arnold) == bird), And(lives(Peter) == 2, has_bookGenre(Peter) == science_fiction, has_birthdayMonth(Peter) == sept, has_vacationType(Peter) == cruise, has_animal(Peter) == horse), And(lives(Bob) == 3, has_bookGenre(Bob) == romance, has_birthdayMonth(Bob) == feb, has_vacationType(Bob) == city, has_animal(Bob) == cat), And(lives(Eric) == 4, has_bookGenre(Eric) == fantasy, has_birthdayMonth(Eric) == mar, has_vacationType(Eric) == mountain, has_animal(Eric) == fish), And(lives(Alice) == 5, has_bookGenre(Alice) == mystery, has_birthdayMonth(Alice) == april, has_vacationType(Alice) == camping, has_animal(Alice) == dog) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-15",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Alice`, `Peter`\n - They all have a unique favorite flower: `lilies`, `roses`, `carnations`, `daffodils`\n - People have unique favorite book genres: `fantasy`, `mystery`, `science fiction`, `romance`\n - Each person prefers a unique type of vacation: `city`, `beach`, `cruise`, `mountain`\n - People have unique hair colors: `black`, `red`, `brown`, `blonde`\n - Everyone has something unique for lunch: `grilled cheese`, `pizza`, `stew`, `spaghetti`\n\nClues:\n1. The person who likes going on cruises is the person who has brown hair.\n2. The person who loves the stew is the person who loves beach vacations.\n3. Peter is the person who loves romance books.\n4. There is one house between the person who has brown hair and the person who loves the spaghetti eater.\n5. The person who is a pizza lover is Arnold.\n6. The person who prefers city breaks is somewhere to the right of the person who loves the boquet of lilies.\n7. The person who loves the stew is directly left of the person who loves mystery books.\n8. The person who has black hair is directly left of the person who loves fantasy books.\n9. The person who loves a carnations arrangement is directly left of the person who is a pizza lover.\n10. The person who has blonde hair is not in the fourth house.\n11. The person who prefers city breaks is directly left of Eric.\n12. The person who loves the boquet of lilies is somewhere to the right of Alice.\n13. The person who loves a bouquet of daffodils is in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "BookGenre",
        "Vacation",
        "HairColor",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "carnations",
          "science fiction",
          "beach",
          "blonde",
          "stew"
        ],
        [
          "2",
          "Arnold",
          "lilies",
          "mystery",
          "cruise",
          "brown",
          "pizza"
        ],
        [
          "3",
          "Peter",
          "roses",
          "romance",
          "city",
          "black",
          "grilled cheese"
        ],
        [
          "4",
          "Eric",
          "daffodils",
          "fantasy",
          "mountain",
          "red",
          "spaghetti"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Alice, Peter])\nflowers = EnumSort([lilies, roses, carnations, daffodils])\nbookGenres = EnumSort([fantasy, mystery, science_fiction, romance])\nvacations = EnumSort([city, beach, cruise, mountain])\nhairColors = EnumSort([black, red, brown, blonde])\nfoods = EnumSort([grilled_cheese, pizza, stew, spaghetti])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who likes going on cruises is the person who has brown hair\nThe person who loves the stew is the person who loves beach vacations\nPeter is the person who loves romance books\nThere is one house between the person who has brown hair and the person who loves the spaghetti eater\nThe person who is a pizza lover is Arnold\nThe person who prefers city breaks is somewhere to the right of the person who loves the boquet of lilies\nThe person who loves the stew is directly left of the person who loves mystery books\nThe person who has black hair is directly left of the person who loves fantasy books\nThe person who loves a carnations arrangement is directly left of the person who is a pizza lover\nThe person who has blonde hair is not in the fourth house\nThe person who prefers city breaks is directly left of Eric\nThe person who loves the boquet of lilies is somewhere to the right of Alice\nThe person who loves a bouquet of daffodils is in the fourth house",
    "queries": "And( And(lives(Alice) == 1, has_flower(Alice) == carnations, has_bookGenre(Alice) == science_fiction, has_vacation(Alice) == beach, has_hairColor(Alice) == blonde, has_food(Alice) == stew), And(lives(Arnold) == 2, has_flower(Arnold) == lilies, has_bookGenre(Arnold) == mystery, has_vacation(Arnold) == cruise, has_hairColor(Arnold) == brown, has_food(Arnold) == pizza), And(lives(Peter) == 3, has_flower(Peter) == roses, has_bookGenre(Peter) == romance, has_vacation(Peter) == city, has_hairColor(Peter) == black, has_food(Peter) == grilled_cheese), And(lives(Eric) == 4, has_flower(Eric) == daffodils, has_bookGenre(Eric) == fantasy, has_vacation(Eric) == mountain, has_hairColor(Eric) == red, has_food(Eric) == spaghetti) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-5",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Carol`, `Bob`, `Arnold`, `Peter`\n - People have unique favorite music genres: `hip hop`, `jazz`, `country`, `classical`, `rock`, `pop`\n - People use unique phone models: `iphone 13`, `oneplus 9`, `xiaomi mi 11`, `huawei p50`, `samsung galaxy s21`, `google pixel 6`\n - People have unique favorite book genres: `biography`, `historical fiction`, `fantasy`, `romance`, `science fiction`, `mystery`\n\nClues:\n1. Arnold is not in the sixth house.\n2. There are two houses between the person who loves country music and the person who loves hip-hop music.\n3. The person who loves romance books is Carol.\n4. The person who loves biography books is somewhere to the left of the person who loves rock music.\n5. The person who loves mystery books is somewhere to the right of Peter.\n6. The person who loves romance books is the person who loves classical music.\n7. The person who loves mystery books is directly left of the person who loves fantasy books.\n8. Bob is the person who loves pop music.\n9. The person who loves jazz music is somewhere to the left of the person who loves pop music.\n10. Arnold is somewhere to the right of the person who loves hip-hop music.\n11. The person who loves hip-hop music and the person who uses a OnePlus 9 are next to each other.\n12. The person who loves science fiction books is the person who uses a Xiaomi Mi 11.\n13. The person who loves classical music is in the second house.\n14. The person who uses a Xiaomi Mi 11 is directly left of Eric.\n15. The person who loves historical fiction books is somewhere to the left of the person who loves classical music.\n16. The person who uses a Huawei P50 is Peter.\n17. The person who uses a Samsung Galaxy S21 is in the fourth house.\n18. The person who uses a Samsung Galaxy S21 is somewhere to the right of the person who uses an iPhone 13.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "PhoneModel",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "country",
          "huawei p50",
          "historical fiction"
        ],
        [
          "2",
          "Carol",
          "classical",
          "iphone 13",
          "romance"
        ],
        [
          "3",
          "Alice",
          "jazz",
          "xiaomi mi 11",
          "science fiction"
        ],
        [
          "4",
          "Eric",
          "hip hop",
          "samsung galaxy s21",
          "biography"
        ],
        [
          "5",
          "Arnold",
          "rock",
          "oneplus 9",
          "mystery"
        ],
        [
          "6",
          "Bob",
          "pop",
          "google pixel 6",
          "fantasy"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Carol, Bob, Arnold, Peter])\nmusicGenres = EnumSort([hip_hop, jazz, country, classical, rock, pop])\nphoneModels = EnumSort([iphone_13, oneplus_9, xiaomi_mi_11, huawei_p50, samsung_galaxy_s21, google_pixel_6])\nbookGenres = EnumSort([biography, historical_fiction, fantasy, romance, science_fiction, mystery])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_phoneModel = Function([people] -> [phoneModels])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is not in the sixth house\nThere are two houses between the person who loves country music and the person who loves hip-hop music\nThe person who loves romance books is Carol\nThe person who loves biography books is somewhere to the left of the person who loves rock music\nThe person who loves mystery books is somewhere to the right of Peter\nThe person who loves romance books is the person who loves classical music\nThe person who loves mystery books is directly left of the person who loves fantasy books\nBob is the person who loves pop music\nThe person who loves jazz music is somewhere to the left of the person who loves pop music\nArnold is somewhere to the right of the person who loves hip-hop music\nThe person who loves hip-hop music and the person who uses a OnePlus 9 are next to each other\nThe person who loves science fiction books is the person who uses a Xiaomi Mi 11\nThe person who loves classical music is in the second house\nThe person who uses a Xiaomi Mi 11 is directly left of Eric\nThe person who loves historical fiction books is somewhere to the left of the person who loves classical music\nThe person who uses a Huawei P50 is Peter\nThe person who uses a Samsung Galaxy S21 is in the fourth house\nThe person who uses a Samsung Galaxy S21 is somewhere to the right of the person who uses an iPhone 13",
    "queries": "And( And(lives(Peter) == 1, has_musicGenre(Peter) == country, has_phoneModel(Peter) == huawei_p50, has_bookGenre(Peter) == historical_fiction), And(lives(Carol) == 2, has_musicGenre(Carol) == classical, has_phoneModel(Carol) == iphone_13, has_bookGenre(Carol) == romance), And(lives(Alice) == 3, has_musicGenre(Alice) == jazz, has_phoneModel(Alice) == xiaomi_mi_11, has_bookGenre(Alice) == science_fiction), And(lives(Eric) == 4, has_musicGenre(Eric) == hip_hop, has_phoneModel(Eric) == samsung_galaxy_s21, has_bookGenre(Eric) == biography), And(lives(Arnold) == 5, has_musicGenre(Arnold) == rock, has_phoneModel(Arnold) == oneplus_9, has_bookGenre(Arnold) == mystery), And(lives(Bob) == 6, has_musicGenre(Bob) == pop, has_phoneModel(Bob) == google_pixel_6, has_bookGenre(Bob) == fantasy) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-12",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Alice`, `Arnold`, `Bob`, `Carol`\n - Each person has a unique hobby: `cooking`, `knitting`, `painting`, `gardening`, `woodworking`, `photography`\n - Everyone has a favorite smoothie: `lime`, `cherry`, `desert`, `blueberry`, `watermelon`, `dragonfruit`\n - The people are of nationalities: `chinese`, `dane`, `german`, `norwegian`, `swede`, `brit`\n - People have unique favorite music genres: `hip hop`, `country`, `rock`, `jazz`, `classical`, `pop`\n\nClues:\n1. The person who loves rock music is Bob.\n2. The person who enjoys knitting is the German.\n3. The woodworking hobbyist is in the sixth house.\n4. The person who loves rock music is directly left of the woodworking hobbyist.\n5. There is one house between the Watermelon smoothie lover and the person who loves hip-hop music.\n6. The Chinese is the Watermelon smoothie lover.\n7. The Desert smoothie lover is the Norwegian.\n8. The person who drinks Blueberry smoothies is not in the sixth house.\n9. The person who loves pop music is somewhere to the left of the person who enjoys gardening.\n10. Carol is somewhere to the left of the Swedish person.\n11. Peter is somewhere to the right of the person who loves pop music.\n12. The Norwegian is somewhere to the right of the Dragonfruit smoothie lover.\n13. The German is the person who loves country music.\n14. The person who paints as a hobby is directly left of the person who loves hip-hop music.\n15. The Dane is Arnold.\n16. The person who loves jazz music is the Chinese.\n17. The British person is not in the third house.\n18. The Swedish person is the person who loves pop music.\n19. The person who drinks Lime smoothies is the photography enthusiast.\n20. The person who loves hip-hop music is directly left of Alice.\n21. The Dane is the woodworking hobbyist.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "Smoothie",
        "Nationality",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "cooking",
          "watermelon",
          "chinese",
          "jazz"
        ],
        [
          "2",
          "Eric",
          "painting",
          "dragonfruit",
          "swede",
          "pop"
        ],
        [
          "3",
          "Peter",
          "gardening",
          "desert",
          "norwegian",
          "hip hop"
        ],
        [
          "4",
          "Alice",
          "knitting",
          "blueberry",
          "german",
          "country"
        ],
        [
          "5",
          "Bob",
          "photography",
          "lime",
          "brit",
          "rock"
        ],
        [
          "6",
          "Arnold",
          "woodworking",
          "cherry",
          "dane",
          "classical"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Alice, Arnold, Bob, Carol])\nhobbies = EnumSort([cooking, knitting, painting, gardening, woodworking, photography])\nsmoothies = EnumSort([lime, cherry, desert, blueberry, watermelon, dragonfruit])\nnationalities = EnumSort([chinese, dane, german, norwegian, swede, brit])\nmusicGenres = EnumSort([hip_hop, country, rock, jazz, classical, pop])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_smoothie = Function([people] -> [smoothies])\nhas_nationality = Function([people] -> [nationalities])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves rock music is Bob\nThe person who enjoys knitting is the German\nThe woodworking hobbyist is in the sixth house\nThe person who loves rock music is directly left of the woodworking hobbyist\nThere is one house between the Watermelon smoothie lover and the person who loves hip-hop music\nThe Chinese is the Watermelon smoothie lover\nThe Desert smoothie lover is the Norwegian\nThe person who drinks Blueberry smoothies is not in the sixth house\nThe person who loves pop music is somewhere to the left of the person who enjoys gardening\nCarol is somewhere to the left of the Swedish person\nPeter is somewhere to the right of the person who loves pop music\nThe Norwegian is somewhere to the right of the Dragonfruit smoothie lover\nThe German is the person who loves country music\nThe person who paints as a hobby is directly left of the person who loves hip-hop music\nThe Dane is Arnold\nThe person who loves jazz music is the Chinese\nThe British person is not in the third house\nThe Swedish person is the person who loves pop music\nThe person who drinks Lime smoothies is the photography enthusiast\nThe person who loves hip-hop music is directly left of Alice\nThe Dane is the woodworking hobbyist",
    "queries": "And( And(lives(Carol) == 1, has_hobby(Carol) == cooking, has_smoothie(Carol) == watermelon, has_nationality(Carol) == chinese, has_musicGenre(Carol) == jazz), And(lives(Eric) == 2, has_hobby(Eric) == painting, has_smoothie(Eric) == dragonfruit, has_nationality(Eric) == swede, has_musicGenre(Eric) == pop), And(lives(Peter) == 3, has_hobby(Peter) == gardening, has_smoothie(Peter) == desert, has_nationality(Peter) == norwegian, has_musicGenre(Peter) == hip_hop), And(lives(Alice) == 4, has_hobby(Alice) == knitting, has_smoothie(Alice) == blueberry, has_nationality(Alice) == german, has_musicGenre(Alice) == country), And(lives(Bob) == 5, has_hobby(Bob) == photography, has_smoothie(Bob) == lime, has_nationality(Bob) == brit, has_musicGenre(Bob) == rock), And(lives(Arnold) == 6, has_hobby(Arnold) == woodworking, has_smoothie(Arnold) == cherry, has_nationality(Arnold) == dane, has_musicGenre(Arnold) == classical) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-35",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Peter`, `Eric`, `Carol`, `Alice`\n - Each person lives in a unique style of house: `craftsman`, `colonial`, `mediterranean`, `modern`, `victorian`, `ranch`\n - Each person has an occupation: `nurse`, `doctor`, `artist`, `engineer`, `lawyer`, `teacher`\n - People have unique favorite sports: `swimming`, `basketball`, `baseball`, `tennis`, `soccer`, `volleyball`\n\nClues:\n1. There are two houses between the person who loves baseball and the person in a modern-style house.\n2. Arnold and the person who loves baseball are next to each other.\n3. The person living in a colonial-style house is somewhere to the right of the person who is a lawyer.\n4. The person who is an artist is Peter.\n5. The person who is a nurse is not in the sixth house.\n6. There is one house between Carol and Bob.\n7. The person who is an engineer is directly left of the person who is an artist.\n8. There are two houses between the person who loves swimming and the person who is a doctor.\n9. Bob is in the sixth house.\n10. The person residing in a Victorian house is not in the third house.\n11. The person residing in a Victorian house is not in the second house.\n12. The person who loves basketball is Eric.\n13. The person living in a colonial-style house is in the fourth house.\n14. There are two houses between the person in a ranch-style home and the person who loves tennis.\n15. The person in a modern-style house is somewhere to the right of the person in a Mediterranean-style villa.\n16. The person living in a colonial-style house is somewhere to the left of the person in a Mediterranean-style villa.\n17. The person who loves volleyball is the person who is an engineer.\n18. The person living in a colonial-style house is somewhere to the left of the person who loves basketball.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Occupation",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "victorian",
          "lawyer",
          "swimming"
        ],
        [
          "2",
          "Arnold",
          "craftsman",
          "engineer",
          "volleyball"
        ],
        [
          "3",
          "Peter",
          "ranch",
          "artist",
          "baseball"
        ],
        [
          "4",
          "Carol",
          "colonial",
          "doctor",
          "soccer"
        ],
        [
          "5",
          "Eric",
          "mediterranean",
          "nurse",
          "basketball"
        ],
        [
          "6",
          "Bob",
          "modern",
          "teacher",
          "tennis"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Peter, Eric, Carol, Alice])\nhouseStyles = EnumSort([craftsman, colonial, mediterranean, modern, victorian, ranch])\noccupations = EnumSort([nurse, doctor, artist, engineer, lawyer, teacher])\nsports = EnumSort([swimming, basketball, baseball, tennis, soccer, volleyball])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_occupation = Function([people] -> [occupations])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There are two houses between the person who loves baseball and the person in a modern-style house\nArnold and the person who loves baseball are next to each other\nThe person living in a colonial-style house is somewhere to the right of the person who is a lawyer\nThe person who is an artist is Peter\nThe person who is a nurse is not in the sixth house\nThere is one house between Carol and Bob\nThe person who is an engineer is directly left of the person who is an artist\nThere are two houses between the person who loves swimming and the person who is a doctor\nBob is in the sixth house\nThe person residing in a Victorian house is not in the third house\nThe person residing in a Victorian house is not in the second house\nThe person who loves basketball is Eric\nThe person living in a colonial-style house is in the fourth house\nThere are two houses between the person in a ranch-style home and the person who loves tennis\nThe person in a modern-style house is somewhere to the right of the person in a Mediterranean-style villa\nThe person living in a colonial-style house is somewhere to the left of the person in a Mediterranean-style villa\nThe person who loves volleyball is the person who is an engineer\nThe person living in a colonial-style house is somewhere to the left of the person who loves basketball",
    "queries": "And( And(lives(Alice) == 1, has_houseStyle(Alice) == victorian, has_occupation(Alice) == lawyer, has_sport(Alice) == swimming), And(lives(Arnold) == 2, has_houseStyle(Arnold) == craftsman, has_occupation(Arnold) == engineer, has_sport(Arnold) == volleyball), And(lives(Peter) == 3, has_houseStyle(Peter) == ranch, has_occupation(Peter) == artist, has_sport(Peter) == baseball), And(lives(Carol) == 4, has_houseStyle(Carol) == colonial, has_occupation(Carol) == doctor, has_sport(Carol) == soccer), And(lives(Eric) == 5, has_houseStyle(Eric) == mediterranean, has_occupation(Eric) == nurse, has_sport(Eric) == basketball), And(lives(Bob) == 6, has_houseStyle(Bob) == modern, has_occupation(Bob) == teacher, has_sport(Bob) == tennis) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-33",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Carol`, `Bob`, `Peter`, `Eric`, `Arnold`\n - They all have a unique favorite flower: `lilies`, `tulips`, `roses`, `daffodils`, `iris`, `carnations`\n - The people are of nationalities: `norwegian`, `dane`, `swede`, `german`, `brit`, `chinese`\n - Everyone has a favorite smoothie: `cherry`, `watermelon`, `desert`, `dragonfruit`, `blueberry`, `lime`\n - Each person has a unique hobby: `photography`, `cooking`, `knitting`, `woodworking`, `painting`, `gardening`\n - Each person has a unique type of pet: `rabbit`, `hamster`, `fish`, `cat`, `bird`, `dog`\n\nClues:\n1. The Swedish person is the person who loves cooking.\n2. The person who drinks Blueberry smoothies is Alice.\n3. The person who loves the rose bouquet is not in the sixth house.\n4. The photography enthusiast is somewhere to the right of the Dragonfruit smoothie lover.\n5. The person who loves cooking is the person who loves a bouquet of daffodils.\n6. The person who loves the boquet of lilies and the person who loves the boquet of iris are next to each other.\n7. The person who paints as a hobby is Alice.\n8. Arnold is somewhere to the right of the Watermelon smoothie lover.\n9. The woodworking hobbyist is somewhere to the right of the German.\n10. The woodworking hobbyist is somewhere to the left of the person who loves a bouquet of daffodils.\n11. The Dane is the Watermelon smoothie lover.\n12. The Dragonfruit smoothie lover is Peter.\n13. The person who drinks Lime smoothies is the woodworking hobbyist.\n14. There is one house between the Watermelon smoothie lover and the person who likes Cherry smoothies.\n15. The person who keeps a pet bird is the person who drinks Blueberry smoothies.\n16. The Desert smoothie lover is the person who enjoys gardening.\n17. The person with a pet hamster is in the fifth house.\n18. The person who owns a dog is the Norwegian.\n19. The person who has a cat is somewhere to the right of Bob.\n20. The British person is directly left of Carol.\n21. The person who loves the boquet of iris is Arnold.\n22. The German is somewhere to the right of the person who loves a carnations arrangement.\n23. Bob is the photography enthusiast.\n24. The person with an aquarium of fish is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Nationality",
        "Smoothie",
        "Hobby",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "carnations",
          "norwegian",
          "dragonfruit",
          "knitting",
          "dog"
        ],
        [
          "2",
          "Alice",
          "roses",
          "german",
          "blueberry",
          "painting",
          "bird"
        ],
        [
          "3",
          "Bob",
          "lilies",
          "dane",
          "watermelon",
          "photography",
          "rabbit"
        ],
        [
          "4",
          "Arnold",
          "iris",
          "brit",
          "lime",
          "woodworking",
          "fish"
        ],
        [
          "5",
          "Carol",
          "daffodils",
          "swede",
          "cherry",
          "cooking",
          "hamster"
        ],
        [
          "6",
          "Eric",
          "tulips",
          "chinese",
          "desert",
          "gardening",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Carol, Bob, Peter, Eric, Arnold])\nflowers = EnumSort([lilies, tulips, roses, daffodils, iris, carnations])\nnationalities = EnumSort([norwegian, dane, swede, german, brit, chinese])\nsmoothies = EnumSort([cherry, watermelon, desert, dragonfruit, blueberry, lime])\nhobbies = EnumSort([photography, cooking, knitting, woodworking, painting, gardening])\npets = EnumSort([rabbit, hamster, fish, cat, bird, dog])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_nationality = Function([people] -> [nationalities])\nhas_smoothie = Function([people] -> [smoothies])\nhas_hobby = Function([people] -> [hobbies])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The Swedish person is the person who loves cooking\nThe person who drinks Blueberry smoothies is Alice\nThe person who loves the rose bouquet is not in the sixth house\nThe photography enthusiast is somewhere to the right of the Dragonfruit smoothie lover\nThe person who loves cooking is the person who loves a bouquet of daffodils\nThe person who loves the boquet of lilies and the person who loves the boquet of iris are next to each other\nThe person who paints as a hobby is Alice\nArnold is somewhere to the right of the Watermelon smoothie lover\nThe woodworking hobbyist is somewhere to the right of the German\nThe woodworking hobbyist is somewhere to the left of the person who loves a bouquet of daffodils\nThe Dane is the Watermelon smoothie lover\nThe Dragonfruit smoothie lover is Peter\nThe person who drinks Lime smoothies is the woodworking hobbyist\nThere is one house between the Watermelon smoothie lover and the person who likes Cherry smoothies\nThe person who keeps a pet bird is the person who drinks Blueberry smoothies\nThe Desert smoothie lover is the person who enjoys gardening\nThe person with a pet hamster is in the fifth house\nThe person who owns a dog is the Norwegian\nThe person who has a cat is somewhere to the right of Bob\nThe British person is directly left of Carol\nThe person who loves the boquet of iris is Arnold\nThe German is somewhere to the right of the person who loves a carnations arrangement\nBob is the photography enthusiast\nThe person with an aquarium of fish is Arnold",
    "queries": "And( And(lives(Peter) == 1, has_flower(Peter) == carnations, has_nationality(Peter) == norwegian, has_smoothie(Peter) == dragonfruit, has_hobby(Peter) == knitting, has_pet(Peter) == dog), And(lives(Alice) == 2, has_flower(Alice) == roses, has_nationality(Alice) == german, has_smoothie(Alice) == blueberry, has_hobby(Alice) == painting, has_pet(Alice) == bird), And(lives(Bob) == 3, has_flower(Bob) == lilies, has_nationality(Bob) == dane, has_smoothie(Bob) == watermelon, has_hobby(Bob) == photography, has_pet(Bob) == rabbit), And(lives(Arnold) == 4, has_flower(Arnold) == iris, has_nationality(Arnold) == brit, has_smoothie(Arnold) == lime, has_hobby(Arnold) == woodworking, has_pet(Arnold) == fish), And(lives(Carol) == 5, has_flower(Carol) == daffodils, has_nationality(Carol) == swede, has_smoothie(Carol) == cherry, has_hobby(Carol) == cooking, has_pet(Carol) == hamster), And(lives(Eric) == 6, has_flower(Eric) == tulips, has_nationality(Eric) == chinese, has_smoothie(Eric) == desert, has_hobby(Eric) == gardening, has_pet(Eric) == cat) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-35",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Peter`, `Arnold`\n - Each person has a unique level of education: `master`, `bachelor`, `associate`, `high school`\n - People have unique hair colors: `black`, `red`, `brown`, `blonde`\n - Each person has a unique type of pet: `bird`, `cat`, `fish`, `dog`\n - Everyone has something unique for lunch: `grilled cheese`, `spaghetti`, `pizza`, `stew`\n - The people keep unique animals: `horse`, `cat`, `fish`, `bird`\n\nClues:\n1. Eric is the person with an associate's degree.\n2. The person who keeps a pet bird is in the third house.\n3. The person with a master's degree is not in the first house.\n4. The person who has a cat is the bird keeper.\n5. There is one house between the person who keeps horses and the person with an aquarium of fish.\n6. The person who loves eating grilled cheese is Arnold.\n7. The person who loves the stew is somewhere to the left of the person with a high school diploma.\n8. The person who loves eating grilled cheese is the person with a master's degree.\n9. The person who has blonde hair is somewhere to the left of the fish enthusiast.\n10. The person who has black hair is directly left of the fish enthusiast.\n11. The person who has black hair is the person with an associate's degree.\n12. The person who has red hair is directly left of Alice.\n13. Eric is the person who loves the stew.\n14. The person with an aquarium of fish is the person who loves the spaghetti eater.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "HairColor",
        "Pet",
        "Food",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "bachelor",
          "blonde",
          "cat",
          "pizza",
          "bird"
        ],
        [
          "2",
          "Eric",
          "associate",
          "black",
          "dog",
          "stew",
          "horse"
        ],
        [
          "3",
          "Arnold",
          "master",
          "red",
          "bird",
          "grilled cheese",
          "fish"
        ],
        [
          "4",
          "Alice",
          "high school",
          "brown",
          "fish",
          "spaghetti",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Peter, Arnold])\neducationLevels = EnumSort([master, bachelor, associate, high_school])\nhairColors = EnumSort([black, red, brown, blonde])\npets = EnumSort([bird, cat, fish, dog])\nfoods = EnumSort([grilled_cheese, spaghetti, pizza, stew])\nanimals = EnumSort([horse, cat, fish, bird])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_hairColor = Function([people] -> [hairColors])\nhas_pet = Function([people] -> [pets])\nhas_food = Function([people] -> [foods])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "Eric is the person with an associate's degree\nThe person who keeps a pet bird is in the third house\nThe person with a master's degree is not in the first house\nThe person who has a cat is the bird keeper\nThere is one house between the person who keeps horses and the person with an aquarium of fish\nThe person who loves eating grilled cheese is Arnold\nThe person who loves the stew is somewhere to the left of the person with a high school diploma\nThe person who loves eating grilled cheese is the person with a master's degree\nThe person who has blonde hair is somewhere to the left of the fish enthusiast\nThe person who has black hair is directly left of the fish enthusiast\nThe person who has black hair is the person with an associate's degree\nThe person who has red hair is directly left of Alice\nEric is the person who loves the stew\nThe person with an aquarium of fish is the person who loves the spaghetti eater",
    "queries": "And( And(lives(Peter) == 1, has_education(Peter) == bachelor, has_hairColor(Peter) == blonde, has_pet(Peter) == cat, has_food(Peter) == pizza, has_animal(Peter) == bird), And(lives(Eric) == 2, has_education(Eric) == associate, has_hairColor(Eric) == black, has_pet(Eric) == dog, has_food(Eric) == stew, has_animal(Eric) == horse), And(lives(Arnold) == 3, has_education(Arnold) == master, has_hairColor(Arnold) == red, has_pet(Arnold) == bird, has_food(Arnold) == grilled_cheese, has_animal(Arnold) == fish), And(lives(Alice) == 4, has_education(Alice) == high_school, has_hairColor(Alice) == brown, has_pet(Alice) == fish, has_food(Alice) == spaghetti, has_animal(Alice) == cat) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-15",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Carol`, `Peter`, `Bob`, `Eric`\n - The people keep unique animals: `fish`, `bird`, `rabbit`, `cat`, `horse`, `dog`\n - Each person has a unique favorite drink: `tea`, `root beer`, `water`, `milk`, `boba tea`, `coffee`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `samsung galaxy s21`, `huawei p50`, `xiaomi mi 11`, `oneplus 9`\n - Each mother is accompanied by their child: `Alice`, `Fred`, `Meredith`, `Samantha`, `Timothy`, `Bella`\n\nClues:\n1. The tea drinker is the person who uses an iPhone 13.\n2. There is one house between the dog owner and the tea drinker.\n3. The fish enthusiast is somewhere to the left of the tea drinker.\n4. Eric and the person's child is named Alice are next to each other.\n5. The one who only drinks water is not in the third house.\n6. The root beer lover is directly left of the person's child is named Samantha.\n7. The person who is the mother of Timothy is the coffee drinker.\n8. The fish enthusiast is directly left of the person who likes milk.\n9. Peter is the person who likes milk.\n10. The person who uses a OnePlus 9 is directly left of the person's child is named Alice.\n11. The person who keeps horses is not in the third house.\n12. The person's child is named Meredith is directly left of Bob.\n13. The person's child is named Bella is the person who uses a Google Pixel 6.\n14. The bird keeper is directly left of the person's child is named Meredith.\n15. The person who uses a Samsung Galaxy S21 is directly left of the person's child is named Bella.\n16. The one who only drinks water is somewhere to the left of the person's child is named Fred.\n17. Arnold is the tea drinker.\n18. The person who keeps horses is somewhere to the left of the cat lover.\n19. The person who uses a Huawei P50 and Alice are next to each other.\n20. Bob is directly left of the root beer lover.\n21. The person who is the mother of Timothy is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Drink",
        "PhoneModel",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "fish",
          "coffee",
          "oneplus 9",
          "Timothy"
        ],
        [
          "2",
          "Peter",
          "bird",
          "milk",
          "huawei p50",
          "Alice"
        ],
        [
          "3",
          "Alice",
          "rabbit",
          "boba tea",
          "samsung galaxy s21",
          "Meredith"
        ],
        [
          "4",
          "Bob",
          "dog",
          "water",
          "google pixel 6",
          "Bella"
        ],
        [
          "5",
          "Carol",
          "horse",
          "root beer",
          "xiaomi mi 11",
          "Fred"
        ],
        [
          "6",
          "Arnold",
          "cat",
          "tea",
          "iphone 13",
          "Samantha"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Carol, Peter, Bob, Eric])\nanimals = EnumSort([fish, bird, rabbit, cat, horse, dog])\ndrinks = EnumSort([tea, root_beer, water, milk, boba_tea, coffee])\nphones = EnumSort([iphone_13, google_pixel_6, samsung_galaxy_s21, huawei_p50, xiaomi_mi_11, oneplus_9])\nchildren = EnumSort([Alice_child, Fred, Meredith, Samantha, Timothy, Bella])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_drink = Function([people] -> [drinks])\nuses_phone = Function([people] -> [phones])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The tea drinker is the person who uses an iPhone 13\nThere is one house between the dog owner and the tea drinker\nThe fish enthusiast is somewhere to the left of the tea drinker\nEric and the person's child is named Alice are next to each other\nThe one who only drinks water is not in the third house\nThe root beer lover is directly left of the person's child is named Samantha\nThe person who is the mother of Timothy is the coffee drinker\nThe fish enthusiast is directly left of the person who likes milk\nPeter is the person who likes milk\nThe person who uses a OnePlus 9 is directly left of the person's child is named Alice\nThe person who keeps horses is not in the third house\nThe person's child is named Meredith is directly left of Bob\nThe person's child is named Bella is the person who uses a Google Pixel 6\nThe bird keeper is directly left of the person's child is named Meredith\nThe person who uses a Samsung Galaxy S21 is directly left of the person's child is named Bella\nThe one who only drinks water is somewhere to the left of the person's child is named Fred\nArnold is the tea drinker\nThe person who keeps horses is somewhere to the left of the cat lover\nThe person who uses a Huawei P50 and Alice are next to each other\nBob is directly left of the root beer lover\nThe person who is the mother of Timothy is Eric",
    "queries": "And( And(lives(Eric) == 1, has_animal(Eric) == fish, has_drink(Eric) == coffee, uses_phone(Eric) == oneplus_9, has_child(Eric) == Timothy), And(lives(Peter) == 2, has_animal(Peter) == bird, has_drink(Peter) == milk, uses_phone(Peter) == huawei_p50, has_child(Peter) == Alice_child), And(lives(Alice) == 3, has_animal(Alice) == rabbit, has_drink(Alice) == boba_tea, uses_phone(Alice) == samsung_galaxy_s21, has_child(Alice) == Meredith), And(lives(Bob) == 4, has_animal(Bob) == dog, has_drink(Bob) == water, uses_phone(Bob) == google_pixel_6, has_child(Bob) == Bella), And(lives(Carol) == 5, has_animal(Carol) == horse, has_drink(Carol) == root_beer, uses_phone(Carol) == xiaomi_mi_11, has_child(Carol) == Fred), And(lives(Arnold) == 6, has_animal(Arnold) == cat, has_drink(Arnold) == tea, uses_phone(Arnold) == iphone_13, has_child(Arnold) == Samantha) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-23",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Eric`, `Carol`, `Alice`, `Peter`\n - Each person lives in a unique style of house: `modern`, `craftsman`, `colonial`, `mediterranean`, `victorian`, `ranch`\n - Everyone has a favorite smoothie: `cherry`, `watermelon`, `desert`, `dragonfruit`, `blueberry`, `lime`\n - Each person has an occupation: `doctor`, `nurse`, `artist`, `lawyer`, `engineer`, `teacher`\n - Each person has a unique birthday month: `jan`, `sept`, `feb`, `mar`, `april`, `may`\n\nClues:\n1. There is one house between the person whose birthday is in September and the person who is a doctor.\n2. Alice is the person living in a colonial-style house.\n3. The Desert smoothie lover is the person whose birthday is in September.\n4. Bob is the person who drinks Lime smoothies.\n5. Alice and the person who is an artist are next to each other.\n6. Carol is the person in a modern-style house.\n7. The person residing in a Victorian house and the Dragonfruit smoothie lover are next to each other.\n8. The person who is a nurse and the person whose birthday is in September are next to each other.\n9. The person whose birthday is in January is the person who drinks Lime smoothies.\n10. The person whose birthday is in March is somewhere to the right of the Watermelon smoothie lover.\n11. The person in a modern-style house is somewhere to the right of the person whose birthday is in September.\n12. The person whose birthday is in February is not in the second house.\n13. The person whose birthday is in September is directly left of the person who is a teacher.\n14. The person who is an artist is in the sixth house.\n15. The person who likes Cherry smoothies is Arnold.\n16. The person who is an engineer is somewhere to the left of the person who is a nurse.\n17. Eric and the person who is a teacher are next to each other.\n18. The person who is a teacher is the person whose birthday is in April.\n19. The person whose birthday is in February and the person in a Mediterranean-style villa are next to each other.\n20. The person in a ranch-style home is the person who is a teacher.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Smoothie",
        "Occupation",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "craftsman",
          "cherry",
          "engineer",
          "feb"
        ],
        [
          "2",
          "Bob",
          "mediterranean",
          "lime",
          "nurse",
          "jan"
        ],
        [
          "3",
          "Eric",
          "victorian",
          "desert",
          "lawyer",
          "sept"
        ],
        [
          "4",
          "Peter",
          "ranch",
          "dragonfruit",
          "teacher",
          "april"
        ],
        [
          "5",
          "Alice",
          "colonial",
          "watermelon",
          "doctor",
          "may"
        ],
        [
          "6",
          "Carol",
          "modern",
          "blueberry",
          "artist",
          "mar"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Eric, Carol, Alice, Peter])\nhouseStyles = EnumSort([modern, craftsman, colonial, mediterranean, victorian, ranch])\nsmoothies = EnumSort([cherry, watermelon, desert, dragonfruit, blueberry, lime])\noccupations = EnumSort([doctor, nurse, artist, lawyer, engineer, teacher])\nmonths = EnumSort([jan, sept, feb, mar, april, may])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_smoothie = Function([people] -> [smoothies])\nhas_occupation = Function([people] -> [occupations])\nhas_month = Function([people] -> [months])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the person whose birthday is in September and the person who is a doctor\nAlice is the person living in a colonial-style house\nThe Desert smoothie lover is the person whose birthday is in September\nBob is the person who drinks Lime smoothies\nAlice and the person who is an artist are next to each other\nCarol is the person in a modern-style house\nThe person residing in a Victorian house and the Dragonfruit smoothie lover are next to each other\nThe person who is a nurse and the person whose birthday is in September are next to each other\nThe person whose birthday is in January is the person who drinks Lime smoothies\nThe person whose birthday is in March is somewhere to the right of the Watermelon smoothie lover\nThe person in a modern-style house is somewhere to the right of the person whose birthday is in September\nThe person whose birthday is in February is not in the second house\nThe person whose birthday is in September is directly left of the person who is a teacher\nThe person who is an artist is in the sixth house\nThe person who likes Cherry smoothies is Arnold\nThe person who is an engineer is somewhere to the left of the person who is a nurse\nEric and the person who is a teacher are next to each other\nThe person who is a teacher is the person whose birthday is in April\nThe person whose birthday is in February and the person in a Mediterranean-style villa are next to each other\nThe person in a ranch-style home is the person who is a teacher",
    "queries": "And( And(lives(Arnold) == 1, has_houseStyle(Arnold) == craftsman, has_smoothie(Arnold) == cherry, has_occupation(Arnold) == engineer, has_month(Arnold) == feb), And(lives(Bob) == 2, has_houseStyle(Bob) == mediterranean, has_smoothie(Bob) == lime, has_occupation(Bob) == nurse, has_month(Bob) == jan), And(lives(Eric) == 3, has_houseStyle(Eric) == victorian, has_smoothie(Eric) == desert, has_occupation(Eric) == lawyer, has_month(Eric) == sept), And(lives(Peter) == 4, has_houseStyle(Peter) == ranch, has_smoothie(Peter) == dragonfruit, has_occupation(Peter) == teacher, has_month(Peter) == april), And(lives(Alice) == 5, has_houseStyle(Alice) == colonial, has_smoothie(Alice) == watermelon, has_occupation(Alice) == doctor, has_month(Alice) == may), And(lives(Carol) == 6, has_houseStyle(Carol) == modern, has_smoothie(Carol) == blueberry, has_occupation(Carol) == artist, has_month(Carol) == mar) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-20",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Peter`, `Alice`, `Eric`, `Arnold`\n - Each person has a unique birthday month: `feb`, `may`, `mar`, `april`, `sept`, `jan`\n - Each person prefers a unique type of vacation: `city`, `beach`, `cultural`, `mountain`, `camping`, `cruise`\n - People have unique hair colors: `blonde`, `brown`, `black`, `gray`, `auburn`, `red`\n\nClues:\n1. Arnold is directly left of the person whose birthday is in April.\n2. The person who loves beach vacations is not in the second house.\n3. The person whose birthday is in January is in the second house.\n4. The person who has red hair is not in the fourth house.\n5. The person who likes going on cruises and the person who enjoys camping trips are next to each other.\n6. Eric is the person whose birthday is in February.\n7. Arnold is somewhere to the left of the person whose birthday is in February.\n8. The person who prefers city breaks is not in the second house.\n9. The person whose birthday is in February is the person who enjoys mountain retreats.\n10. Alice and Carol are next to each other.\n11. The person whose birthday is in September is the person who likes going on cruises.\n12. The person who has brown hair is directly left of the person who has blonde hair.\n13. The person whose birthday is in March is in the sixth house.\n14. The person who has black hair is Alice.\n15. The person who has gray hair is in the third house.\n16. The person who has black hair is the person whose birthday is in September.\n17. Peter is not in the third house.\n18. There are two houses between the person who loves beach vacations and the person whose birthday is in February.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Vacation",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "may",
          "beach",
          "brown"
        ],
        [
          "2",
          "Arnold",
          "jan",
          "cultural",
          "blonde"
        ],
        [
          "3",
          "Bob",
          "april",
          "city",
          "gray"
        ],
        [
          "4",
          "Eric",
          "feb",
          "mountain",
          "auburn"
        ],
        [
          "5",
          "Alice",
          "sept",
          "cruise",
          "black"
        ],
        [
          "6",
          "Carol",
          "mar",
          "camping",
          "red"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Peter, Alice, Eric, Arnold])\nmonths = EnumSort([feb, may, mar, april, sept, jan])\nvacations = EnumSort([city, beach, cultural, mountain, camping, cruise])\nhairColors = EnumSort([blonde, brown, black, gray, auburn, red])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nprefers_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is directly left of the person whose birthday is in April\nThe person who loves beach vacations is not in the second house\nThe person whose birthday is in January is in the second house\nThe person who has red hair is not in the fourth house\nThe person who likes going on cruises and the person who enjoys camping trips are next to each other\nEric is the person whose birthday is in February\nArnold is somewhere to the left of the person whose birthday is in February\nThe person who prefers city breaks is not in the second house\nThe person whose birthday is in February is the person who enjoys mountain retreats\nAlice and Carol are next to each other\nThe person whose birthday is in September is the person who likes going on cruises\nThe person who has brown hair is directly left of the person who has blonde hair\nThe person whose birthday is in March is in the sixth house\nThe person who has black hair is Alice\nThe person who has gray hair is in the third house\nThe person who has black hair is the person whose birthday is in September\nPeter is not in the third house\nThere are two houses between the person who loves beach vacations and the person whose birthday is in February",
    "queries": "And( And(lives(Peter) == 1, has_birthday(Peter) == may, prefers_vacation(Peter) == beach, has_hairColor(Peter) == brown), And(lives(Arnold) == 2, has_birthday(Arnold) == jan, prefers_vacation(Arnold) == cultural, has_hairColor(Arnold) == blonde), And(lives(Bob) == 3, has_birthday(Bob) == april, prefers_vacation(Bob) == city, has_hairColor(Bob) == gray), And(lives(Eric) == 4, has_birthday(Eric) == feb, prefers_vacation(Eric) == mountain, has_hairColor(Eric) == auburn), And(lives(Alice) == 5, has_birthday(Alice) == sept, prefers_vacation(Alice) == cruise, has_hairColor(Alice) == black), And(lives(Carol) == 6, has_birthday(Carol) == mar, prefers_vacation(Carol) == camping, has_hairColor(Carol) == red) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-25",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Eric`, `Peter`, `Bob`, `Carol`\n - They all have a unique favorite flower: `daffodils`, `roses`, `tulips`, `iris`, `carnations`, `lilies`\n - People have unique favorite sports: `basketball`, `swimming`, `soccer`, `volleyball`, `tennis`, `baseball`\n - Everyone has a favorite smoothie: `cherry`, `watermelon`, `lime`, `blueberry`, `dragonfruit`, `desert`\n - Each person has an occupation: `lawyer`, `doctor`, `teacher`, `artist`, `nurse`, `engineer`\n\nClues:\n1. The person who loves a bouquet of daffodils is the person who is an artist.\n2. The person who loves tennis is not in the second house.\n3. The person who is an artist is somewhere to the right of the person who likes Cherry smoothies.\n4. The person who loves soccer is somewhere to the right of the person who is a teacher.\n5. The person who loves basketball is directly left of the person who loves the vase of tulips.\n6. The person who is a nurse is in the sixth house.\n7. The person who loves a bouquet of daffodils and the Dragonfruit smoothie lover are next to each other.\n8. The person who loves tennis is not in the third house.\n9. The person who loves the boquet of iris is not in the second house.\n10. The person who is a teacher is not in the second house.\n11. The person who loves a carnations arrangement is the Watermelon smoothie lover.\n12. There are two houses between the person who loves a bouquet of daffodils and the person who is a nurse.\n13. The person who loves volleyball is the Dragonfruit smoothie lover.\n14. Peter is the person who is a nurse.\n15. There are two houses between the person who is a doctor and the person who is a lawyer.\n16. The person who loves baseball is somewhere to the left of the person who drinks Blueberry smoothies.\n17. The person who drinks Lime smoothies is somewhere to the left of Carol.\n18. The person who loves the vase of tulips is the Desert smoothie lover.\n19. The person who drinks Blueberry smoothies is Alice.\n20. There is one house between the person who is an artist and Arnold.\n21. Eric is directly left of Arnold.\n22. There is one house between the person who is a doctor and Alice.\n23. The person who loves the boquet of lilies is in the first house.\n24. The person who is a doctor is not in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "FavoriteSport",
        "Smoothie",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "lilies",
          "tennis",
          "lime",
          "doctor"
        ],
        [
          "2",
          "Carol",
          "roses",
          "baseball",
          "cherry",
          "engineer"
        ],
        [
          "3",
          "Alice",
          "daffodils",
          "swimming",
          "blueberry",
          "artist"
        ],
        [
          "4",
          "Eric",
          "iris",
          "volleyball",
          "dragonfruit",
          "lawyer"
        ],
        [
          "5",
          "Arnold",
          "carnations",
          "basketball",
          "watermelon",
          "teacher"
        ],
        [
          "6",
          "Peter",
          "tulips",
          "soccer",
          "desert",
          "nurse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Eric, Peter, Bob, Carol])\nflowers = EnumSort([daffodils, roses, tulips, iris, carnations, lilies])\nsports = EnumSort([basketball, swimming, soccer, volleyball, tennis, baseball])\nsmoothies = EnumSort([cherry, watermelon, lime, blueberry, dragonfruit, desert])\noccupations = EnumSort([lawyer, doctor, teacher, artist, nurse, engineer])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_sport = Function([people] -> [sports])\nhas_smoothie = Function([people] -> [smoothies])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves a bouquet of daffodils is the person who is an artist\nThe person who loves tennis is not in the second house\nThe person who is an artist is somewhere to the right of the person who likes Cherry smoothies\nThe person who loves soccer is somewhere to the right of the person who is a teacher\nThe person who loves basketball is directly left of the person who loves the vase of tulips\nThe person who is a nurse is in the sixth house\nThe person who loves a bouquet of daffodils and the Dragonfruit smoothie lover are next to each other\nThe person who loves tennis is not in the third house\nThe person who loves the boquet of iris is not in the second house\nThe person who is a teacher is not in the second house\nThe person who loves a carnations arrangement is the Watermelon smoothie lover\nThere are two houses between the person who loves a bouquet of daffodils and the person who is a nurse\nThe person who loves volleyball is the Dragonfruit smoothie lover\nPeter is the person who is a nurse\nThere are two houses between the person who is a doctor and the person who is a lawyer\nThe person who loves baseball is somewhere to the left of the person who drinks Blueberry smoothies\nThe person who drinks Lime smoothies is somewhere to the left of Carol\nThe person who loves the vase of tulips is the Desert smoothie lover\nThe person who drinks Blueberry smoothies is Alice\nThere is one house between the person who is an artist and Arnold\nEric is directly left of Arnold\nThere is one house between the person who is a doctor and Alice\nThe person who loves the boquet of lilies is in the first house\nThe person who is a doctor is not in the fifth house",
    "queries": "And( And(lives(Bob) == 1, has_flower(Bob) == lilies, has_sport(Bob) == tennis, has_smoothie(Bob) == lime, has_occupation(Bob) == doctor), And(lives(Carol) == 2, has_flower(Carol) == roses, has_sport(Carol) == baseball, has_smoothie(Carol) == cherry, has_occupation(Carol) == engineer), And(lives(Alice) == 3, has_flower(Alice) == daffodils, has_sport(Alice) == swimming, has_smoothie(Alice) == blueberry, has_occupation(Alice) == artist), And(lives(Eric) == 4, has_flower(Eric) == iris, has_sport(Eric) == volleyball, has_smoothie(Eric) == dragonfruit, has_occupation(Eric) == lawyer), And(lives(Arnold) == 5, has_flower(Arnold) == carnations, has_sport(Arnold) == basketball, has_smoothie(Arnold) == watermelon, has_occupation(Arnold) == teacher), And(lives(Peter) == 6, has_flower(Peter) == tulips, has_sport(Peter) == soccer, has_smoothie(Peter) == desert, has_occupation(Peter) == nurse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-38",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Bob`, `Arnold`, `Carol`, `Peter`\n - Each person has a unique hobby: `gardening`, `painting`, `knitting`, `photography`, `cooking`, `woodworking`\n - People own unique car models: `chevrolet silverado`, `toyota camry`, `bmw 3 series`, `ford f150`, `honda civic`, `tesla model 3`\n - Each person lives in a unique style of house: `ranch`, `colonial`, `victorian`, `mediterranean`, `craftsman`, `modern`\n\nClues:\n1. Arnold is somewhere to the right of the person who owns a BMW 3 Series.\n2. The person in a Mediterranean-style villa is the person who loves cooking.\n3. The person in a ranch-style home is Alice.\n4. The person residing in a Victorian house is somewhere to the right of Eric.\n5. Arnold is not in the fourth house.\n6. There is one house between the person who owns a Tesla Model 3 and the person who enjoys gardening.\n7. The person who enjoys knitting is the person who owns a Toyota Camry.\n8. Bob is somewhere to the right of the person residing in a Victorian house.\n9. There are two houses between the person who enjoys gardening and Arnold.\n10. The person who owns a Toyota Camry is not in the fifth house.\n11. Alice is not in the third house.\n12. Peter is not in the fourth house.\n13. The person living in a colonial-style house is the woodworking hobbyist.\n14. The person who owns a Ford F-150 is in the second house.\n15. The person who loves cooking and the person who enjoys gardening are next to each other.\n16. The person in a ranch-style home is the person who owns a Chevrolet Silverado.\n17. Carol is somewhere to the left of the person in a ranch-style home.\n18. The person who owns a Toyota Camry is Bob.\n19. The person in a modern-style house is the person who enjoys knitting.\n20. Peter is not in the third house.\n21. The photography enthusiast and Peter are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "CarModel",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "photography",
          "tesla model 3",
          "craftsman"
        ],
        [
          "2",
          "Peter",
          "cooking",
          "ford f150",
          "mediterranean"
        ],
        [
          "3",
          "Carol",
          "gardening",
          "bmw 3 series",
          "victorian"
        ],
        [
          "4",
          "Bob",
          "knitting",
          "toyota camry",
          "modern"
        ],
        [
          "5",
          "Alice",
          "painting",
          "chevrolet silverado",
          "ranch"
        ],
        [
          "6",
          "Arnold",
          "woodworking",
          "honda civic",
          "colonial"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Bob, Arnold, Carol, Peter])\nhobbies = EnumSort([gardening, painting, knitting, photography, cooking, woodworking])\ncarModels = EnumSort([chevrolet_silverado, toyota_camry, bmw_3_series, ford_f150, honda_civic, tesla_model_3])\nhouseStyles = EnumSort([ranch, colonial, victorian, mediterranean, craftsman, modern])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nowns_car = Function([people] -> [carModels])\nlives_in = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is somewhere to the right of the person who owns a BMW 3 Series\nThe person in a Mediterranean-style villa is the person who loves cooking\nThe person in a ranch-style home is Alice\nThe person residing in a Victorian house is somewhere to the right of Eric\nArnold is not in the fourth house\nThere is one house between the person who owns a Tesla Model 3 and the person who enjoys gardening\nThe person who enjoys knitting is the person who owns a Toyota Camry\nBob is somewhere to the right of the person residing in a Victorian house\nThere are two houses between the person who enjoys gardening and Arnold\nThe person who owns a Toyota Camry is not in the fifth house\nAlice is not in the third house\nPeter is not in the fourth house\nThe person living in a colonial-style house is the woodworking hobbyist\nThe person who owns a Ford F-150 is in the second house\nThe person who loves cooking and the person who enjoys gardening are next to each other\nThe person in a ranch-style home is the person who owns a Chevrolet Silverado\nCarol is somewhere to the left of the person in a ranch-style home\nThe person who owns a Toyota Camry is Bob\nThe person in a modern-style house is the person who enjoys knitting\nPeter is not in the third house\nThe photography enthusiast and Peter are next to each other",
    "queries": "And( And(lives(Eric) == 1, has_hobby(Eric) == photography, owns_car(Eric) == tesla_model_3, lives_in(Eric) == craftsman), And(lives(Peter) == 2, has_hobby(Peter) == cooking, owns_car(Peter) == ford_f150, lives_in(Peter) == mediterranean), And(lives(Carol) == 3, has_hobby(Carol) == gardening, owns_car(Carol) == bmw_3_series, lives_in(Carol) == victorian), And(lives(Bob) == 4, has_hobby(Bob) == knitting, owns_car(Bob) == toyota_camry, lives_in(Bob) == modern), And(lives(Alice) == 5, has_hobby(Alice) == painting, owns_car(Alice) == chevrolet_silverado, lives_in(Alice) == ranch), And(lives(Arnold) == 6, has_hobby(Arnold) == woodworking, owns_car(Arnold) == honda_civic, lives_in(Arnold) == colonial) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-18",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Alice`, `Arnold`, `Carol`, `Eric`\n - The people are of nationalities: `swede`, `chinese`, `norwegian`, `german`, `brit`, `dane`\n - People own unique car models: `tesla model 3`, `toyota camry`, `ford f150`, `chevrolet silverado`, `honda civic`, `bmw 3 series`\n - Each person has a unique favorite drink: `root beer`, `milk`, `tea`, `water`, `coffee`, `boba tea`\n\nClues:\n1. The boba tea drinker is the person who owns a Ford F-150.\n2. The British person is directly left of Eric.\n3. Alice is the person who owns a Honda Civic.\n4. The tea drinker is not in the first house.\n5. Eric is the Chinese.\n6. The tea drinker is the person who owns a BMW 3 Series.\n7. The German is in the second house.\n8. The person who owns a Chevrolet Silverado is somewhere to the left of the person who likes milk.\n9. Bob is in the fifth house.\n10. The person who owns a Toyota Camry is directly left of the one who only drinks water.\n11. The root beer lover is directly left of the Norwegian.\n12. The Dane is somewhere to the right of the person who owns a BMW 3 Series.\n13. Arnold is in the second house.\n14. The person who owns a Honda Civic is directly left of the person who owns a Ford F-150.\n15. Peter is not in the third house.\n16. The person who owns a Toyota Camry is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "CarModel",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "swede",
          "chevrolet silverado",
          "coffee"
        ],
        [
          "2",
          "Arnold",
          "german",
          "bmw 3 series",
          "tea"
        ],
        [
          "3",
          "Carol",
          "dane",
          "toyota camry",
          "root beer"
        ],
        [
          "4",
          "Alice",
          "norwegian",
          "honda civic",
          "water"
        ],
        [
          "5",
          "Bob",
          "brit",
          "ford f150",
          "boba tea"
        ],
        [
          "6",
          "Eric",
          "chinese",
          "tesla model 3",
          "milk"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Alice, Arnold, Carol, Eric])\nnationalities = EnumSort([swede, chinese, norwegian, german, brit, dane])\ncarModels = EnumSort([tesla_model_3, toyota_camry, ford_f150, chevrolet_silverado, honda_civic, bmw_3_series])\ndrinks = EnumSort([root_beer, milk, tea, water, coffee, boba_tea])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nowns_car = Function([people] -> [carModels])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The boba tea drinker is the person who owns a Ford F-150\nThe British person is directly left of Eric\nAlice is the person who owns a Honda Civic\nThe tea drinker is not in the first house\nEric is the Chinese\nThe tea drinker is the person who owns a BMW 3 Series\nThe German is in the second house\nThe person who owns a Chevrolet Silverado is somewhere to the left of the person who likes milk\nBob is in the fifth house\nThe person who owns a Toyota Camry is directly left of the one who only drinks water\nThe root beer lover is directly left of the Norwegian\nThe Dane is somewhere to the right of the person who owns a BMW 3 Series\nArnold is in the second house\nThe person who owns a Honda Civic is directly left of the person who owns a Ford F-150\nPeter is not in the third house\nThe person who owns a Toyota Camry is in the third house",
    "queries": "And( And(lives(Peter) == 1, has_nationality(Peter) == swede, owns_car(Peter) == chevrolet_silverado, has_drink(Peter) == coffee), And(lives(Arnold) == 2, has_nationality(Arnold) == german, owns_car(Arnold) == bmw_3_series, has_drink(Arnold) == tea), And(lives(Carol) == 3, has_nationality(Carol) == dane, owns_car(Carol) == toyota_camry, has_drink(Carol) == root_beer), And(lives(Alice) == 4, has_nationality(Alice) == norwegian, owns_car(Alice) == honda_civic, has_drink(Alice) == water), And(lives(Bob) == 5, has_nationality(Bob) == brit, owns_car(Bob) == ford_f150, has_drink(Bob) == boba_tea), And(lives(Eric) == 6, has_nationality(Eric) == chinese, owns_car(Eric) == tesla_model_3, has_drink(Eric) == milk) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-16",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Peter`, `Carol`, `Eric`\n - Each person prefers a unique type of vacation: `mountain`, `city`, `cultural`, `camping`, `beach`, `cruise`\n - Everyone has a favorite smoothie: `lime`, `desert`, `cherry`, `blueberry`, `dragonfruit`, `watermelon`\n - People have unique favorite sports: `tennis`, `volleyball`, `basketball`, `baseball`, `swimming`, `soccer`\n - Everyone has a unique favorite cigar: `blends`, `yellow monster`, `dunhill`, `pall mall`, `blue master`, `prince`\n - People have unique heights: `tall`, `very tall`, `average`, `super tall`, `very short`, `short`\n\nClues:\n1. Peter is the Prince smoker.\n2. The person who smokes many unique blends is the person who enjoys mountain retreats.\n3. The person who loves baseball is the person who is tall.\n4. The person who goes on cultural tours is the person who drinks Blueberry smoothies.\n5. The person who likes Cherry smoothies is not in the fourth house.\n6. The person who loves soccer is the person who enjoys camping trips.\n7. The person who is super tall is somewhere to the right of the person who likes going on cruises.\n8. The person who drinks Blueberry smoothies is the person who is tall.\n9. The person who is very tall is the Dunhill smoker.\n10. The person who enjoys mountain retreats is Eric.\n11. The person who is super tall is Alice.\n12. Bob is the person who smokes Blue Master.\n13. The person who loves volleyball is in the first house.\n14. Peter and the person who drinks Lime smoothies are next to each other.\n15. Carol is the person who likes Cherry smoothies.\n16. Peter is the person who is short.\n17. The person who smokes many unique blends is somewhere to the right of the Dragonfruit smoothie lover.\n18. The person who loves swimming is Carol.\n19. The person who is very short is the person who smokes Blue Master.\n20. The person who loves tennis is somewhere to the left of the person who is very short.\n21. The person who loves swimming is directly left of the person who enjoys camping trips.\n22. The person who drinks Blueberry smoothies is not in the third house.\n23. Alice is somewhere to the right of the person who drinks Lime smoothies.\n24. The person who loves tennis is the person who is super tall.\n25. The person who smokes Yellow Monster and the person who prefers city breaks are next to each other.\n26. The Watermelon smoothie lover is the person who is very short.\n27. The person who loves beach vacations is somewhere to the left of the person who is very tall.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Smoothie",
        "FavoriteSport",
        "Cigar",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "cruise",
          "dragonfruit",
          "volleyball",
          "prince",
          "short"
        ],
        [
          "2",
          "Eric",
          "mountain",
          "lime",
          "basketball",
          "blends",
          "average"
        ],
        [
          "3",
          "Alice",
          "beach",
          "desert",
          "tennis",
          "pall mall",
          "super tall"
        ],
        [
          "4",
          "Arnold",
          "cultural",
          "blueberry",
          "baseball",
          "yellow monster",
          "tall"
        ],
        [
          "5",
          "Carol",
          "city",
          "cherry",
          "swimming",
          "dunhill",
          "very tall"
        ],
        [
          "6",
          "Bob",
          "camping",
          "watermelon",
          "soccer",
          "blue master",
          "very short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Peter, Carol, Eric])\nvacations = EnumSort([mountain, city, cultural, camping, beach, cruise])\nsmoothies = EnumSort([lime, desert, cherry, blueberry, dragonfruit, watermelon])\nsports = EnumSort([tennis, volleyball, basketball, baseball, swimming, soccer])\ncigars = EnumSort([blends, yellow_monster, dunhill, pall_mall, blue_master, prince])\nheights = EnumSort([tall, very_tall, average, super_tall, very_short, short])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\ndrinks_smoothie = Function([people] -> [smoothies])\nloves_sport = Function([people] -> [sports])\nsmokes_cigar = Function([people] -> [cigars])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Peter is the Prince smoker\nThe person who smokes many unique blends is the person who enjoys mountain retreats\nThe person who loves baseball is the person who is tall\nThe person who goes on cultural tours is the person who drinks Blueberry smoothies\nThe person who likes Cherry smoothies is not in the fourth house\nThe person who loves soccer is the person who enjoys camping trips\nThe person who is super tall is somewhere to the right of the person who likes going on cruises\nThe person who drinks Blueberry smoothies is the person who is tall\nThe person who is very tall is the Dunhill smoker\nThe person who enjoys mountain retreats is Eric\nThe person who is super tall is Alice\nBob is the person who smokes Blue Master\nThe person who loves volleyball is in the first house\nPeter and the person who drinks Lime smoothies are next to each other\nCarol is the person who likes Cherry smoothies\nPeter is the person who is short\nThe person who smokes many unique blends is somewhere to the right of the Dragonfruit smoothie lover\nThe person who loves swimming is Carol\nThe person who is very short is the person who smokes Blue Master\nThe person who loves tennis is somewhere to the left of the person who is very short\nThe person who loves swimming is directly left of the person who enjoys camping trips\nThe person who drinks Blueberry smoothies is not in the third house\nAlice is somewhere to the right of the person who drinks Lime smoothies\nThe person who loves tennis is the person who is super tall\nThe person who smokes Yellow Monster and the person who prefers city breaks are next to each other\nThe Watermelon smoothie lover is the person who is very short\nThe person who loves beach vacations is somewhere to the left of the person who is very tall",
    "queries": "And( And(lives(Peter) == 1, prefers_vacation(Peter) == cruise, drinks_smoothie(Peter) == dragonfruit, loves_sport(Peter) == volleyball, smokes_cigar(Peter) == prince, has_height(Peter) == short), And(lives(Eric) == 2, prefers_vacation(Eric) == mountain, drinks_smoothie(Eric) == lime, loves_sport(Eric) == basketball, smokes_cigar(Eric) == blends, has_height(Eric) == average), And(lives(Alice) == 3, prefers_vacation(Alice) == beach, drinks_smoothie(Alice) == desert, loves_sport(Alice) == tennis, smokes_cigar(Alice) == pall_mall, has_height(Alice) == super_tall), And(lives(Arnold) == 4, prefers_vacation(Arnold) == cultural, drinks_smoothie(Arnold) == blueberry, loves_sport(Arnold) == baseball, smokes_cigar(Arnold) == yellow_monster, has_height(Arnold) == tall), And(lives(Carol) == 5, prefers_vacation(Carol) == city, drinks_smoothie(Carol) == cherry, loves_sport(Carol) == swimming, smokes_cigar(Carol) == dunhill, has_height(Carol) == very_tall), And(lives(Bob) == 6, prefers_vacation(Bob) == camping, drinks_smoothie(Bob) == watermelon, loves_sport(Bob) == soccer, smokes_cigar(Bob) == blue_master, has_height(Bob) == very_short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-30",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Carol`, `Bob`, `Alice`, `Peter`\n - Each person prefers a unique type of vacation: `mountain`, `camping`, `beach`, `cultural`, `city`, `cruise`\n - Everyone has something unique for lunch: `spaghetti`, `soup`, `stir fry`, `stew`, `grilled cheese`, `pizza`\n - Each person has a unique favorite drink: `boba tea`, `root beer`, `water`, `milk`, `coffee`, `tea`\n - People have unique heights: `tall`, `average`, `very tall`, `short`, `very short`, `super tall`\n\nClues:\n1. The person who enjoys mountain retreats and the person who prefers city breaks are next to each other.\n2. Alice is in the fourth house.\n3. The coffee drinker is the person who is a pizza lover.\n4. The person who is very tall is directly left of the person who enjoys mountain retreats.\n5. Peter is not in the first house.\n6. The boba tea drinker is in the fourth house.\n7. The person who loves stir fry is somewhere to the left of Eric.\n8. The person who likes milk is Bob.\n9. The person who loves the soup is not in the second house.\n10. The person who loves the spaghetti eater is not in the second house.\n11. The person who loves the stew is Eric.\n12. The root beer lover is the person who is short.\n13. The person who loves beach vacations is in the first house.\n14. The person who loves stir fry is the person who enjoys mountain retreats.\n15. The person who loves the soup is somewhere to the left of the person who loves the spaghetti eater.\n16. The boba tea drinker is somewhere to the left of the person who is a pizza lover.\n17. Arnold is the person who likes going on cruises.\n18. The person who is very short is somewhere to the right of the person who has an average height.\n19. The person who is tall is not in the fourth house.\n20. The person who prefers city breaks is the coffee drinker.\n21. Bob and the one who only drinks water are next to each other.\n22. The person who loves the stew is the person who enjoys camping trips.\n23. Arnold is the person who is very short.\n24. Carol is in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Food",
        "Drink",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "beach",
          "soup",
          "milk",
          "average"
        ],
        [
          "2",
          "Arnold",
          "cruise",
          "grilled cheese",
          "water",
          "very short"
        ],
        [
          "3",
          "Peter",
          "cultural",
          "spaghetti",
          "tea",
          "very tall"
        ],
        [
          "4",
          "Alice",
          "mountain",
          "stir fry",
          "boba tea",
          "super tall"
        ],
        [
          "5",
          "Carol",
          "city",
          "pizza",
          "coffee",
          "tall"
        ],
        [
          "6",
          "Eric",
          "camping",
          "stew",
          "root beer",
          "short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Carol, Bob, Alice, Peter])\nvacations = EnumSort([mountain, camping, beach, cultural, city, cruise])\nfoods = EnumSort([spaghetti, soup, stir_fry, stew, grilled_cheese, pizza])\ndrinks = EnumSort([boba_tea, root_beer, water, milk, coffee, tea])\nheights = EnumSort([tall, average, very_tall, short, very_short, super_tall])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nhas_food = Function([people] -> [foods])\nhas_drink = Function([people] -> [drinks])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who enjoys mountain retreats and the person who prefers city breaks are next to each other\nAlice is in the fourth house\nThe coffee drinker is the person who is a pizza lover\nThe person who is very tall is directly left of the person who enjoys mountain retreats\nPeter is not in the first house\nThe boba tea drinker is in the fourth house\nThe person who loves stir fry is somewhere to the left of Eric\nThe person who likes milk is Bob\nThe person who loves the soup is not in the second house\nThe person who loves the spaghetti eater is not in the second house\nThe person who loves the stew is Eric\nThe root beer lover is the person who is short\nThe person who loves beach vacations is in the first house\nThe person who loves stir fry is the person who enjoys mountain retreats\nThe person who loves the soup is somewhere to the left of the person who loves the spaghetti eater\nThe boba tea drinker is somewhere to the left of the person who is a pizza lover\nArnold is the person who likes going on cruises\nThe person who is very short is somewhere to the right of the person who has an average height\nThe person who is tall is not in the fourth house\nThe person who prefers city breaks is the coffee drinker\nBob and the one who only drinks water are next to each other\nThe person who loves the stew is the person who enjoys camping trips\nArnold is the person who is very short\nCarol is in the fifth house",
    "queries": "And( And(lives(Bob) == 1, prefers_vacation(Bob) == beach, has_food(Bob) == soup, has_drink(Bob) == milk, has_height(Bob) == average), And(lives(Arnold) == 2, prefers_vacation(Arnold) == cruise, has_food(Arnold) == grilled_cheese, has_drink(Arnold) == water, has_height(Arnold) == very_short), And(lives(Peter) == 3, prefers_vacation(Peter) == cultural, has_food(Peter) == spaghetti, has_drink(Peter) == tea, has_height(Peter) == very_tall), And(lives(Alice) == 4, prefers_vacation(Alice) == mountain, has_food(Alice) == stir_fry, has_drink(Alice) == boba_tea, has_height(Alice) == super_tall), And(lives(Carol) == 5, prefers_vacation(Carol) == city, has_food(Carol) == pizza, has_drink(Carol) == coffee, has_height(Carol) == tall), And(lives(Eric) == 6, prefers_vacation(Eric) == camping, has_food(Eric) == stew, has_drink(Eric) == root_beer, has_height(Eric) == short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-0",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Carol`, `Eric`, `Arnold`\n - People have unique favorite sports: `swimming`, `tennis`, `baseball`, `soccer`, `volleyball`, `basketball`\n - People have unique heights: `super tall`, `average`, `very short`, `very tall`, `short`, `tall`\n - People own unique car models: `chevrolet silverado`, `tesla model 3`, `toyota camry`, `ford f150`, `bmw 3 series`, `honda civic`\n\nClues:\n1. The person who is very short is the person who loves swimming.\n2. The person who loves baseball is the person who is short.\n3. Alice is the person who owns a Honda Civic.\n4. The person who loves baseball is somewhere to the right of Bob.\n5. The person who loves soccer is somewhere to the right of Carol.\n6. There are two houses between the person who loves volleyball and the person who has an average height.\n7. Arnold is in the third house.\n8. The person who loves tennis is not in the fourth house.\n9. The person who owns a Chevrolet Silverado and the person who owns a Toyota Camry are next to each other.\n10. Alice is directly left of the person who is super tall.\n11. The person who owns a Ford F-150 is the person who loves swimming.\n12. Eric is in the fourth house.\n13. The person who is short is the person who owns a Chevrolet Silverado.\n14. The person who loves baseball is in the fifth house.\n15. Eric is the person who owns a BMW 3 Series.\n16. The person who loves swimming is somewhere to the left of the person who is very tall.\n17. The person who has an average height is the person who owns a BMW 3 Series.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Height",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "volleyball",
          "tall",
          "honda civic"
        ],
        [
          "2",
          "Bob",
          "tennis",
          "super tall",
          "tesla model 3"
        ],
        [
          "3",
          "Arnold",
          "swimming",
          "very short",
          "ford f150"
        ],
        [
          "4",
          "Eric",
          "basketball",
          "average",
          "bmw 3 series"
        ],
        [
          "5",
          "Carol",
          "baseball",
          "short",
          "chevrolet silverado"
        ],
        [
          "6",
          "Peter",
          "soccer",
          "very tall",
          "toyota camry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Carol, Eric, Arnold])\nsports = EnumSort([swimming, tennis, baseball, soccer, volleyball, basketball])\nheights = EnumSort([super_tall, average, very_short, very_tall, short, tall])\ncars = EnumSort([chevrolet_silverado, tesla_model_3, toyota_camry, ford_f150, bmw_3_series, honda_civic])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_height = Function([people] -> [heights])\nhas_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is very short is the person who loves swimming\nThe person who loves baseball is the person who is short\nAlice is the person who owns a Honda Civic\nThe person who loves baseball is somewhere to the right of Bob\nThe person who loves soccer is somewhere to the right of Carol\nThere are two houses between the person who loves volleyball and the person who has an average height\nArnold is in the third house\nThe person who loves tennis is not in the fourth house\nThe person who owns a Chevrolet Silverado and the person who owns a Toyota Camry are next to each other\nAlice is directly left of the person who is super tall\nThe person who owns a Ford F-150 is the person who loves swimming\nEric is in the fourth house\nThe person who is short is the person who owns a Chevrolet Silverado\nThe person who loves baseball is in the fifth house\nEric is the person who owns a BMW 3 Series\nThe person who loves swimming is somewhere to the left of the person who is very tall\nThe person who has an average height is the person who owns a BMW 3 Series",
    "queries": "And( And(lives(Alice) == 1, has_sport(Alice) == volleyball, has_height(Alice) == tall, has_car(Alice) == honda_civic), And(lives(Bob) == 2, has_sport(Bob) == tennis, has_height(Bob) == super_tall, has_car(Bob) == tesla_model_3), And(lives(Arnold) == 3, has_sport(Arnold) == swimming, has_height(Arnold) == very_short, has_car(Arnold) == ford_f150), And(lives(Eric) == 4, has_sport(Eric) == basketball, has_height(Eric) == average, has_car(Eric) == bmw_3_series), And(lives(Carol) == 5, has_sport(Carol) == baseball, has_height(Carol) == short, has_car(Carol) == chevrolet_silverado), And(lives(Peter) == 6, has_sport(Peter) == soccer, has_height(Peter) == very_tall, has_car(Peter) == toyota_camry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-24",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Carol`, `Peter`, `Eric`, `Alice`\n - People have unique favorite music genres: `classical`, `hip hop`, `jazz`, `pop`, `rock`, `country`\n - Everyone has something unique for lunch: `soup`, `stir fry`, `grilled cheese`, `spaghetti`, `stew`, `pizza`\n - Each person lives in a unique style of house: `craftsman`, `ranch`, `mediterranean`, `modern`, `colonial`, `victorian`\n - Each person has a unique birthday month: `feb`, `sept`, `april`, `may`, `jan`, `mar`\n - People have unique hair colors: `red`, `black`, `blonde`, `brown`, `gray`, `auburn`\n\nClues:\n1. The person whose birthday is in April is Bob.\n2. The person residing in a Victorian house is the person who loves stir fry.\n3. There are two houses between the person who loves jazz music and the person who has auburn hair.\n4. The person who loves the stew is in the second house.\n5. The person who loves stir fry is the person whose birthday is in February.\n6. The person who loves classical music is in the fifth house.\n7. The person who loves jazz music is Alice.\n8. The person living in a colonial-style house is in the fifth house.\n9. The person who has gray hair is the person who loves the stew.\n10. The person whose birthday is in March is the person who has red hair.\n11. The person who loves country music is directly left of the person whose birthday is in September.\n12. The person whose birthday is in May is somewhere to the left of the person who loves country music.\n13. The person in a ranch-style home is the person who loves the soup.\n14. The person whose birthday is in January is the person who loves the stew.\n15. The person who has blonde hair is the person in a Mediterranean-style villa.\n16. Arnold is somewhere to the right of the person whose birthday is in April.\n17. The person whose birthday is in February is the person who loves hip-hop music.\n18. The person who has blonde hair is somewhere to the left of Eric.\n19. The person residing in a Victorian house is Carol.\n20. The person who has black hair is the person in a ranch-style home.\n21. The person in a modern-style house is not in the second house.\n22. The person who loves the spaghetti eater is somewhere to the left of the person who loves country music.\n23. The person who is a pizza lover is Bob.\n24. The person who loves pop music is somewhere to the left of the person whose birthday is in September.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Food",
        "HouseStyle",
        "Birthday",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "pop",
          "spaghetti",
          "mediterranean",
          "may",
          "blonde"
        ],
        [
          "2",
          "Eric",
          "country",
          "stew",
          "craftsman",
          "jan",
          "gray"
        ],
        [
          "3",
          "Alice",
          "jazz",
          "soup",
          "ranch",
          "sept",
          "black"
        ],
        [
          "4",
          "Bob",
          "rock",
          "pizza",
          "modern",
          "april",
          "brown"
        ],
        [
          "5",
          "Arnold",
          "classical",
          "grilled cheese",
          "colonial",
          "mar",
          "red"
        ],
        [
          "6",
          "Carol",
          "hip hop",
          "stir fry",
          "victorian",
          "feb",
          "auburn"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Carol, Peter, Eric, Alice])\nmusicGenres = EnumSort([classical, hip_hop, jazz, pop, rock, country])\nfoods = EnumSort([soup, stir_fry, grilled_cheese, spaghetti, stew, pizza])\nhouseStyles = EnumSort([craftsman, ranch, mediterranean, modern, colonial, victorian])\nmonths = EnumSort([feb, sept, april, may, jan, mar])\nhairColors = EnumSort([red, black, blonde, brown, gray, auburn])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_food = Function([people] -> [foods])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_birthday = Function([people] -> [months])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in April is Bob\nThe person residing in a Victorian house is the person who loves stir fry\nThere are two houses between the person who loves jazz music and the person who has auburn hair\nThe person who loves the stew is in the second house\nThe person who loves stir fry is the person whose birthday is in February\nThe person who loves classical music is in the fifth house\nThe person who loves jazz music is Alice\nThe person living in a colonial-style house is in the fifth house\nThe person who has gray hair is the person who loves the stew\nThe person whose birthday is in March is the person who has red hair\nThe person who loves country music is directly left of the person whose birthday is in September\nThe person whose birthday is in May is somewhere to the left of the person who loves country music\nThe person in a ranch-style home is the person who loves the soup\nThe person whose birthday is in January is the person who loves the stew\nThe person who has blonde hair is the person in a Mediterranean-style villa\nArnold is somewhere to the right of the person whose birthday is in April\nThe person whose birthday is in February is the person who loves hip-hop music\nThe person who has blonde hair is somewhere to the left of Eric\nThe person residing in a Victorian house is Carol\nThe person who has black hair is the person in a ranch-style home\nThe person in a modern-style house is not in the second house\nThe person who loves the spaghetti eater is somewhere to the left of the person who loves country music\nThe person who is a pizza lover is Bob\nThe person who loves pop music is somewhere to the left of the person whose birthday is in September",
    "queries": "And( And(lives(Peter) == 1, has_musicGenre(Peter) == pop, has_food(Peter) == spaghetti, has_houseStyle(Peter) == mediterranean, has_birthday(Peter) == may, has_hairColor(Peter) == blonde), And(lives(Eric) == 2, has_musicGenre(Eric) == country, has_food(Eric) == stew, has_houseStyle(Eric) == craftsman, has_birthday(Eric) == jan, has_hairColor(Eric) == gray), And(lives(Alice) == 3, has_musicGenre(Alice) == jazz, has_food(Alice) == soup, has_houseStyle(Alice) == ranch, has_birthday(Alice) == sept, has_hairColor(Alice) == black), And(lives(Bob) == 4, has_musicGenre(Bob) == rock, has_food(Bob) == pizza, has_houseStyle(Bob) == modern, has_birthday(Bob) == april, has_hairColor(Bob) == brown), And(lives(Arnold) == 5, has_musicGenre(Arnold) == classical, has_food(Arnold) == grilled_cheese, has_houseStyle(Arnold) == colonial, has_birthday(Arnold) == mar, has_hairColor(Arnold) == red), And(lives(Carol) == 6, has_musicGenre(Carol) == hip_hop, has_food(Carol) == stir_fry, has_houseStyle(Carol) == victorian, has_birthday(Carol) == feb, has_hairColor(Carol) == auburn) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-27",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Bob`, `Arnold`, `Carol`, `Alice`\n - Everyone has a favorite smoothie: `cherry`, `blueberry`, `dragonfruit`, `watermelon`, `lime`, `desert`\n - The people keep unique animals: `bird`, `cat`, `dog`, `rabbit`, `horse`, `fish`\n - The mothers' names in different houses are unique: `Sarah`, `Holly`, `Janelle`, `Aniya`, `Kailyn`, `Penny`\n - They all have a unique favorite flower: `lilies`, `iris`, `carnations`, `tulips`, `roses`, `daffodils`\n - Each person has an occupation: `lawyer`, `doctor`, `teacher`, `engineer`, `artist`, `nurse`\n\nClues:\n1. The person who loves a bouquet of daffodils is The person whose mother's name is Holly.\n2. The person who likes Cherry smoothies is not in the third house.\n3. The person who is a nurse is directly left of Peter.\n4. The person who is an artist is the person who loves the rose bouquet.\n5. The person who drinks Lime smoothies is not in the fifth house.\n6. The cat lover is The person whose mother's name is Sarah.\n7. Bob is the Desert smoothie lover.\n8. The Dragonfruit smoothie lover is in the sixth house.\n9. The person who loves the boquet of lilies and The person whose mother's name is Penny are next to each other.\n10. Peter is the bird keeper.\n11. The person whose mother's name is Kailyn is the person who loves the boquet of iris.\n12. Carol is somewhere to the left of the person who likes Cherry smoothies.\n13. The person who is a doctor is directly left of The person whose mother's name is Holly.\n14. Bob is The person whose mother's name is Janelle.\n15. Arnold is in the third house.\n16. Alice is the person who is an engineer.\n17. The Dragonfruit smoothie lover is the person who is an artist.\n18. The dog owner is directly left of the person who is a teacher.\n19. The person who keeps horses is The person whose mother's name is Aniya.\n20. The person who loves the boquet of lilies is directly left of the person who loves a carnations arrangement.\n21. There is one house between the Desert smoothie lover and the person who loves a carnations arrangement.\n22. The person who drinks Lime smoothies is somewhere to the right of The person whose mother's name is Aniya.\n23. The person whose mother's name is Kailyn is directly left of the fish enthusiast.\n24. The Watermelon smoothie lover is the rabbit owner.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Animal",
        "Mother",
        "Flower",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "desert",
          "dog",
          "Janelle",
          "tulips",
          "lawyer"
        ],
        [
          "2",
          "Carol",
          "blueberry",
          "horse",
          "Aniya",
          "lilies",
          "teacher"
        ],
        [
          "3",
          "Arnold",
          "watermelon",
          "rabbit",
          "Penny",
          "carnations",
          "nurse"
        ],
        [
          "4",
          "Peter",
          "lime",
          "bird",
          "Kailyn",
          "iris",
          "doctor"
        ],
        [
          "5",
          "Alice",
          "cherry",
          "fish",
          "Holly",
          "daffodils",
          "engineer"
        ],
        [
          "6",
          "Eric",
          "dragonfruit",
          "cat",
          "Sarah",
          "roses",
          "artist"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Bob, Arnold, Carol, Alice])\nsmoothies = EnumSort([cherry, blueberry, dragonfruit, watermelon, lime, desert])\nanimals = EnumSort([bird, cat, dog, rabbit, horse, fish])\nmothers = EnumSort([Sarah, Holly, Janelle, Aniya, Kailyn, Penny])\nflowers = EnumSort([lilies, iris, carnations, tulips, roses, daffodils])\noccupations = EnumSort([lawyer, doctor, teacher, engineer, artist, nurse])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_animal = Function([people] -> [animals])\nhas_mother = Function([people] -> [mothers])\nhas_flower = Function([people] -> [flowers])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves a bouquet of daffodils is The person whose mother's name is Holly\nThe person who likes Cherry smoothies is not in the third house\nThe person who is a nurse is directly left of Peter\nThe person who is an artist is the person who loves the rose bouquet\nThe person who drinks Lime smoothies is not in the fifth house\nThe cat lover is The person whose mother's name is Sarah\nBob is the Desert smoothie lover\nThe Dragonfruit smoothie lover is in the sixth house\nThe person who loves the boquet of lilies and The person whose mother's name is Penny are next to each other\nPeter is the bird keeper\nThe person whose mother's name is Kailyn is the person who loves the boquet of iris\nCarol is somewhere to the left of the person who likes Cherry smoothies\nThe person who is a doctor is directly left of The person whose mother's name is Holly\nBob is The person whose mother's name is Janelle\nArnold is in the third house\nAlice is the person who is an engineer\nThe Dragonfruit smoothie lover is the person who is an artist\nThe dog owner is directly left of the person who is a teacher\nThe person who keeps horses is The person whose mother's name is Aniya\nThe person who loves the boquet of lilies is directly left of the person who loves a carnations arrangement\nThere is one house between the Desert smoothie lover and the person who loves a carnations arrangement\nThe person who drinks Lime smoothies is somewhere to the right of The person whose mother's name is Aniya\nThe person whose mother's name is Kailyn is directly left of the fish enthusiast\nThe Watermelon smoothie lover is the rabbit owner",
    "queries": "And( And(lives(Bob) == 1, has_smoothie(Bob) == desert, has_animal(Bob) == dog, has_mother(Bob) == Janelle, has_flower(Bob) == tulips, has_occupation(Bob) == lawyer), And(lives(Carol) == 2, has_smoothie(Carol) == blueberry, has_animal(Carol) == horse, has_mother(Carol) == Aniya, has_flower(Carol) == lilies, has_occupation(Carol) == teacher), And(lives(Arnold) == 3, has_smoothie(Arnold) == watermelon, has_animal(Arnold) == rabbit, has_mother(Arnold) == Penny, has_flower(Arnold) == carnations, has_occupation(Arnold) == nurse), And(lives(Peter) == 4, has_smoothie(Peter) == lime, has_animal(Peter) == bird, has_mother(Peter) == Kailyn, has_flower(Peter) == iris, has_occupation(Peter) == doctor), And(lives(Alice) == 5, has_smoothie(Alice) == cherry, has_animal(Alice) == fish, has_mother(Alice) == Holly, has_flower(Alice) == daffodils, has_occupation(Alice) == engineer), And(lives(Eric) == 6, has_smoothie(Eric) == dragonfruit, has_animal(Eric) == cat, has_mother(Eric) == Sarah, has_flower(Eric) == roses, has_occupation(Eric) == artist) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-36",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Carol`, `Peter`, `Arnold`, `Bob`\n - Each person has a unique hobby: `knitting`, `cooking`, `woodworking`, `gardening`, `photography`, `painting`\n - Each person has a unique level of education: `doctorate`, `master`, `bachelor`, `trade school`, `high school`, `associate`\n - People have unique favorite sports: `swimming`, `basketball`, `baseball`, `soccer`, `volleyball`, `tennis`\n\nClues:\n1. The person who enjoys gardening is somewhere to the right of the person with a high school diploma.\n2. Alice is directly left of Bob.\n3. The person who loves tennis is directly left of the photography enthusiast.\n4. The woodworking hobbyist is the person who loves swimming.\n5. The person who loves swimming is Peter.\n6. The person with a bachelor's degree is directly left of Arnold.\n7. The person who loves basketball is the person who enjoys knitting.\n8. Eric is in the sixth house.\n9. The person who enjoys gardening is directly left of the person with a master's degree.\n10. The person who loves cooking is the person who loves tennis.\n11. Arnold is the person who paints as a hobby.\n12. The person with a doctorate is in the first house.\n13. There are two houses between the person with an associate's degree and the person who loves volleyball.\n14. The person with a bachelor's degree is the person who loves baseball.\n15. The person with an associate's degree is somewhere to the left of the woodworking hobbyist.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "Education",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "cooking",
          "doctorate",
          "tennis"
        ],
        [
          "2",
          "Bob",
          "photography",
          "associate",
          "soccer"
        ],
        [
          "3",
          "Peter",
          "woodworking",
          "high school",
          "swimming"
        ],
        [
          "4",
          "Carol",
          "gardening",
          "bachelor",
          "baseball"
        ],
        [
          "5",
          "Arnold",
          "painting",
          "master",
          "volleyball"
        ],
        [
          "6",
          "Eric",
          "knitting",
          "trade school",
          "basketball"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Carol, Peter, Arnold, Bob])\nhobbies = EnumSort([knitting, cooking, woodworking, gardening, photography, painting])\neducationLevels = EnumSort([doctorate, master, bachelor, trade_school, high_school, associate])\nsports = EnumSort([swimming, basketball, baseball, soccer, volleyball, tennis])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_education = Function([people] -> [educationLevels])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who enjoys gardening is somewhere to the right of the person with a high school diploma\nAlice is directly left of Bob\nThe person who loves tennis is directly left of the photography enthusiast\nThe woodworking hobbyist is the person who loves swimming\nThe person who loves swimming is Peter\nThe person with a bachelor's degree is directly left of Arnold\nThe person who loves basketball is the person who enjoys knitting\nEric is in the sixth house\nThe person who enjoys gardening is directly left of the person with a master's degree\nThe person who loves cooking is the person who loves tennis\nArnold is the person who paints as a hobby\nThe person with a doctorate is in the first house\nThere are two houses between the person with an associate's degree and the person who loves volleyball\nThe person with a bachelor's degree is the person who loves baseball\nThe person with an associate's degree is somewhere to the left of the woodworking hobbyist",
    "queries": "And( And(lives(Alice) == 1, has_hobby(Alice) == cooking, has_education(Alice) == doctorate, has_sport(Alice) == tennis), And(lives(Bob) == 2, has_hobby(Bob) == photography, has_education(Bob) == associate, has_sport(Bob) == soccer), And(lives(Peter) == 3, has_hobby(Peter) == woodworking, has_education(Peter) == high_school, has_sport(Peter) == swimming), And(lives(Carol) == 4, has_hobby(Carol) == gardening, has_education(Carol) == bachelor, has_sport(Carol) == baseball), And(lives(Arnold) == 5, has_hobby(Arnold) == painting, has_education(Arnold) == master, has_sport(Arnold) == volleyball), And(lives(Eric) == 6, has_hobby(Eric) == knitting, has_education(Eric) == trade_school, has_sport(Eric) == basketball) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-27",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Eric`, `Arnold`\n - People own unique car models: `honda civic`, `toyota camry`, `ford f150`, `tesla model 3`\n - Each person has a unique birthday month: `feb`, `april`, `sept`, `jan`\n - Everyone has something unique for lunch: `pizza`, `stew`, `spaghetti`, `grilled cheese`\n - People have unique heights: `average`, `tall`, `very short`, `short`\n - The mothers' names in different houses are unique: `Janelle`, `Kailyn`, `Holly`, `Aniya`\n\nClues:\n1. The person who is very short is the person who loves the stew.\n2. The person who is a pizza lover is Alice.\n3. The person who loves the spaghetti eater is the person who owns a Honda Civic.\n4. The person who owns a Toyota Camry is somewhere to the left of the person who is a pizza lover.\n5. The person whose birthday is in February is not in the fourth house.\n6. Eric is the person who owns a Tesla Model 3.\n7. The person who owns a Toyota Camry is somewhere to the right of The person whose mother's name is Janelle.\n8. The person who is tall is in the fourth house.\n9. The person whose birthday is in September is Arnold.\n10. The person who has an average height is somewhere to the right of Arnold.\n11. The person whose mother's name is Aniya and Alice are next to each other.\n12. The person whose birthday is in April and The person whose mother's name is Holly are next to each other.\n13. The person who is short is in the second house.\n14. The person who loves the stew and The person whose mother's name is Janelle are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Birthday",
        "Food",
        "Height",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "tesla model 3",
          "feb",
          "stew",
          "very short",
          "Kailyn"
        ],
        [
          "2",
          "Arnold",
          "honda civic",
          "sept",
          "spaghetti",
          "short",
          "Janelle"
        ],
        [
          "3",
          "Peter",
          "toyota camry",
          "april",
          "grilled cheese",
          "average",
          "Aniya"
        ],
        [
          "4",
          "Alice",
          "ford f150",
          "jan",
          "pizza",
          "tall",
          "Holly"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Eric, Arnold])\ncarModels = EnumSort([honda_civic, toyota_camry, ford_f150, tesla_model_3])\nbirthdayMonths = EnumSort([feb, april, sept, jan])\nfoods = EnumSort([pizza, stew, spaghetti, grilled_cheese])\nheights = EnumSort([average, tall, very_short, short])\nmothersNames = EnumSort([Janelle, Kailyn, Holly, Aniya])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nhas_birthday = Function([people] -> [birthdayMonths])\nhas_food = Function([people] -> [foods])\nhas_height = Function([people] -> [heights])\nhas_mother = Function([people] -> [mothersNames])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who is very short is the person who loves the stew\nThe person who is a pizza lover is Alice\nThe person who loves the spaghetti eater is the person who owns a Honda Civic\nThe person who owns a Toyota Camry is somewhere to the left of the person who is a pizza lover\nThe person whose birthday is in February is not in the fourth house\nEric is the person who owns a Tesla Model 3\nThe person who owns a Toyota Camry is somewhere to the right of The person whose mother's name is Janelle\nThe person who is tall is in the fourth house\nThe person whose birthday is in September is Arnold\nThe person who has an average height is somewhere to the right of Arnold\nThe person whose mother's name is Aniya and Alice are next to each other\nThe person whose birthday is in April and The person whose mother's name is Holly are next to each other\nThe person who is short is in the second house\nThe person who loves the stew and The person whose mother's name is Janelle are next to each other",
    "queries": "And( And( lives(Eric) == 1, owns_car(Eric) == tesla_model_3, has_birthday(Eric) == feb, has_food(Eric) == stew, has_height(Eric) == very_short, has_mother(Eric) == Kailyn ), And( lives(Arnold) == 2, owns_car(Arnold) == honda_civic, has_birthday(Arnold) == sept, has_food(Arnold) == spaghetti, has_height(Arnold) == short, has_mother(Arnold) == Janelle ), And( lives(Peter) == 3, owns_car(Peter) == toyota_camry, has_birthday(Peter) == april, has_food(Peter) == grilled_cheese, has_height(Peter) == average, has_mother(Peter) == Aniya ), And( lives(Alice) == 4, owns_car(Alice) == ford_f150, has_birthday(Alice) == jan, has_food(Alice) == pizza, has_height(Alice) == tall, has_mother(Alice) == Holly ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-37",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Bob`, `Arnold`\n - Each person has a unique type of pet: `hamster`, `fish`, `cat`, `dog`, `bird`\n - Each person has an occupation: `doctor`, `engineer`, `artist`, `lawyer`, `teacher`\n - Each person has a favorite color: `green`, `blue`, `yellow`, `red`, `white`\n - The people keep unique animals: `bird`, `cat`, `horse`, `fish`, `dog`\n\nClues:\n1. The person who owns a dog is Arnold.\n2. The bird keeper is in the fourth house.\n3. The person who keeps a pet bird is directly left of the dog owner.\n4. The person who loves white is somewhere to the left of the person who is a lawyer.\n5. The person who loves yellow is directly left of the person whose favorite color is green.\n6. The cat lover is Bob.\n7. The cat lover is somewhere to the left of Eric.\n8. The person who keeps horses is in the fifth house.\n9. The person who is a lawyer is directly left of the person who is a teacher.\n10. The person who is a doctor is in the first house.\n11. Alice is the person who loves yellow.\n12. The person who loves blue is directly left of the person with an aquarium of fish.\n13. The person who loves yellow is in the first house.\n14. The person with a pet hamster is the person who is an artist.\n15. Eric is the dog owner.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "Occupation",
        "Color",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "cat",
          "doctor",
          "yellow",
          "fish"
        ],
        [
          "2",
          "Bob",
          "bird",
          "engineer",
          "green",
          "cat"
        ],
        [
          "3",
          "Eric",
          "hamster",
          "artist",
          "white",
          "dog"
        ],
        [
          "4",
          "Arnold",
          "dog",
          "lawyer",
          "blue",
          "bird"
        ],
        [
          "5",
          "Peter",
          "fish",
          "teacher",
          "red",
          "horse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Bob, Arnold])\npets = EnumSort([hamster, fish, cat, dog, bird])\noccupations = EnumSort([doctor, engineer, artist, lawyer, teacher])\ncolors = EnumSort([green, blue, yellow, red, white])\nanimals = EnumSort([bird, cat, horse, fish, dog])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_occupation = Function([people] -> [occupations])\nhas_color = Function([people] -> [colors])\nkeeps_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who owns a dog is Arnold\nThe bird keeper is in the fourth house\nThe person who keeps a pet bird is directly left of the dog owner\nThe person who loves white is somewhere to the left of the person who is a lawyer\nThe person who loves yellow is directly left of the person whose favorite color is green\nThe cat lover is Bob\nThe cat lover is somewhere to the left of Eric\nThe person who keeps horses is in the fifth house\nThe person who is a lawyer is directly left of the person who is a teacher\nThe person who is a doctor is in the first house\nAlice is the person who loves yellow\nThe person who loves blue is directly left of the person with an aquarium of fish\nThe person who loves yellow is in the first house\nThe person with a pet hamster is the person who is an artist\nEric is the dog owner",
    "queries": "And( And(lives(Alice) == 1, has_pet(Alice) == cat, has_occupation(Alice) == doctor, has_color(Alice) == yellow, keeps_animal(Alice) == fish), And(lives(Bob) == 2, has_pet(Bob) == bird, has_occupation(Bob) == engineer, has_color(Bob) == green, keeps_animal(Bob) == cat), And(lives(Eric) == 3, has_pet(Eric) == hamster, has_occupation(Eric) == artist, has_color(Eric) == white, keeps_animal(Eric) == dog), And(lives(Arnold) == 4, has_pet(Arnold) == dog, has_occupation(Arnold) == lawyer, has_color(Arnold) == blue, keeps_animal(Arnold) == bird), And(lives(Peter) == 5, has_pet(Peter) == fish, has_occupation(Peter) == teacher, has_color(Peter) == red, keeps_animal(Peter) == horse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-25",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Alice`, `Peter`, `Arnold`, `Carol`\n - They all have a unique favorite flower: `daffodils`, `carnations`, `roses`, `tulips`, `iris`, `lilies`\n - People have unique heights: `very tall`, `super tall`, `average`, `short`, `very short`, `tall`\n - Each person has a favorite color: `blue`, `yellow`, `purple`, `red`, `green`, `white`\n - Everyone has a unique favorite cigar: `yellow monster`, `pall mall`, `prince`, `blue master`, `blends`, `dunhill`\n - People use unique phone models: `google pixel 6`, `iphone 13`, `xiaomi mi 11`, `samsung galaxy s21`, `huawei p50`, `oneplus 9`\n\nClues:\n1. The person who uses an iPhone 13 is the person who loves white.\n2. Peter is the person whose favorite color is red.\n3. The Prince smoker is directly left of the person partial to Pall Mall.\n4. The person who smokes Blue Master and the Dunhill smoker are next to each other.\n5. The person who loves blue is the person who uses a Xiaomi Mi 11.\n6. The person who loves white is Alice.\n7. The person who uses a OnePlus 9 is somewhere to the left of Arnold.\n8. The person who is tall is the person who smokes Blue Master.\n9. The person who uses a Samsung Galaxy S21 is the Dunhill smoker.\n10. Bob is directly left of the person who is very short.\n11. The person who loves a bouquet of daffodils is Eric.\n12. The person who loves the boquet of iris is the person who uses a OnePlus 9.\n13. The person who uses a Huawei P50 is the person who is very short.\n14. The person who smokes many unique blends is directly left of Peter.\n15. The Prince smoker is not in the first house.\n16. The person who is very tall is the person who loves a bouquet of daffodils.\n17. The person who uses a Google Pixel 6 is not in the fifth house.\n18. The person who is tall is not in the third house.\n19. The person who uses a Huawei P50 is somewhere to the left of the person who uses a Samsung Galaxy S21.\n20. Arnold is somewhere to the left of the person who is short.\n21. The person who loves the vase of tulips is not in the first house.\n22. The person who loves the boquet of lilies is directly left of the person who loves yellow.\n23. Arnold is the person who loves purple.\n24. The person who uses a OnePlus 9 and the person who uses a Samsung Galaxy S21 are next to each other.\n25. The person who has an average height is not in the first house.\n26. The person who loves the rose bouquet is Alice.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Height",
        "Color",
        "Cigar",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "carnations",
          "super tall",
          "blue",
          "blends",
          "xiaomi mi 11"
        ],
        [
          "2",
          "Peter",
          "lilies",
          "very short",
          "red",
          "prince",
          "huawei p50"
        ],
        [
          "3",
          "Eric",
          "daffodils",
          "very tall",
          "yellow",
          "pall mall",
          "google pixel 6"
        ],
        [
          "4",
          "Carol",
          "iris",
          "tall",
          "green",
          "blue master",
          "oneplus 9"
        ],
        [
          "5",
          "Arnold",
          "tulips",
          "average",
          "purple",
          "dunhill",
          "samsung galaxy s21"
        ],
        [
          "6",
          "Alice",
          "roses",
          "short",
          "white",
          "yellow monster",
          "iphone 13"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Alice, Peter, Arnold, Carol])\nflowers = EnumSort([daffodils, carnations, roses, tulips, iris, lilies])\nheights = EnumSort([very_tall, super_tall, average, short, very_short, tall])\ncolors = EnumSort([blue, yellow, purple, red, green, white])\ncigars = EnumSort([yellow_monster, pall_mall, prince, blue_master, blends, dunhill])\nphones = EnumSort([google_pixel_6, iphone_13, xiaomi_mi_11, samsung_galaxy_s21, huawei_p50, oneplus_9])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_height = Function([people] -> [heights])\nhas_color = Function([people] -> [colors])\nhas_cigar = Function([people] -> [cigars])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses an iPhone 13 is the person who loves white\nPeter is the person whose favorite color is red\nThe Prince smoker is directly left of the person partial to Pall Mall\nThe person who smokes Blue Master and the Dunhill smoker are next to each other\nThe person who loves blue is the person who uses a Xiaomi Mi 11\nThe person who loves white is Alice\nThe person who uses a OnePlus 9 is somewhere to the left of Arnold\nThe person who is tall is the person who smokes Blue Master\nThe person who uses a Samsung Galaxy S21 is the Dunhill smoker\nBob is directly left of the person who is very short\nThe person who loves a bouquet of daffodils is Eric\nThe person who loves the boquet of iris is the person who uses a OnePlus 9\nThe person who uses a Huawei P50 is the person who is very short\nThe person who smokes many unique blends is directly left of Peter\nThe Prince smoker is not in the first house\nThe person who is very tall is the person who loves a bouquet of daffodils\nThe person who uses a Google Pixel 6 is not in the fifth house\nThe person who is tall is not in the third house\nThe person who uses a Huawei P50 is somewhere to the left of the person who uses a Samsung Galaxy S21\nArnold is somewhere to the left of the person who is short\nThe person who loves the vase of tulips is not in the first house\nThe person who loves the boquet of lilies is directly left of the person who loves yellow\nArnold is the person who loves purple\nThe person who uses a OnePlus 9 and the person who uses a Samsung Galaxy S21 are next to each other\nThe person who has an average height is not in the first house\nThe person who loves the rose bouquet is Alice",
    "queries": "And( And(lives(Bob) == 1, has_flower(Bob) == carnations, has_height(Bob) == super_tall, has_color(Bob) == blue, has_cigar(Bob) == blends, has_phone(Bob) == xiaomi_mi_11), And(lives(Peter) == 2, has_flower(Peter) == lilies, has_height(Peter) == very_short, has_color(Peter) == red, has_cigar(Peter) == prince, has_phone(Peter) == huawei_p50), And(lives(Eric) == 3, has_flower(Eric) == daffodils, has_height(Eric) == very_tall, has_color(Eric) == yellow, has_cigar(Eric) == pall_mall, has_phone(Eric) == google_pixel_6), And(lives(Carol) == 4, has_flower(Carol) == iris, has_height(Carol) == tall, has_color(Carol) == green, has_cigar(Carol) == blue_master, has_phone(Carol) == oneplus_9), And(lives(Arnold) == 5, has_flower(Arnold) == tulips, has_height(Arnold) == average, has_color(Arnold) == purple, has_cigar(Arnold) == dunhill, has_phone(Arnold) == samsung_galaxy_s21), And(lives(Alice) == 6, has_flower(Alice) == roses, has_height(Alice) == short, has_color(Alice) == white, has_cigar(Alice) == yellow_monster, has_phone(Alice) == iphone_13) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-17",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Eric`, `Arnold`, `Alice`\n - The people keep unique animals: `dog`, `fish`, `bird`, `horse`, `cat`\n - The people are of nationalities: `dane`, `swede`, `brit`, `german`, `norwegian`\n - Each mother is accompanied by their child: `Meredith`, `Bella`, `Timothy`, `Samantha`, `Fred`\n - Each person has a unique type of pet: `bird`, `fish`, `hamster`, `cat`, `dog`\n\nClues:\n1. The dog owner is not in the third house.\n2. The person who keeps a pet bird is in the fourth house.\n3. The German is Eric.\n4. Bob is somewhere to the left of the person's child is named Fred.\n5. The person with a pet hamster is Arnold.\n6. The British person is the dog owner.\n7. The person's child is named Meredith is not in the third house.\n8. The fish enthusiast is the person's child is named Samantha.\n9. The person who is the mother of Timothy is the German.\n10. The person who has a cat is in the fifth house.\n11. Peter is not in the fourth house.\n12. The Swedish person and the person's child is named Samantha are next to each other.\n13. The Swedish person is Peter.\n14. The Dane is in the second house.\n15. Eric and the cat lover are next to each other.\n16. The German is in the first house.\n17. The person with an aquarium of fish is somewhere to the right of the bird keeper.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Nationality",
        "Children",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "bird",
          "german",
          "Timothy",
          "dog"
        ],
        [
          "2",
          "Arnold",
          "cat",
          "dane",
          "Meredith",
          "hamster"
        ],
        [
          "3",
          "Peter",
          "horse",
          "swede",
          "Bella",
          "fish"
        ],
        [
          "4",
          "Bob",
          "fish",
          "norwegian",
          "Samantha",
          "bird"
        ],
        [
          "5",
          "Alice",
          "dog",
          "brit",
          "Fred",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Eric, Arnold, Alice])\nanimals = EnumSort([dog, fish, bird, horse, cat])\nnationalities = EnumSort([dane, swede, brit, german, norwegian])\nchildren = EnumSort([Meredith, Bella, Timothy, Samantha, Fred])\npetTypes = EnumSort([bird, fish, hamster, cat, dog])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_nationality = Function([people] -> [nationalities])\nhas_child = Function([people] -> [children])\nhas_petType = Function([people] -> [petTypes])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The dog owner is not in the third house\nThe person who keeps a pet bird is in the fourth house\nThe German is Eric\nBob is somewhere to the left of the person's child is named Fred\nThe person with a pet hamster is Arnold\nThe British person is the dog owner\nThe person's child is named Meredith is not in the third house\nThe fish enthusiast is the person's child is named Samantha\nThe person who is the mother of Timothy is the German\nThe person who has a cat is in the fifth house\nPeter is not in the fourth house\nThe Swedish person and the person's child is named Samantha are next to each other\nThe Swedish person is Peter\nThe Dane is in the second house\nEric and the cat lover are next to each other\nThe German is in the first house\nThe person with an aquarium of fish is somewhere to the right of the bird keeper",
    "queries": "And( And(lives(Eric) == 1, has_animal(Eric) == bird, has_nationality(Eric) == german, has_child(Eric) == Timothy, has_petType(Eric) == dog), And(lives(Arnold) == 2, has_animal(Arnold) == cat, has_nationality(Arnold) == dane, has_child(Arnold) == Meredith, has_petType(Arnold) == hamster), And(lives(Peter) == 3, has_animal(Peter) == horse, has_nationality(Peter) == swede, has_child(Peter) == Bella, has_petType(Peter) == fish), And(lives(Bob) == 4, has_animal(Bob) == fish, has_nationality(Bob) == norwegian, has_child(Bob) == Samantha, has_petType(Bob) == bird), And(lives(Alice) == 5, has_animal(Alice) == dog, has_nationality(Alice) == brit, has_child(Alice) == Fred, has_petType(Alice) == cat) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-8",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Carol`, `Arnold`, `Eric`, `Peter`\n - Everyone has a favorite smoothie: `dragonfruit`, `watermelon`, `blueberry`, `lime`, `desert`, `cherry`\n - Each person has a unique level of education: `high school`, `doctorate`, `master`, `associate`, `trade school`, `bachelor`\n - People own unique car models: `ford f150`, `honda civic`, `chevrolet silverado`, `bmw 3 series`, `toyota camry`, `tesla model 3`\n\nClues:\n1. The person who owns a Chevrolet Silverado is directly left of the person who likes Cherry smoothies.\n2. The person who owns a Toyota Camry is not in the first house.\n3. The person who owns a BMW 3 Series is directly left of the person who owns a Ford F-150.\n4. The Desert smoothie lover is the person who attended trade school.\n5. The person with an associate's degree is somewhere to the left of the person who drinks Lime smoothies.\n6. Alice is directly left of Eric.\n7. The person with a bachelor's degree is in the sixth house.\n8. Bob is the person who owns a Chevrolet Silverado.\n9. The person with an associate's degree is somewhere to the right of the person who drinks Blueberry smoothies.\n10. The Dragonfruit smoothie lover is somewhere to the left of the person who drinks Blueberry smoothies.\n11. The person who drinks Lime smoothies is the person who owns a BMW 3 Series.\n12. Eric is somewhere to the right of the person with a master's degree.\n13. The person with a high school diploma is in the first house.\n14. The person with a doctorate is Peter.\n15. The person who drinks Blueberry smoothies is directly left of the Desert smoothie lover.\n16. Carol is not in the fourth house.\n17. The person who owns a Tesla Model 3 and the person with a master's degree are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Education",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "dragonfruit",
          "high school",
          "honda civic"
        ],
        [
          "2",
          "Peter",
          "blueberry",
          "doctorate",
          "toyota camry"
        ],
        [
          "3",
          "Bob",
          "desert",
          "trade school",
          "chevrolet silverado"
        ],
        [
          "4",
          "Arnold",
          "cherry",
          "associate",
          "tesla model 3"
        ],
        [
          "5",
          "Alice",
          "lime",
          "master",
          "bmw 3 series"
        ],
        [
          "6",
          "Eric",
          "watermelon",
          "bachelor",
          "ford f150"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Carol, Arnold, Eric, Peter])\nsmoothies = EnumSort([dragonfruit, watermelon, blueberry, lime, desert, cherry])\neducationLevels = EnumSort([high_school, doctorate, master, associate, trade_school, bachelor])\ncarModels = EnumSort([ford_f150, honda_civic, chevrolet_silverado, bmw_3_series, toyota_camry, tesla_model_3])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_education = Function([people] -> [educationLevels])\nhas_car = Function([people] -> [carModels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who owns a Chevrolet Silverado is directly left of the person who likes Cherry smoothies\nThe person who owns a Toyota Camry is not in the first house\nThe person who owns a BMW 3 Series is directly left of the person who owns a Ford F-150\nThe Desert smoothie lover is the person who attended trade school\nThe person with an associate's degree is somewhere to the left of the person who drinks Lime smoothies\nAlice is directly left of Eric\nThe person with a bachelor's degree is in the sixth house\nBob is the person who owns a Chevrolet Silverado\nThe person with an associate's degree is somewhere to the right of the person who drinks Blueberry smoothies\nThe Dragonfruit smoothie lover is somewhere to the left of the person who drinks Blueberry smoothies\nThe person who drinks Lime smoothies is the person who owns a BMW 3 Series\nEric is somewhere to the right of the person with a master's degree\nThe person with a high school diploma is in the first house\nThe person with a doctorate is Peter\nThe person who drinks Blueberry smoothies is directly left of the Desert smoothie lover\nCarol is not in the fourth house\nThe person who owns a Tesla Model 3 and the person with a master's degree are next to each other",
    "queries": "And( And(lives(Carol) == 1, has_smoothie(Carol) == dragonfruit, has_education(Carol) == high_school, has_car(Carol) == honda_civic), And(lives(Peter) == 2, has_smoothie(Peter) == blueberry, has_education(Peter) == doctorate, has_car(Peter) == toyota_camry), And(lives(Bob) == 3, has_smoothie(Bob) == desert, has_education(Bob) == trade_school, has_car(Bob) == chevrolet_silverado), And(lives(Arnold) == 4, has_smoothie(Arnold) == cherry, has_education(Arnold) == associate, has_car(Arnold) == tesla_model_3), And(lives(Alice) == 5, has_smoothie(Alice) == lime, has_education(Alice) == master, has_car(Alice) == bmw_3_series), And(lives(Eric) == 6, has_smoothie(Eric) == watermelon, has_education(Eric) == bachelor, has_car(Eric) == ford_f150) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-28",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Eric`, `Peter`, `Arnold`\n - Each person has a unique type of pet: `hamster`, `bird`, `fish`, `dog`, `cat`\n - Each person has a unique favorite drink: `coffee`, `milk`, `root beer`, `water`, `tea`\n - People have unique favorite sports: `soccer`, `swimming`, `tennis`, `baseball`, `basketball`\n - People use unique phone models: `oneplus 9`, `google pixel 6`, `iphone 13`, `huawei p50`, `samsung galaxy s21`\n\nClues:\n1. The root beer lover is the person who owns a dog.\n2. The person who uses an iPhone 13 is the root beer lover.\n3. There is one house between the person who owns a dog and the person who uses a Google Pixel 6.\n4. Bob is somewhere to the right of the person who uses a OnePlus 9.\n5. Alice is not in the fourth house.\n6. Eric is in the fifth house.\n7. The person who likes milk is the person who uses a Samsung Galaxy S21.\n8. The person who loves baseball is the person who uses a Google Pixel 6.\n9. The coffee drinker is in the third house.\n10. Peter is the tea drinker.\n11. The person who loves basketball is the person who owns a dog.\n12. The person with a pet hamster is the person who loves tennis.\n13. There are two houses between Alice and the tea drinker.\n14. The person who loves soccer is the tea drinker.\n15. The person who keeps a pet bird is directly left of the person with an aquarium of fish.\n16. The person with an aquarium of fish is the person who likes milk.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "Drink",
        "FavoriteSport",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "dog",
          "root beer",
          "basketball",
          "iphone 13"
        ],
        [
          "2",
          "Arnold",
          "hamster",
          "water",
          "tennis",
          "oneplus 9"
        ],
        [
          "3",
          "Bob",
          "cat",
          "coffee",
          "baseball",
          "google pixel 6"
        ],
        [
          "4",
          "Peter",
          "bird",
          "tea",
          "soccer",
          "huawei p50"
        ],
        [
          "5",
          "Eric",
          "fish",
          "milk",
          "swimming",
          "samsung galaxy s21"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Eric, Peter, Arnold])\npets = EnumSort([hamster, bird, fish, dog, cat])\ndrinks = EnumSort([coffee, milk, root_beer, water, tea])\nsports = EnumSort([soccer, swimming, tennis, baseball, basketball])\nphones = EnumSort([oneplus_9, google_pixel_6, iphone_13, huawei_p50, samsung_galaxy_s21])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_drink = Function([people] -> [drinks])\nhas_sport = Function([people] -> [sports])\nuses_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The root beer lover is the person who owns a dog\nThe person who uses an iPhone 13 is the root beer lover\nThere is one house between the person who owns a dog and the person who uses a Google Pixel 6\nBob is somewhere to the right of the person who uses a OnePlus 9\nAlice is not in the fourth house\nEric is in the fifth house\nThe person who likes milk is the person who uses a Samsung Galaxy S21\nThe person who loves baseball is the person who uses a Google Pixel 6\nThe coffee drinker is in the third house\nPeter is the tea drinker\nThe person who loves basketball is the person who owns a dog\nThe person with a pet hamster is the person who loves tennis\nThere are two houses between Alice and the tea drinker\nThe person who loves soccer is the tea drinker\nThe person who keeps a pet bird is directly left of the person with an aquarium of fish\nThe person with an aquarium of fish is the person who likes milk",
    "queries": "And( And(lives(Alice) == 1, has_pet(Alice) == dog, has_drink(Alice) == root_beer, has_sport(Alice) == basketball, uses_phone(Alice) == iphone_13), And(lives(Arnold) == 2, has_pet(Arnold) == hamster, has_drink(Arnold) == water, has_sport(Arnold) == tennis, uses_phone(Arnold) == oneplus_9), And(lives(Bob) == 3, has_pet(Bob) == cat, has_drink(Bob) == coffee, has_sport(Bob) == baseball, uses_phone(Bob) == google_pixel_6), And(lives(Peter) == 4, has_pet(Peter) == bird, has_drink(Peter) == tea, has_sport(Peter) == soccer, uses_phone(Peter) == huawei_p50), And(lives(Eric) == 5, has_pet(Eric) == fish, has_drink(Eric) == milk, has_sport(Eric) == swimming, uses_phone(Eric) == samsung_galaxy_s21) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-13",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Carol`, `Bob`, `Alice`, `Eric`, `Peter`\n - People have unique favorite sports: `swimming`, `basketball`, `volleyball`, `soccer`, `tennis`, `baseball`\n - People have unique favorite music genres: `rock`, `pop`, `jazz`, `country`, `hip hop`, `classical`\n - Each person has a unique level of education: `doctorate`, `trade school`, `bachelor`, `high school`, `associate`, `master`\n\nClues:\n1. Alice is in the fourth house.\n2. Alice is somewhere to the right of the person with a doctorate.\n3. The person with a high school diploma is somewhere to the right of the person who loves basketball.\n4. The person who loves volleyball is the person with a bachelor's degree.\n5. Alice is directly left of the person who loves jazz music.\n6. The person with a master's degree is the person who loves swimming.\n7. There is one house between the person who loves rock music and the person with a bachelor's degree.\n8. Carol is in the second house.\n9. The person who loves rock music is somewhere to the left of the person who loves pop music.\n10. The person who loves swimming is somewhere to the left of Carol.\n11. Eric is directly left of the person who loves hip-hop music.\n12. Alice is the person with an associate's degree.\n13. Alice is the person who loves classical music.\n14. Arnold is the person who loves soccer.\n15. The person who loves basketball and the person who loves volleyball are next to each other.\n16. Peter is the person who loves tennis.\n17. The person with a doctorate is Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "MusicGenre",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "swimming",
          "country",
          "master"
        ],
        [
          "2",
          "Carol",
          "baseball",
          "hip hop",
          "trade school"
        ],
        [
          "3",
          "Peter",
          "tennis",
          "rock",
          "doctorate"
        ],
        [
          "4",
          "Alice",
          "basketball",
          "classical",
          "associate"
        ],
        [
          "5",
          "Bob",
          "volleyball",
          "jazz",
          "bachelor"
        ],
        [
          "6",
          "Arnold",
          "soccer",
          "pop",
          "high school"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Carol, Bob, Alice, Eric, Peter])\nsports = EnumSort([swimming, basketball, volleyball, soccer, tennis, baseball])\nmusicGenres = EnumSort([rock, pop, jazz, country, hip_hop, classical])\neducationLevels = EnumSort([doctorate, trade_school, bachelor, high_school, associate, master])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_education = Function([people] -> [educationLevels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is in the fourth house\nAlice is somewhere to the right of the person with a doctorate\nThe person with a high school diploma is somewhere to the right of the person who loves basketball\nThe person who loves volleyball is the person with a bachelor's degree\nAlice is directly left of the person who loves jazz music\nThe person with a master's degree is the person who loves swimming\nThere is one house between the person who loves rock music and the person with a bachelor's degree\nCarol is in the second house\nThe person who loves rock music is somewhere to the left of the person who loves pop music\nThe person who loves swimming is somewhere to the left of Carol\nEric is directly left of the person who loves hip-hop music\nAlice is the person with an associate's degree\nAlice is the person who loves classical music\nArnold is the person who loves soccer\nThe person who loves basketball and the person who loves volleyball are next to each other\nPeter is the person who loves tennis\nThe person with a doctorate is Peter",
    "queries": "And( And(lives(Eric) == 1, has_sport(Eric) == swimming, has_musicGenre(Eric) == country, has_education(Eric) == master), And(lives(Carol) == 2, has_sport(Carol) == baseball, has_musicGenre(Carol) == hip_hop, has_education(Carol) == trade_school), And(lives(Peter) == 3, has_sport(Peter) == tennis, has_musicGenre(Peter) == rock, has_education(Peter) == doctorate), And(lives(Alice) == 4, has_sport(Alice) == basketball, has_musicGenre(Alice) == classical, has_education(Alice) == associate), And(lives(Bob) == 5, has_sport(Bob) == volleyball, has_musicGenre(Bob) == jazz, has_education(Bob) == bachelor), And(lives(Arnold) == 6, has_sport(Arnold) == soccer, has_musicGenre(Arnold) == pop, has_education(Arnold) == high_school) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-32",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Carol`, `Peter`, `Bob`, `Alice`, `Arnold`\n - People have unique favorite sports: `swimming`, `basketball`, `volleyball`, `tennis`, `soccer`, `baseball`\n - Each person has a unique birthday month: `mar`, `feb`, `may`, `sept`, `april`, `jan`\n - Everyone has a favorite smoothie: `cherry`, `lime`, `desert`, `watermelon`, `blueberry`, `dragonfruit`\n - People have unique favorite music genres: `country`, `hip hop`, `jazz`, `rock`, `pop`, `classical`\n\nClues:\n1. The person whose birthday is in March is not in the fifth house.\n2. Peter is not in the sixth house.\n3. The person whose birthday is in September is not in the sixth house.\n4. The person whose birthday is in March is somewhere to the left of the Desert smoothie lover.\n5. The person who loves jazz music is Eric.\n6. The person who loves swimming is somewhere to the right of the person who loves basketball.\n7. The person who loves swimming is the person who loves jazz music.\n8. There is one house between the person whose birthday is in September and the Desert smoothie lover.\n9. The Watermelon smoothie lover is the person who loves jazz music.\n10. There are two houses between the person whose birthday is in January and the Desert smoothie lover.\n11. The person whose birthday is in February and the person who drinks Lime smoothies are next to each other.\n12. There is one house between Bob and the person who loves jazz music.\n13. The Watermelon smoothie lover is somewhere to the right of the person whose birthday is in April.\n14. The person who loves rock music is Carol.\n15. The person who loves volleyball is directly left of the Dragonfruit smoothie lover.\n16. The person who loves rock music is directly left of the person whose birthday is in March.\n17. The Desert smoothie lover is the person who loves soccer.\n18. The person whose birthday is in January is the person who loves pop music.\n19. There are two houses between the person who drinks Blueberry smoothies and the Desert smoothie lover.\n20. The person whose birthday is in January is somewhere to the left of the person whose birthday is in March.\n21. The Dragonfruit smoothie lover is directly left of the person who loves baseball.\n22. Alice is the person who loves hip-hop music.\n23. The person who loves classical music is in the sixth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Birthday",
        "Smoothie",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "volleyball",
          "jan",
          "blueberry",
          "pop"
        ],
        [
          "2",
          "Carol",
          "basketball",
          "sept",
          "dragonfruit",
          "rock"
        ],
        [
          "3",
          "Bob",
          "baseball",
          "mar",
          "cherry",
          "country"
        ],
        [
          "4",
          "Alice",
          "soccer",
          "april",
          "desert",
          "hip hop"
        ],
        [
          "5",
          "Eric",
          "swimming",
          "feb",
          "watermelon",
          "jazz"
        ],
        [
          "6",
          "Arnold",
          "tennis",
          "may",
          "lime",
          "classical"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Carol, Peter, Bob, Alice, Arnold])\nsports = EnumSort([swimming, basketball, volleyball, tennis, soccer, baseball])\nmonths = EnumSort([mar, feb, may, sept, april, jan])\nsmoothies = EnumSort([cherry, lime, desert, watermelon, blueberry, dragonfruit])\nmusicGenres = EnumSort([country, hip_hop, jazz, rock, pop, classical])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_month = Function([people] -> [months])\nhas_smoothie = Function([people] -> [smoothies])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in March is not in the fifth house\nPeter is not in the sixth house\nThe person whose birthday is in September is not in the sixth house\nThe person whose birthday is in March is somewhere to the left of the Desert smoothie lover\nThe person who loves jazz music is Eric\nThe person who loves swimming is somewhere to the right of the person who loves basketball\nThe person who loves swimming is the person who loves jazz music\nThere is one house between the person whose birthday is in September and the Desert smoothie lover\nThe Watermelon smoothie lover is the person who loves jazz music\nThere are two houses between the person whose birthday is in January and the Desert smoothie lover\nThe person whose birthday is in February and the person who drinks Lime smoothies are next to each other\nThere is one house between Bob and the person who loves jazz music\nThe Watermelon smoothie lover is somewhere to the right of the person whose birthday is in April\nThe person who loves rock music is Carol\nThe person who loves volleyball is directly left of the Dragonfruit smoothie lover\nThe person who loves rock music is directly left of the person whose birthday is in March\nThe Desert smoothie lover is the person who loves soccer\nThe person whose birthday is in January is the person who loves pop music\nThere are two houses between the person who drinks Blueberry smoothies and the Desert smoothie lover\nThe person whose birthday is in January is somewhere to the left of the person whose birthday is in March\nThe Dragonfruit smoothie lover is directly left of the person who loves baseball\nAlice is the person who loves hip-hop music\nThe person who loves classical music is in the sixth house",
    "queries": "And( And(lives(Peter) == 1, has_sport(Peter) == volleyball, has_month(Peter) == jan, has_smoothie(Peter) == blueberry, has_musicGenre(Peter) == pop), And(lives(Carol) == 2, has_sport(Carol) == basketball, has_month(Carol) == sept, has_smoothie(Carol) == dragonfruit, has_musicGenre(Carol) == rock), And(lives(Bob) == 3, has_sport(Bob) == baseball, has_month(Bob) == mar, has_smoothie(Bob) == cherry, has_musicGenre(Bob) == country), And(lives(Alice) == 4, has_sport(Alice) == soccer, has_month(Alice) == april, has_smoothie(Alice) == desert, has_musicGenre(Alice) == hip_hop), And(lives(Eric) == 5, has_sport(Eric) == swimming, has_month(Eric) == feb, has_smoothie(Eric) == watermelon, has_musicGenre(Eric) == jazz), And(lives(Arnold) == 6, has_sport(Arnold) == tennis, has_month(Arnold) == may, has_smoothie(Arnold) == lime, has_musicGenre(Arnold) == classical) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-23",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Peter`, `Bob`, `Eric`, `Carol`\n - Everyone has a favorite smoothie: `dragonfruit`, `cherry`, `watermelon`, `lime`, `desert`, `blueberry`\n - Each person has a unique birthday month: `mar`, `april`, `jan`, `may`, `sept`, `feb`\n - The people keep unique animals: `cat`, `rabbit`, `horse`, `bird`, `fish`, `dog`\n\nClues:\n1. The bird keeper is in the third house.\n2. The person whose birthday is in May is somewhere to the left of Eric.\n3. Eric is the Desert smoothie lover.\n4. The rabbit owner is the person whose birthday is in January.\n5. The fish enthusiast is directly left of the person who likes Cherry smoothies.\n6. The person whose birthday is in September is Peter.\n7. There is one house between Peter and the rabbit owner.\n8. The person who drinks Lime smoothies is not in the sixth house.\n9. The Watermelon smoothie lover is the dog owner.\n10. The person whose birthday is in April is somewhere to the right of Carol.\n11. The bird keeper is somewhere to the left of the person who keeps horses.\n12. The person who drinks Lime smoothies is Alice.\n13. The Dragonfruit smoothie lover is directly left of Carol.\n14. The person who drinks Blueberry smoothies is the person whose birthday is in February.\n15. The person whose birthday is in September is in the third house.\n16. Bob is the Dragonfruit smoothie lover.\n17. The person who likes Cherry smoothies is somewhere to the left of the person whose birthday is in May.\n18. The rabbit owner is the Desert smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Birthday",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "dragonfruit",
          "mar",
          "cat"
        ],
        [
          "2",
          "Carol",
          "blueberry",
          "feb",
          "fish"
        ],
        [
          "3",
          "Peter",
          "cherry",
          "sept",
          "bird"
        ],
        [
          "4",
          "Alice",
          "lime",
          "may",
          "horse"
        ],
        [
          "5",
          "Eric",
          "desert",
          "jan",
          "rabbit"
        ],
        [
          "6",
          "Arnold",
          "watermelon",
          "april",
          "dog"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Peter, Bob, Eric, Carol])\nsmoothies = EnumSort([dragonfruit, cherry, watermelon, lime, desert, blueberry])\nmonths = EnumSort([mar, april, jan, may, sept, feb])\nanimals = EnumSort([cat, rabbit, horse, bird, fish, dog])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_month = Function([people] -> [months])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The bird keeper is in the third house\nThe person whose birthday is in May is somewhere to the left of Eric\nEric is the Desert smoothie lover\nThe rabbit owner is the person whose birthday is in January\nThe fish enthusiast is directly left of the person who likes Cherry smoothies\nThe person whose birthday is in September is Peter\nThere is one house between Peter and the rabbit owner\nThe person who drinks Lime smoothies is not in the sixth house\nThe Watermelon smoothie lover is the dog owner\nThe person whose birthday is in April is somewhere to the right of Carol\nThe bird keeper is somewhere to the left of the person who keeps horses\nThe person who drinks Lime smoothies is Alice\nThe Dragonfruit smoothie lover is directly left of Carol\nThe person who drinks Blueberry smoothies is the person whose birthday is in February\nThe person whose birthday is in September is in the third house\nBob is the Dragonfruit smoothie lover\nThe person who likes Cherry smoothies is somewhere to the left of the person whose birthday is in May\nThe rabbit owner is the Desert smoothie lover",
    "queries": "And( And(lives(Bob) == 1, has_smoothie(Bob) == dragonfruit, has_month(Bob) == mar, has_animal(Bob) == cat), And(lives(Carol) == 2, has_smoothie(Carol) == blueberry, has_month(Carol) == feb, has_animal(Carol) == fish), And(lives(Peter) == 3, has_smoothie(Peter) == cherry, has_month(Peter) == sept, has_animal(Peter) == bird), And(lives(Alice) == 4, has_smoothie(Alice) == lime, has_month(Alice) == may, has_animal(Alice) == horse), And(lives(Eric) == 5, has_smoothie(Eric) == desert, has_month(Eric) == jan, has_animal(Eric) == rabbit), And(lives(Arnold) == 6, has_smoothie(Arnold) == watermelon, has_month(Arnold) == april, has_animal(Arnold) == dog) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-8",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Alice`, `Eric`\n - The people are of nationalities: `swede`, `norwegian`, `brit`, `dane`\n - The mothers' names in different houses are unique: `Aniya`, `Holly`, `Kailyn`, `Janelle`\n - Each person has an occupation: `teacher`, `doctor`, `engineer`, `artist`\n - Each person has a unique type of pet: `bird`, `dog`, `fish`, `cat`\n - Each mother is accompanied by their child: `Meredith`, `Bella`, `Samantha`, `Fred`\n\nClues:\n1. The person with an aquarium of fish is somewhere to the left of The person whose mother's name is Holly.\n2. Peter is somewhere to the right of Arnold.\n3. The person's child is named Fred and the person who has a cat are next to each other.\n4. The Swedish person is The person whose mother's name is Kailyn.\n5. Eric is the Swedish person.\n6. The Norwegian is somewhere to the left of the person who is an artist.\n7. The person who is a teacher is not in the first house.\n8. The person's child is named Samantha is the Dane.\n9. The person who owns a dog is Peter.\n10. The person whose mother's name is Holly is the person who owns a dog.\n11. The person whose mother's name is Janelle is somewhere to the right of the person who owns a dog.\n12. The person's child is named Meredith is somewhere to the left of the Norwegian.\n13. The person's child is named Fred is not in the third house.\n14. There is one house between The person whose mother's name is Aniya and the person who is an engineer.\n15. The person's child is named Fred and the person who is a teacher are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Mother",
        "Occupation",
        "Pet",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "brit",
          "Aniya",
          "doctor",
          "fish",
          "Fred"
        ],
        [
          "2",
          "Eric",
          "swede",
          "Kailyn",
          "teacher",
          "cat",
          "Meredith"
        ],
        [
          "3",
          "Peter",
          "norwegian",
          "Holly",
          "engineer",
          "dog",
          "Bella"
        ],
        [
          "4",
          "Alice",
          "dane",
          "Janelle",
          "artist",
          "bird",
          "Samantha"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Alice, Eric])\nnationalities = EnumSort([swede, norwegian, brit, dane])\nmothers = EnumSort([Aniya, Holly, Kailyn, Janelle])\noccupations = EnumSort([teacher, doctor, engineer, artist])\npets = EnumSort([bird, dog, fish, cat])\nchildren = EnumSort([Meredith, Bella, Samantha, Fred])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_mother = Function([people] -> [mothers])\nhas_occupation = Function([people] -> [occupations])\nhas_pet = Function([people] -> [pets])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person with an aquarium of fish is somewhere to the left of The person whose mother's name is Holly\nPeter is somewhere to the right of Arnold\nThe person's child is named Fred and the person who has a cat are next to each other\nThe Swedish person is The person whose mother's name is Kailyn\nEric is the Swedish person\nThe Norwegian is somewhere to the left of the person who is an artist\nThe person who is a teacher is not in the first house\nThe person's child is named Samantha is the Dane\nThe person who owns a dog is Peter\nThe person whose mother's name is Holly is the person who owns a dog\nThe person whose mother's name is Janelle is somewhere to the right of the person who owns a dog\nThe person's child is named Meredith is somewhere to the left of the Norwegian\nThe person's child is named Fred is not in the third house\nThere is one house between The person whose mother's name is Aniya and the person who is an engineer\nThe person's child is named Fred and the person who is a teacher are next to each other",
    "queries": "And( And(lives(Arnold) == 1, has_nationality(Arnold) == brit, has_mother(Arnold) == Aniya, has_occupation(Arnold) == doctor, has_pet(Arnold) == fish, has_child(Arnold) == Fred), And(lives(Eric) == 2, has_nationality(Eric) == swede, has_mother(Eric) == Kailyn, has_occupation(Eric) == teacher, has_pet(Eric) == cat, has_child(Eric) == Meredith), And(lives(Peter) == 3, has_nationality(Peter) == norwegian, has_mother(Peter) == Holly, has_occupation(Peter) == engineer, has_pet(Peter) == dog, has_child(Peter) == Bella), And(lives(Alice) == 4, has_nationality(Alice) == dane, has_mother(Alice) == Janelle, has_occupation(Alice) == artist, has_pet(Alice) == bird, has_child(Alice) == Samantha) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-22",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Alice`, `Bob`\n - Each person has a unique level of education: `associate`, `doctorate`, `high school`, `bachelor`, `master`\n - Each mother is accompanied by their child: `Fred`, `Meredith`, `Bella`, `Timothy`, `Samantha`\n - Everyone has a unique favorite cigar: `prince`, `pall mall`, `blue master`, `dunhill`, `blends`\n - The people are of nationalities: `swede`, `brit`, `dane`, `german`, `norwegian`\n - People have unique favorite book genres: `romance`, `mystery`, `biography`, `science fiction`, `fantasy`\n\nClues:\n1. The person with a master's degree is the person partial to Pall Mall.\n2. The person with a high school diploma is in the fourth house.\n3. The person's child is named Samantha is in the first house.\n4. The Norwegian and the person with a master's degree are next to each other.\n5. The German is the Dunhill smoker.\n6. The person who is the mother of Timothy is directly left of the person with a master's degree.\n7. Arnold and the Dane are next to each other.\n8. The Swedish person is the person who loves mystery books.\n9. The Swedish person is Alice.\n10. Arnold is the person with an associate's degree.\n11. The person with a doctorate is in the second house.\n12. Peter is somewhere to the right of the person who loves biography books.\n13. The person who smokes many unique blends is Alice.\n14. The person who loves fantasy books is in the first house.\n15. Peter is the Norwegian.\n16. The person with a doctorate is the person's child is named Meredith.\n17. The Prince smoker is somewhere to the left of the person who smokes many unique blends.\n18. The person partial to Pall Mall is the person's child is named Bella.\n19. The person who loves romance books is Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Children",
        "Cigar",
        "Nationality",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "associate",
          "Samantha",
          "dunhill",
          "german",
          "fantasy"
        ],
        [
          "2",
          "Eric",
          "doctorate",
          "Meredith",
          "prince",
          "dane",
          "biography"
        ],
        [
          "3",
          "Alice",
          "bachelor",
          "Fred",
          "blends",
          "swede",
          "mystery"
        ],
        [
          "4",
          "Peter",
          "high school",
          "Timothy",
          "blue master",
          "norwegian",
          "science fiction"
        ],
        [
          "5",
          "Bob",
          "master",
          "Bella",
          "pall mall",
          "brit",
          "romance"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Alice, Bob])\neducationLevels = EnumSort([associate, doctorate, high_school, bachelor, master])\nchildren = EnumSort([Fred, Meredith, Bella, Timothy, Samantha])\ncigars = EnumSort([prince, pall_mall, blue_master, dunhill, blends])\nnationalities = EnumSort([swede, brit, dane, german, norwegian])\nbookGenres = EnumSort([romance, mystery, biography, science_fiction, fantasy])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_child = Function([people] -> [children])\nsmokes = Function([people] -> [cigars])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person with a master's degree is the person partial to Pall Mall\nThe person with a high school diploma is in the fourth house\nThe person's child is named Samantha is in the first house\nThe Norwegian and the person with a master's degree are next to each other\nThe German is the Dunhill smoker\nThe person who is the mother of Timothy is directly left of the person with a master's degree\nArnold and the Dane are next to each other\nThe Swedish person is the person who loves mystery books\nThe Swedish person is Alice\nArnold is the person with an associate's degree\nThe person with a doctorate is in the second house\nPeter is somewhere to the right of the person who loves biography books\nThe person who smokes many unique blends is Alice\nThe person who loves fantasy books is in the first house\nPeter is the Norwegian\nThe person with a doctorate is the person's child is named Meredith\nThe Prince smoker is somewhere to the left of the person who smokes many unique blends\nThe person partial to Pall Mall is the person's child is named Bella\nThe person who loves romance books is Bob",
    "queries": "And( And( lives(Arnold) == 1, has_education(Arnold) == associate, has_child(Arnold) == Samantha, smokes(Arnold) == dunhill, has_nationality(Arnold) == german, has_bookGenre(Arnold) == fantasy ), And( lives(Eric) == 2, has_education(Eric) == doctorate, has_child(Eric) == Meredith, smokes(Eric) == prince, has_nationality(Eric) == dane, has_bookGenre(Eric) == biography ), And( lives(Alice) == 3, has_education(Alice) == bachelor, has_child(Alice) == Fred, smokes(Alice) == blends, has_nationality(Alice) == swede, has_bookGenre(Alice) == mystery ), And( lives(Peter) == 4, has_education(Peter) == high_school, has_child(Peter) == Timothy, smokes(Peter) == blue_master, has_nationality(Peter) == norwegian, has_bookGenre(Peter) == science_fiction ), And( lives(Bob) == 5, has_education(Bob) == master, has_child(Bob) == Bella, smokes(Bob) == pall_mall, has_nationality(Bob) == brit, has_bookGenre(Bob) == romance ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-17",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Arnold`, `Carol`, `Eric`, `Alice`\n - Everyone has something unique for lunch: `spaghetti`, `stir fry`, `stew`, `soup`, `grilled cheese`, `pizza`\n - Everyone has a unique favorite cigar: `blends`, `pall mall`, `dunhill`, `yellow monster`, `prince`, `blue master`\n - Each person has a unique favorite drink: `boba tea`, `water`, `coffee`, `root beer`, `milk`, `tea`\n - Each person has a unique level of education: `associate`, `bachelor`, `trade school`, `doctorate`, `high school`, `master`\n\nClues:\n1. Bob is not in the second house.\n2. The person who smokes many unique blends is somewhere to the left of the person who is a pizza lover.\n3. The person partial to Pall Mall is somewhere to the right of the Dunhill smoker.\n4. The person who loves the soup is not in the first house.\n5. The person who likes milk is directly left of the person who loves the stew.\n6. The person who loves the soup is the person with a doctorate.\n7. The coffee drinker is the person with a high school diploma.\n8. There are two houses between the person who loves the spaghetti eater and the person with an associate's degree.\n9. The Prince smoker is not in the third house.\n10. The Dunhill smoker and Bob are next to each other.\n11. There are two houses between Alice and the boba tea drinker.\n12. The person with a high school diploma is Eric.\n13. The person who attended trade school is the Prince smoker.\n14. There is one house between the Dunhill smoker and the person who loves stir fry.\n15. The Dunhill smoker is directly left of the person who is a pizza lover.\n16. There is one house between the person partial to Pall Mall and the person who smokes Blue Master.\n17. The person who smokes Blue Master is the coffee drinker.\n18. The person with a bachelor's degree is the Dunhill smoker.\n19. Alice is the tea drinker.\n20. Arnold is directly left of the root beer lover.\n21. The person with a master's degree is Peter.\n22. Arnold is somewhere to the left of the person who likes milk.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Cigar",
        "Drink",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "spaghetti",
          "prince",
          "tea",
          "trade school"
        ],
        [
          "2",
          "Arnold",
          "soup",
          "blends",
          "water",
          "doctorate"
        ],
        [
          "3",
          "Carol",
          "grilled cheese",
          "dunhill",
          "root beer",
          "bachelor"
        ],
        [
          "4",
          "Bob",
          "pizza",
          "pall mall",
          "boba tea",
          "associate"
        ],
        [
          "5",
          "Peter",
          "stir fry",
          "yellow monster",
          "milk",
          "master"
        ],
        [
          "6",
          "Eric",
          "stew",
          "blue master",
          "coffee",
          "high school"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Arnold, Carol, Eric, Alice])\nfoods = EnumSort([spaghetti, stir_fry, stew, soup, grilled_cheese, pizza])\ncigars = EnumSort([blends, pall_mall, dunhill, yellow_monster, prince, blue_master])\ndrinks = EnumSort([boba_tea, water, coffee, root_beer, milk, tea])\neducation = EnumSort([associate, bachelor, trade_school, doctorate, high_school, master])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_cigar = Function([people] -> [cigars])\nhas_drink = Function([people] -> [drinks])\nhas_education = Function([people] -> [education])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Bob is not in the second house\nThe person who smokes many unique blends is somewhere to the left of the person who is a pizza lover\nThe person partial to Pall Mall is somewhere to the right of the Dunhill smoker\nThe person who loves the soup is not in the first house\nThe person who likes milk is directly left of the person who loves the stew\nThe person who loves the soup is the person with a doctorate\nThe coffee drinker is the person with a high school diploma\nThere are two houses between the person who loves the spaghetti eater and the person with an associate's degree\nThe Prince smoker is not in the third house\nThe Dunhill smoker and Bob are next to each other\nThere are two houses between Alice and the boba tea drinker\nThe person with a high school diploma is Eric\nThe person who attended trade school is the Prince smoker\nThere is one house between the Dunhill smoker and the person who loves stir fry\nThe Dunhill smoker is directly left of the person who is a pizza lover\nThere is one house between the person partial to Pall Mall and the person who smokes Blue Master\nThe person who smokes Blue Master is the coffee drinker\nThe person with a bachelor's degree is the Dunhill smoker\nAlice is the tea drinker\nArnold is directly left of the root beer lover\nThe person with a master's degree is Peter\nArnold is somewhere to the left of the person who likes milk",
    "queries": "And( And(lives(Alice) == 1, has_food(Alice) == spaghetti, has_cigar(Alice) == prince, has_drink(Alice) == tea, has_education(Alice) == trade_school), And(lives(Arnold) == 2, has_food(Arnold) == soup, has_cigar(Arnold) == blends, has_drink(Arnold) == water, has_education(Arnold) == doctorate), And(lives(Carol) == 3, has_food(Carol) == grilled_cheese, has_cigar(Carol) == dunhill, has_drink(Carol) == root_beer, has_education(Carol) == bachelor), And(lives(Bob) == 4, has_food(Bob) == pizza, has_cigar(Bob) == pall_mall, has_drink(Bob) == boba_tea, has_education(Bob) == associate), And(lives(Peter) == 5, has_food(Peter) == stir_fry, has_cigar(Peter) == yellow_monster, has_drink(Peter) == milk, has_education(Peter) == master), And(lives(Eric) == 6, has_food(Eric) == stew, has_cigar(Eric) == blue_master, has_drink(Eric) == coffee, has_education(Eric) == high_school) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-19",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Arnold`, `Bob`, `Alice`, `Eric`, `Peter`\n - They all have a unique favorite flower: `carnations`, `tulips`, `lilies`, `roses`, `daffodils`, `iris`\n - People have unique favorite book genres: `science fiction`, `fantasy`, `romance`, `mystery`, `biography`, `historical fiction`\n - People use unique phone models: `huawei p50`, `oneplus 9`, `iphone 13`, `xiaomi mi 11`, `samsung galaxy s21`, `google pixel 6`\n - People have unique hair colors: `black`, `gray`, `red`, `auburn`, `blonde`, `brown`\n - Each person has a favorite color: `yellow`, `green`, `red`, `white`, `blue`, `purple`\n\nClues:\n1. There is one house between the person who has gray hair and the person who uses an iPhone 13.\n2. The person who loves the rose bouquet is the person who has blonde hair.\n3. There is one house between the person who has gray hair and the person who loves yellow.\n4. Carol is somewhere to the right of the person who loves a bouquet of daffodils.\n5. The person who loves white is somewhere to the left of Peter.\n6. The person who loves white is somewhere to the left of the person who loves science fiction books.\n7. Arnold is directly left of the person who loves historical fiction books.\n8. The person who uses a Huawei P50 is the person who loves a bouquet of daffodils.\n9. The person who loves purple is somewhere to the left of the person who loves fantasy books.\n10. Eric is the person who loves science fiction books.\n11. The person who loves a bouquet of daffodils is the person who has auburn hair.\n12. Alice is the person whose favorite color is green.\n13. The person who loves fantasy books is in the second house.\n14. The person who uses a Samsung Galaxy S21 is Carol.\n15. The person who uses a Xiaomi Mi 11 is not in the fourth house.\n16. Eric is the person who has auburn hair.\n17. The person who loves the rose bouquet is somewhere to the left of the person who has red hair.\n18. The person who loves historical fiction books is the person who loves the rose bouquet.\n19. The person who uses a Xiaomi Mi 11 is somewhere to the right of the person who loves white.\n20. The person who has black hair is in the fourth house.\n21. The person whose favorite color is red is the person who loves mystery books.\n22. The person who loves historical fiction books and the person who loves the vase of tulips are next to each other.\n23. The person who has brown hair is the person who uses a OnePlus 9.\n24. The person who loves romance books is somewhere to the left of the person who loves fantasy books.\n25. The person who loves the boquet of lilies is in the second house.\n26. The person who loves the boquet of iris is somewhere to the right of the person whose favorite color is green.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "BookGenre",
        "PhoneModel",
        "HairColor",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "carnations",
          "romance",
          "oneplus 9",
          "brown",
          "purple"
        ],
        [
          "2",
          "Arnold",
          "lilies",
          "fantasy",
          "google pixel 6",
          "gray",
          "white"
        ],
        [
          "3",
          "Alice",
          "roses",
          "historical fiction",
          "xiaomi mi 11",
          "blonde",
          "green"
        ],
        [
          "4",
          "Peter",
          "tulips",
          "biography",
          "iphone 13",
          "black",
          "yellow"
        ],
        [
          "5",
          "Eric",
          "daffodils",
          "science fiction",
          "huawei p50",
          "auburn",
          "blue"
        ],
        [
          "6",
          "Carol",
          "iris",
          "mystery",
          "samsung galaxy s21",
          "red",
          "red"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Arnold, Bob, Alice, Eric, Peter])\nflowers = EnumSort([carnations, tulips, lilies, roses, daffodils, iris])\nbookGenres = EnumSort([science_fiction, fantasy, romance, mystery, biography, historical_fiction])\nphones = EnumSort([huawei_p50, oneplus_9, iphone_13, xiaomi_mi_11, samsung_galaxy_s21, google_pixel_6])\nhairColors = EnumSort([black, gray, red, auburn, blonde, brown])\ncolors = EnumSort([yellow, green, red, white, blue, purple])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_bookGenre = Function([people] -> [bookGenres])\nuses_phone = Function([people] -> [phones])\nhas_hairColor = Function([people] -> [hairColors])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the person who has gray hair and the person who uses an iPhone 13\nThe person who loves the rose bouquet is the person who has blonde hair\nThere is one house between the person who has gray hair and the person who loves yellow\nCarol is somewhere to the right of the person who loves a bouquet of daffodils\nThe person who loves white is somewhere to the left of Peter\nThe person who loves white is somewhere to the left of the person who loves science fiction books\nArnold is directly left of the person who loves historical fiction books\nThe person who uses a Huawei P50 is the person who loves a bouquet of daffodils\nThe person who loves purple is somewhere to the left of the person who loves fantasy books\nEric is the person who loves science fiction books\nThe person who loves a bouquet of daffodils is the person who has auburn hair\nAlice is the person whose favorite color is green\nThe person who loves fantasy books is in the second house\nThe person who uses a Samsung Galaxy S21 is Carol\nThe person who uses a Xiaomi Mi 11 is not in the fourth house\nEric is the person who has auburn hair\nThe person who loves the rose bouquet is somewhere to the left of the person who has red hair\nThe person who loves historical fiction books is the person who loves the rose bouquet\nThe person who uses a Xiaomi Mi 11 is somewhere to the right of the person who loves white\nThe person who has black hair is in the fourth house\nThe person whose favorite color is red is the person who loves mystery books\nThe person who loves historical fiction books and the person who loves the vase of tulips are next to each other\nThe person who has brown hair is the person who uses a OnePlus 9\nThe person who loves romance books is somewhere to the left of the person who loves fantasy books\nThe person who loves the boquet of lilies is in the second house\nThe person who loves the boquet of iris is somewhere to the right of the person whose favorite color is green",
    "queries": "And( And(lives(Bob) == 1, has_flower(Bob) == carnations, has_bookGenre(Bob) == romance, uses_phone(Bob) == oneplus_9, has_hairColor(Bob) == brown, has_color(Bob) == purple), And(lives(Arnold) == 2, has_flower(Arnold) == lilies, has_bookGenre(Arnold) == fantasy, uses_phone(Arnold) == google_pixel_6, has_hairColor(Arnold) == gray, has_color(Arnold) == white), And(lives(Alice) == 3, has_flower(Alice) == roses, has_bookGenre(Alice) == historical_fiction, uses_phone(Alice) == xiaomi_mi_11, has_hairColor(Alice) == blonde, has_color(Alice) == green), And(lives(Peter) == 4, has_flower(Peter) == tulips, has_bookGenre(Peter) == biography, uses_phone(Peter) == iphone_13, has_hairColor(Peter) == black, has_color(Peter) == yellow), And(lives(Eric) == 5, has_flower(Eric) == daffodils, has_bookGenre(Eric) == science_fiction, uses_phone(Eric) == huawei_p50, has_hairColor(Eric) == auburn, has_color(Eric) == blue), And(lives(Carol) == 6, has_flower(Carol) == iris, has_bookGenre(Carol) == mystery, uses_phone(Carol) == samsung_galaxy_s21, has_hairColor(Carol) == red, has_color(Carol) == red) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-6",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Peter`, `Arnold`, `Eric`\n - People have unique hair colors: `black`, `red`, `brown`, `gray`, `blonde`\n - Each person has a unique level of education: `bachelor`, `associate`, `high school`, `master`, `doctorate`\n - Each mother is accompanied by their child: `Bella`, `Timothy`, `Samantha`, `Meredith`, `Fred`\n - The people keep unique animals: `horse`, `cat`, `fish`, `bird`, `dog`\n\nClues:\n1. The person who has red hair is directly left of the bird keeper.\n2. Peter is the person with a doctorate.\n3. The fish enthusiast is somewhere to the right of the person who has brown hair.\n4. The cat lover is the person with a bachelor's degree.\n5. The person's child is named Samantha is somewhere to the right of the person who has black hair.\n6. The fish enthusiast is the person's child is named Bella.\n7. Arnold and the person with an associate's degree are next to each other.\n8. The person who keeps horses is the person who is the mother of Timothy.\n9. The person who has brown hair is somewhere to the right of Bob.\n10. The person who has blonde hair is the bird keeper.\n11. The person with a master's degree is the fish enthusiast.\n12. The person with a high school diploma is the person's child is named Fred.\n13. The person with a high school diploma is Eric.\n14. The person with a bachelor's degree is the person who has red hair.\n15. The person who has gray hair is the person with an associate's degree.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "Education",
        "Children",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "red",
          "bachelor",
          "Meredith",
          "cat"
        ],
        [
          "2",
          "Eric",
          "blonde",
          "high school",
          "Fred",
          "bird"
        ],
        [
          "3",
          "Peter",
          "brown",
          "doctorate",
          "Timothy",
          "horse"
        ],
        [
          "4",
          "Arnold",
          "black",
          "master",
          "Bella",
          "fish"
        ],
        [
          "5",
          "Alice",
          "gray",
          "associate",
          "Samantha",
          "dog"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Peter, Arnold, Eric])\nhairColors = EnumSort([black, red, brown, gray, blonde])\neducationLevels = EnumSort([bachelor, associate, high_school, master, doctorate])\nchildren = EnumSort([Bella, Timothy, Samantha, Meredith, Fred])\nanimals = EnumSort([horse, cat, fish, bird, dog])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_education = Function([people] -> [educationLevels])\nhas_child = Function([people] -> [children])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has red hair is directly left of the bird keeper\nPeter is the person with a doctorate\nThe fish enthusiast is somewhere to the right of the person who has brown hair\nThe cat lover is the person with a bachelor's degree\nThe person's child is named Samantha is somewhere to the right of the person who has black hair\nThe fish enthusiast is the person's child is named Bella\nArnold and the person with an associate's degree are next to each other\nThe person who keeps horses is the person who is the mother of Timothy\nThe person who has brown hair is somewhere to the right of Bob\nThe person who has blonde hair is the bird keeper\nThe person with a master's degree is the fish enthusiast\nThe person with a high school diploma is the person's child is named Fred\nThe person with a high school diploma is Eric\nThe person with a bachelor's degree is the person who has red hair\nThe person who has gray hair is the person with an associate's degree",
    "queries": "And( And(lives(Bob) == 1, has_hairColor(Bob) == red, has_education(Bob) == bachelor, has_child(Bob) == Meredith, has_animal(Bob) == cat), And(lives(Eric) == 2, has_hairColor(Eric) == blonde, has_education(Eric) == high_school, has_child(Eric) == Fred, has_animal(Eric) == bird), And(lives(Peter) == 3, has_hairColor(Peter) == brown, has_education(Peter) == doctorate, has_child(Peter) == Timothy, has_animal(Peter) == horse), And(lives(Arnold) == 4, has_hairColor(Arnold) == black, has_education(Arnold) == master, has_child(Arnold) == Bella, has_animal(Arnold) == fish), And(lives(Alice) == 5, has_hairColor(Alice) == gray, has_education(Alice) == associate, has_child(Alice) == Samantha, has_animal(Alice) == dog) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-33",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Alice`, `Eric`, `Peter`\n - People use unique phone models: `huawei p50`, `iphone 13`, `samsung galaxy s21`, `google pixel 6`, `oneplus 9`\n - People have unique hair colors: `red`, `brown`, `gray`, `blonde`, `black`\n - Everyone has a favorite smoothie: `dragonfruit`, `watermelon`, `cherry`, `desert`, `lime`\n - Each person has a unique hobby: `knitting`, `photography`, `gardening`, `painting`, `cooking`\n - They all have a unique favorite flower: `daffodils`, `tulips`, `roses`, `carnations`, `lilies`\n\nClues:\n1. Bob is the person who loves the vase of tulips.\n2. The person who has red hair is Bob.\n3. The person who loves a bouquet of daffodils is the person who uses a Google Pixel 6.\n4. The person who likes Cherry smoothies is the person who enjoys gardening.\n5. The person who uses a Google Pixel 6 is somewhere to the right of the person who loves a carnations arrangement.\n6. The person who has brown hair and the person who loves a carnations arrangement are next to each other.\n7. The person who paints as a hobby is somewhere to the left of the person who loves cooking.\n8. The person who uses an iPhone 13 is somewhere to the left of the person who loves a carnations arrangement.\n9. The person who has brown hair is somewhere to the right of the person who uses a OnePlus 9.\n10. The person who paints as a hobby is Peter.\n11. Eric is directly left of the person who uses an iPhone 13.\n12. The person who uses a OnePlus 9 is directly left of the person who uses a Samsung Galaxy S21.\n13. Arnold is the person who drinks Lime smoothies.\n14. The person who has red hair is the person who enjoys gardening.\n15. The Dragonfruit smoothie lover and the Desert smoothie lover are next to each other.\n16. The person who has brown hair is directly left of the Desert smoothie lover.\n17. The person who loves the boquet of lilies is directly left of the person who loves a carnations arrangement.\n18. The person who drinks Lime smoothies is the person who has black hair.\n19. The person who uses a Huawei P50 is the person who has gray hair.\n20. The person who drinks Lime smoothies is the photography enthusiast.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "HairColor",
        "Smoothie",
        "Hobby",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "oneplus 9",
          "red",
          "cherry",
          "gardening",
          "tulips"
        ],
        [
          "2",
          "Eric",
          "samsung galaxy s21",
          "blonde",
          "watermelon",
          "knitting",
          "roses"
        ],
        [
          "3",
          "Peter",
          "iphone 13",
          "brown",
          "dragonfruit",
          "painting",
          "lilies"
        ],
        [
          "4",
          "Alice",
          "huawei p50",
          "gray",
          "desert",
          "cooking",
          "carnations"
        ],
        [
          "5",
          "Arnold",
          "google pixel 6",
          "black",
          "lime",
          "photography",
          "daffodils"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Alice, Eric, Peter])\nphoneModels = EnumSort([huawei_p50, iphone_13, samsung_galaxy_s21, google_pixel_6, oneplus_9])\nhairColors = EnumSort([red, brown, gray, blonde, black])\nsmoothies = EnumSort([dragonfruit, watermelon, cherry, desert, lime])\nhobbies = EnumSort([knitting, photography, gardening, painting, cooking])\nflowers = EnumSort([daffodils, tulips, roses, carnations, lilies])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_hairColor = Function([people] -> [hairColors])\ndrinks_smoothie = Function([people] -> [smoothies])\nhas_hobby = Function([people] -> [hobbies])\nloves_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Bob is the person who loves the vase of tulips\nThe person who has red hair is Bob\nThe person who loves a bouquet of daffodils is the person who uses a Google Pixel 6\nThe person who likes Cherry smoothies is the person who enjoys gardening\nThe person who uses a Google Pixel 6 is somewhere to the right of the person who loves a carnations arrangement\nThe person who has brown hair and the person who loves a carnations arrangement are next to each other\nThe person who paints as a hobby is somewhere to the left of the person who loves cooking\nThe person who uses an iPhone 13 is somewhere to the left of the person who loves a carnations arrangement\nThe person who has brown hair is somewhere to the right of the person who uses a OnePlus 9\nThe person who paints as a hobby is Peter\nEric is directly left of the person who uses an iPhone 13\nThe person who uses a OnePlus 9 is directly left of the person who uses a Samsung Galaxy S21\nArnold is the person who drinks Lime smoothies\nThe person who has red hair is the person who enjoys gardening\nThe Dragonfruit smoothie lover and the Desert smoothie lover are next to each other\nThe person who has brown hair is directly left of the Desert smoothie lover\nThe person who loves the boquet of lilies is directly left of the person who loves a carnations arrangement\nThe person who drinks Lime smoothies is the person who has black hair\nThe person who uses a Huawei P50 is the person who has gray hair\nThe person who drinks Lime smoothies is the photography enthusiast",
    "queries": "And( And( lives(Bob) == 1, uses_phone(Bob) == oneplus_9, has_hairColor(Bob) == red, drinks_smoothie(Bob) == cherry, has_hobby(Bob) == gardening, loves_flower(Bob) == tulips ), And( lives(Eric) == 2, uses_phone(Eric) == samsung_galaxy_s21, has_hairColor(Eric) == blonde, drinks_smoothie(Eric) == watermelon, has_hobby(Eric) == knitting, loves_flower(Eric) == roses ), And( lives(Peter) == 3, uses_phone(Peter) == iphone_13, has_hairColor(Peter) == brown, drinks_smoothie(Peter) == dragonfruit, has_hobby(Peter) == painting, loves_flower(Peter) == lilies ), And( lives(Alice) == 4, uses_phone(Alice) == huawei_p50, has_hairColor(Alice) == gray, drinks_smoothie(Alice) == desert, has_hobby(Alice) == cooking, loves_flower(Alice) == carnations ), And( lives(Arnold) == 5, uses_phone(Arnold) == google_pixel_6, has_hairColor(Arnold) == black, drinks_smoothie(Arnold) == lime, has_hobby(Arnold) == photography, loves_flower(Arnold) == daffodils ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-18",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Arnold`, `Alice`, `Peter`\n - People own unique car models: `bmw 3 series`, `toyota camry`, `honda civic`, `tesla model 3`, `ford f150`\n - People use unique phone models: `google pixel 6`, `huawei p50`, `oneplus 9`, `iphone 13`, `samsung galaxy s21`\n - Each person has a unique hobby: `painting`, `gardening`, `knitting`, `photography`, `cooking`\n - Each person has an occupation: `lawyer`, `artist`, `teacher`, `engineer`, `doctor`\n - Each person has a favorite color: `white`, `blue`, `green`, `red`, `yellow`\n\nClues:\n1. The person who owns a Ford F-150 is directly left of the person who is a teacher.\n2. The photography enthusiast is Arnold.\n3. The person who uses a Huawei P50 is Eric.\n4. The person who enjoys gardening is somewhere to the right of the person who loves blue.\n5. The person who enjoys knitting is the person who loves white.\n6. The person who owns a Ford F-150 is the person whose favorite color is red.\n7. There is one house between the person who owns a BMW 3 Series and the person who loves yellow.\n8. The person who is an artist is the person who uses a OnePlus 9.\n9. The person who is a doctor is Arnold.\n10. The person who enjoys gardening is the person who uses a Huawei P50.\n11. There is one house between the person who loves blue and the person who loves yellow.\n12. The person who owns a BMW 3 Series and the person who uses a Google Pixel 6 are next to each other.\n13. The person who uses a Google Pixel 6 is directly left of the person who owns a Honda Civic.\n14. Peter is the person who is an engineer.\n15. The person who uses a Samsung Galaxy S21 is the person who owns a Toyota Camry.\n16. The person who owns a Honda Civic is Alice.\n17. The person who owns a Tesla Model 3 is the person who paints as a hobby.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "PhoneModel",
        "Hobby",
        "Occupation",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "bmw 3 series",
          "iphone 13",
          "photography",
          "doctor",
          "blue"
        ],
        [
          "2",
          "Peter",
          "tesla model 3",
          "google pixel 6",
          "painting",
          "engineer",
          "green"
        ],
        [
          "3",
          "Alice",
          "honda civic",
          "oneplus 9",
          "cooking",
          "artist",
          "yellow"
        ],
        [
          "4",
          "Eric",
          "ford f150",
          "huawei p50",
          "gardening",
          "lawyer",
          "red"
        ],
        [
          "5",
          "Bob",
          "toyota camry",
          "samsung galaxy s21",
          "knitting",
          "teacher",
          "white"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Arnold, Alice, Peter])\ncarModels = EnumSort([bmw_3_series, toyota_camry, honda_civic, tesla_model_3, ford_f150])\nphoneModels = EnumSort([google_pixel_6, huawei_p50, oneplus_9, iphone_13, samsung_galaxy_s21])\nhobbies = EnumSort([painting, gardening, knitting, photography, cooking])\noccupations = EnumSort([lawyer, artist, teacher, engineer, doctor])\ncolors = EnumSort([white, blue, green, red, yellow])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nuses_phone = Function([people] -> [phoneModels])\nhas_hobby = Function([people] -> [hobbies])\nhas_occupation = Function([people] -> [occupations])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who owns a Ford F-150 is directly left of the person who is a teacher\nThe photography enthusiast is Arnold\nThe person who uses a Huawei P50 is Eric\nThe person who enjoys gardening is somewhere to the right of the person who loves blue\nThe person who enjoys knitting is the person who loves white\nThe person who owns a Ford F-150 is the person whose favorite color is red\nThere is one house between the person who owns a BMW 3 Series and the person who loves yellow\nThe person who is an artist is the person who uses a OnePlus 9\nThe person who is a doctor is Arnold\nThe person who enjoys gardening is the person who uses a Huawei P50\nThere is one house between the person who loves blue and the person who loves yellow\nThe person who owns a BMW 3 Series and the person who uses a Google Pixel 6 are next to each other\nThe person who uses a Google Pixel 6 is directly left of the person who owns a Honda Civic\nPeter is the person who is an engineer\nThe person who uses a Samsung Galaxy S21 is the person who owns a Toyota Camry\nThe person who owns a Honda Civic is Alice\nThe person who owns a Tesla Model 3 is the person who paints as a hobby",
    "queries": "And( And(lives(Arnold) == 1, owns_car(Arnold) == bmw_3_series, uses_phone(Arnold) == iphone_13, has_hobby(Arnold) == photography, has_occupation(Arnold) == doctor, has_color(Arnold) == blue), And(lives(Peter) == 2, owns_car(Peter) == tesla_model_3, uses_phone(Peter) == google_pixel_6, has_hobby(Peter) == painting, has_occupation(Peter) == engineer, has_color(Peter) == green), And(lives(Alice) == 3, owns_car(Alice) == honda_civic, uses_phone(Alice) == oneplus_9, has_hobby(Alice) == cooking, has_occupation(Alice) == artist, has_color(Alice) == yellow), And(lives(Eric) == 4, owns_car(Eric) == ford_f150, uses_phone(Eric) == huawei_p50, has_hobby(Eric) == gardening, has_occupation(Eric) == lawyer, has_color(Eric) == red), And(lives(Bob) == 5, owns_car(Bob) == toyota_camry, uses_phone(Bob) == samsung_galaxy_s21, has_hobby(Bob) == knitting, has_occupation(Bob) == teacher, has_color(Bob) == white) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-36",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Bob`, `Eric`, `Arnold`\n - Each person has a unique type of pet: `hamster`, `bird`, `fish`, `cat`, `dog`\n - Each person has an occupation: `doctor`, `engineer`, `lawyer`, `artist`, `teacher`\n - Each person lives in a unique style of house: `colonial`, `modern`, `ranch`, `craftsman`, `victorian`\n - Each person has a unique level of education: `high school`, `bachelor`, `master`, `doctorate`, `associate`\n\nClues:\n1. There are two houses between the person with a master's degree and the person in a modern-style house.\n2. The person with an aquarium of fish is the person who is an artist.\n3. The person who has a cat is the person who is an engineer.\n4. The person with a bachelor's degree is the person with an aquarium of fish.\n5. The person who has a cat is somewhere to the right of the person with an associate's degree.\n6. The person with a master's degree is the person who is a lawyer.\n7. The person who is a teacher is somewhere to the right of the person who keeps a pet bird.\n8. The person with an associate's degree is the person living in a colonial-style house.\n9. Peter is the person in a Craftsman-style house.\n10. The person residing in a Victorian house is in the second house.\n11. The person who is a teacher is Bob.\n12. The person with an associate's degree is in the fourth house.\n13. The person with a bachelor's degree is somewhere to the right of the person with a high school diploma.\n14. There is one house between the person who owns a dog and the person in a ranch-style home.\n15. Bob is somewhere to the right of Alice.\n16. Eric is the person with a bachelor's degree.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "Occupation",
        "HouseStyle",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "dog",
          "doctor",
          "craftsman",
          "high school"
        ],
        [
          "2",
          "Alice",
          "bird",
          "lawyer",
          "victorian",
          "master"
        ],
        [
          "3",
          "Eric",
          "fish",
          "artist",
          "ranch",
          "bachelor"
        ],
        [
          "4",
          "Bob",
          "hamster",
          "teacher",
          "colonial",
          "associate"
        ],
        [
          "5",
          "Arnold",
          "cat",
          "engineer",
          "modern",
          "doctorate"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Bob, Eric, Arnold])\npets = EnumSort([hamster, bird, fish, cat, dog])\noccupations = EnumSort([doctor, engineer, lawyer, artist, teacher])\nhouseStyles = EnumSort([colonial, modern, ranch, craftsman, victorian])\neducationLevels = EnumSort([high_school, bachelor, master, doctorate, associate])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_occupation = Function([people] -> [occupations])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_education = Function([people] -> [educationLevels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There are two houses between the person with a master's degree and the person in a modern-style house\nThe person with an aquarium of fish is the person who is an artist\nThe person who has a cat is the person who is an engineer\nThe person with a bachelor's degree is the person with an aquarium of fish\nThe person who has a cat is somewhere to the right of the person with an associate's degree\nThe person with a master's degree is the person who is a lawyer\nThe person who is a teacher is somewhere to the right of the person who keeps a pet bird\nThe person with an associate's degree is the person living in a colonial-style house\nPeter is the person in a Craftsman-style house\nThe person residing in a Victorian house is in the second house\nThe person who is a teacher is Bob\nThe person with an associate's degree is in the fourth house\nThe person with a bachelor's degree is somewhere to the right of the person with a high school diploma\nThere is one house between the person who owns a dog and the person in a ranch-style home\nBob is somewhere to the right of Alice\nEric is the person with a bachelor's degree",
    "queries": "And( And(lives(Peter) == 1, has_pet(Peter) == dog, has_occupation(Peter) == doctor, has_houseStyle(Peter) == craftsman, has_education(Peter) == high_school), And(lives(Alice) == 2, has_pet(Alice) == bird, has_occupation(Alice) == lawyer, has_houseStyle(Alice) == victorian, has_education(Alice) == master), And(lives(Eric) == 3, has_pet(Eric) == fish, has_occupation(Eric) == artist, has_houseStyle(Eric) == ranch, has_education(Eric) == bachelor), And(lives(Bob) == 4, has_pet(Bob) == hamster, has_occupation(Bob) == teacher, has_houseStyle(Bob) == colonial, has_education(Bob) == associate), And(lives(Arnold) == 5, has_pet(Arnold) == cat, has_occupation(Arnold) == engineer, has_houseStyle(Arnold) == modern, has_education(Arnold) == doctorate) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-9",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Bob`, `Carol`, `Alice`, `Eric`\n - People have unique heights: `very tall`, `very short`, `super tall`, `average`, `tall`, `short`\n - Everyone has a favorite smoothie: `watermelon`, `cherry`, `blueberry`, `desert`, `dragonfruit`, `lime`\n - Everyone has a unique favorite cigar: `prince`, `blue master`, `yellow monster`, `dunhill`, `blends`, `pall mall`\n - Each person prefers a unique type of vacation: `camping`, `city`, `beach`, `cultural`, `mountain`, `cruise`\n\nClues:\n1. The person who is very short is directly left of the person who drinks Lime smoothies.\n2. The person who smokes Yellow Monster is directly left of the person who drinks Lime smoothies.\n3. The person who is short and the person who goes on cultural tours are next to each other.\n4. The person who smokes many unique blends is the person who loves beach vacations.\n5. There are two houses between the person who smokes Blue Master and the person who drinks Blueberry smoothies.\n6. The Prince smoker is not in the fourth house.\n7. The person who is tall is not in the first house.\n8. The person who smokes Yellow Monster is the person who enjoys mountain retreats.\n9. The person who is very tall is Alice.\n10. The person who likes Cherry smoothies is the person who smokes Blue Master.\n11. Bob is in the first house.\n12. The person who smokes many unique blends is Alice.\n13. The person who goes on cultural tours is the person partial to Pall Mall.\n14. Eric is the person who drinks Blueberry smoothies.\n15. The person who prefers city breaks is not in the sixth house.\n16. The Prince smoker is the person who prefers city breaks.\n17. The person who enjoys camping trips is somewhere to the left of Carol.\n18. The person who has an average height is the person who prefers city breaks.\n19. The Desert smoothie lover is in the fifth house.\n20. The Watermelon smoothie lover is Arnold.\n21. The person who is very tall is the person who drinks Lime smoothies.\n22. Carol is the Dunhill smoker.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Smoothie",
        "Cigar",
        "Vacation"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "super tall",
          "cherry",
          "blue master",
          "camping"
        ],
        [
          "2",
          "Arnold",
          "average",
          "watermelon",
          "prince",
          "city"
        ],
        [
          "3",
          "Carol",
          "short",
          "dragonfruit",
          "dunhill",
          "cruise"
        ],
        [
          "4",
          "Eric",
          "tall",
          "blueberry",
          "pall mall",
          "cultural"
        ],
        [
          "5",
          "Peter",
          "very short",
          "desert",
          "yellow monster",
          "mountain"
        ],
        [
          "6",
          "Alice",
          "very tall",
          "lime",
          "blends",
          "beach"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Bob, Carol, Alice, Eric])\nheights = EnumSort([very_tall, very_short, super_tall, average, tall, short])\nsmoothies = EnumSort([watermelon, cherry, blueberry, desert, dragonfruit, lime])\ncigars = EnumSort([prince, blue_master, yellow_monster, dunhill, blends, pall_mall])\nvacations = EnumSort([camping, city, beach, cultural, mountain, cruise])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_smoothie = Function([people] -> [smoothies])\nhas_cigar = Function([people] -> [cigars])\nhas_vacation = Function([people] -> [vacations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is very short is directly left of the person who drinks Lime smoothies\nThe person who smokes Yellow Monster is directly left of the person who drinks Lime smoothies\nThe person who is short and the person who goes on cultural tours are next to each other\nThe person who smokes many unique blends is the person who loves beach vacations\nThere are two houses between the person who smokes Blue Master and the person who drinks Blueberry smoothies\nThe Prince smoker is not in the fourth house\nThe person who is tall is not in the first house\nThe person who smokes Yellow Monster is the person who enjoys mountain retreats\nThe person who is very tall is Alice\nThe person who likes Cherry smoothies is the person who smokes Blue Master\nBob is in the first house\nThe person who smokes many unique blends is Alice\nThe person who goes on cultural tours is the person partial to Pall Mall\nEric is the person who drinks Blueberry smoothies\nThe person who prefers city breaks is not in the sixth house\nThe Prince smoker is the person who prefers city breaks\nThe person who enjoys camping trips is somewhere to the left of Carol\nThe person who has an average height is the person who prefers city breaks\nThe Desert smoothie lover is in the fifth house\nThe Watermelon smoothie lover is Arnold\nThe person who is very tall is the person who drinks Lime smoothies\nCarol is the Dunhill smoker",
    "queries": "And( And(lives(Bob) == 1, has_height(Bob) == super_tall, has_smoothie(Bob) == cherry, has_cigar(Bob) == blue_master, has_vacation(Bob) == camping), And(lives(Arnold) == 2, has_height(Arnold) == average, has_smoothie(Arnold) == watermelon, has_cigar(Arnold) == prince, has_vacation(Arnold) == city), And(lives(Carol) == 3, has_height(Carol) == short, has_smoothie(Carol) == dragonfruit, has_cigar(Carol) == dunhill, has_vacation(Carol) == cruise), And(lives(Eric) == 4, has_height(Eric) == tall, has_smoothie(Eric) == blueberry, has_cigar(Eric) == pall_mall, has_vacation(Eric) == cultural), And(lives(Peter) == 5, has_height(Peter) == very_short, has_smoothie(Peter) == desert, has_cigar(Peter) == yellow_monster, has_vacation(Peter) == mountain), And(lives(Alice) == 6, has_height(Alice) == very_tall, has_smoothie(Alice) == lime, has_cigar(Alice) == blends, has_vacation(Alice) == beach) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-36",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Bob`, `Peter`, `Alice`, `Carol`\n - People have unique heights: `very tall`, `tall`, `average`, `short`, `super tall`, `very short`\n - Each person has a unique birthday month: `sept`, `may`, `jan`, `april`, `feb`, `mar`\n - People have unique hair colors: `blonde`, `red`, `black`, `auburn`, `gray`, `brown`\n - People have unique favorite book genres: `science fiction`, `romance`, `biography`, `mystery`, `fantasy`, `historical fiction`\n - Each person has a unique type of pet: `bird`, `hamster`, `fish`, `dog`, `cat`, `rabbit`\n\nClues:\n1. The person with an aquarium of fish is the person who loves mystery books.\n2. The person who has black hair is the person who owns a dog.\n3. The person who has gray hair is the person who loves science fiction books.\n4. The person who loves historical fiction books is somewhere to the left of the person who has black hair.\n5. The person who loves historical fiction books is directly left of the person who owns a rabbit.\n6. The person whose birthday is in February is the person who owns a dog.\n7. Bob is the person who keeps a pet bird.\n8. The person who keeps a pet bird is the person who loves romance books.\n9. Alice is directly left of the person who loves fantasy books.\n10. The person who owns a rabbit is directly left of the person who is very short.\n11. The person who is short is somewhere to the left of the person who is super tall.\n12. The person who has an average height is in the sixth house.\n13. The person who has red hair is not in the first house.\n14. The person who is very tall is somewhere to the right of the person who is super tall.\n15. There are two houses between the person who loves romance books and Eric.\n16. The person with an aquarium of fish is in the sixth house.\n17. The person who has blonde hair is the person who loves historical fiction books.\n18. The person who is tall is somewhere to the right of the person whose birthday is in February.\n19. The person who has auburn hair is Carol.\n20. The person with an aquarium of fish is the person whose birthday is in March.\n21. The person who loves science fiction books is directly left of the person with an aquarium of fish.\n22. The person whose birthday is in September is not in the first house.\n23. The person who loves biography books is directly left of the person who has a cat.\n24. The person whose birthday is in January is the person who loves science fiction books.\n25. Arnold is the person whose birthday is in May.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Birthday",
        "HairColor",
        "BookGenre",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "short",
          "april",
          "brown",
          "romance",
          "bird"
        ],
        [
          "2",
          "Alice",
          "super tall",
          "sept",
          "blonde",
          "historical fiction",
          "hamster"
        ],
        [
          "3",
          "Arnold",
          "very tall",
          "may",
          "red",
          "fantasy",
          "rabbit"
        ],
        [
          "4",
          "Eric",
          "very short",
          "feb",
          "black",
          "biography",
          "dog"
        ],
        [
          "5",
          "Peter",
          "tall",
          "jan",
          "gray",
          "science fiction",
          "cat"
        ],
        [
          "6",
          "Carol",
          "average",
          "mar",
          "auburn",
          "mystery",
          "fish"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Bob, Peter, Alice, Carol])\nheights = EnumSort([very_tall, tall, average, short, super_tall, very_short])\nmonths = EnumSort([sept, may, jan, april, feb, mar])\nhairColors = EnumSort([blonde, red, black, auburn, gray, brown])\nbookGenres = EnumSort([science_fiction, romance, biography, mystery, fantasy, historical_fiction])\npets = EnumSort([bird, hamster, fish, dog, cat, rabbit])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_month = Function([people] -> [months])\nhas_hairColor = Function([people] -> [hairColors])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with an aquarium of fish is the person who loves mystery books\nThe person who has black hair is the person who owns a dog\nThe person who has gray hair is the person who loves science fiction books\nThe person who loves historical fiction books is somewhere to the left of the person who has black hair\nThe person who loves historical fiction books is directly left of the person who owns a rabbit\nThe person whose birthday is in February is the person who owns a dog\nBob is the person who keeps a pet bird\nThe person who keeps a pet bird is the person who loves romance books\nAlice is directly left of the person who loves fantasy books\nThe person who owns a rabbit is directly left of the person who is very short\nThe person who is short is somewhere to the left of the person who is super tall\nThe person who has an average height is in the sixth house\nThe person who has red hair is not in the first house\nThe person who is very tall is somewhere to the right of the person who is super tall\nThere are two houses between the person who loves romance books and Eric\nThe person with an aquarium of fish is in the sixth house\nThe person who has blonde hair is the person who loves historical fiction books\nThe person who is tall is somewhere to the right of the person whose birthday is in February\nThe person who has auburn hair is Carol\nThe person with an aquarium of fish is the person whose birthday is in March\nThe person who loves science fiction books is directly left of the person with an aquarium of fish\nThe person whose birthday is in September is not in the first house\nThe person who loves biography books is directly left of the person who has a cat\nThe person whose birthday is in January is the person who loves science fiction books\nArnold is the person whose birthday is in May",
    "queries": "And( And(lives(Bob) == 1, has_height(Bob) == short, has_month(Bob) == april, has_hairColor(Bob) == brown, has_bookGenre(Bob) == romance, has_pet(Bob) == bird), And(lives(Alice) == 2, has_height(Alice) == super_tall, has_month(Alice) == sept, has_hairColor(Alice) == blonde, has_bookGenre(Alice) == historical_fiction, has_pet(Alice) == hamster), And(lives(Arnold) == 3, has_height(Arnold) == very_tall, has_month(Arnold) == may, has_hairColor(Arnold) == red, has_bookGenre(Arnold) == fantasy, has_pet(Arnold) == rabbit), And(lives(Eric) == 4, has_height(Eric) == very_short, has_month(Eric) == feb, has_hairColor(Eric) == black, has_bookGenre(Eric) == biography, has_pet(Eric) == dog), And(lives(Peter) == 5, has_height(Peter) == tall, has_month(Peter) == jan, has_hairColor(Peter) == gray, has_bookGenre(Peter) == science_fiction, has_pet(Peter) == cat), And(lives(Carol) == 6, has_height(Carol) == average, has_month(Carol) == mar, has_hairColor(Carol) == auburn, has_bookGenre(Carol) == mystery, has_pet(Carol) == fish) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-4",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Alice`, `Peter`\n - People have unique favorite sports: `swimming`, `soccer`, `tennis`, `basketball`\n - Each person has a unique type of pet: `bird`, `fish`, `cat`, `dog`\n - Everyone has a favorite smoothie: `dragonfruit`, `desert`, `watermelon`, `cherry`\n - People have unique hair colors: `brown`, `black`, `blonde`, `red`\n - Each person has a unique birthday month: `jan`, `feb`, `sept`, `april`\n\nClues:\n1. The person whose birthday is in September is the person who likes Cherry smoothies.\n2. The person whose birthday is in February is not in the first house.\n3. The Desert smoothie lover is the person who loves basketball.\n4. Peter is the person who has black hair.\n5. The person who loves tennis is somewhere to the right of the person who has a cat.\n6. The person with an aquarium of fish is not in the fourth house.\n7. Arnold is directly left of the person who has blonde hair.\n8. There is one house between the person who has red hair and the person whose birthday is in January.\n9. The person whose birthday is in September is directly left of the person who loves soccer.\n10. Peter is directly left of the person who loves basketball.\n11. The person who has blonde hair is the person whose birthday is in September.\n12. Arnold is the person who keeps a pet bird.\n13. The person whose birthday is in January is the Watermelon smoothie lover.\n14. The person who has blonde hair is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Pet",
        "Smoothie",
        "HairColor",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "swimming",
          "cat",
          "dragonfruit",
          "black",
          "april"
        ],
        [
          "2",
          "Arnold",
          "basketball",
          "bird",
          "desert",
          "red",
          "feb"
        ],
        [
          "3",
          "Eric",
          "tennis",
          "fish",
          "cherry",
          "blonde",
          "sept"
        ],
        [
          "4",
          "Alice",
          "soccer",
          "dog",
          "watermelon",
          "brown",
          "jan"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Alice, Peter])\nsports = EnumSort([swimming, soccer, tennis, basketball])\npets = EnumSort([bird, fish, cat, dog])\nsmoothies = EnumSort([dragonfruit, desert, watermelon, cherry])\nhairColors = EnumSort([brown, black, blonde, red])\nmonths = EnumSort([jan, feb, sept, april])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_pet = Function([people] -> [pets])\nhas_smoothie = Function([people] -> [smoothies])\nhas_hairColor = Function([people] -> [hairColors])\nhas_month = Function([people] -> [months])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person whose birthday is in September is the person who likes Cherry smoothies\nThe person whose birthday is in February is not in the first house\nThe Desert smoothie lover is the person who loves basketball\nPeter is the person who has black hair\nThe person who loves tennis is somewhere to the right of the person who has a cat\nThe person with an aquarium of fish is not in the fourth house\nArnold is directly left of the person who has blonde hair\nThere is one house between the person who has red hair and the person whose birthday is in January\nThe person whose birthday is in September is directly left of the person who loves soccer\nPeter is directly left of the person who loves basketball\nThe person who has blonde hair is the person whose birthday is in September\nArnold is the person who keeps a pet bird\nThe person whose birthday is in January is the Watermelon smoothie lover\nThe person who has blonde hair is Eric",
    "queries": "And( And(lives(Peter) == 1, has_sport(Peter) == swimming, has_pet(Peter) == cat, has_smoothie(Peter) == dragonfruit, has_hairColor(Peter) == black, has_month(Peter) == april), And(lives(Arnold) == 2, has_sport(Arnold) == basketball, has_pet(Arnold) == bird, has_smoothie(Arnold) == desert, has_hairColor(Arnold) == red, has_month(Arnold) == feb), And(lives(Eric) == 3, has_sport(Eric) == tennis, has_pet(Eric) == fish, has_smoothie(Eric) == cherry, has_hairColor(Eric) == blonde, has_month(Eric) == sept), And(lives(Alice) == 4, has_sport(Alice) == soccer, has_pet(Alice) == dog, has_smoothie(Alice) == watermelon, has_hairColor(Alice) == brown, has_month(Alice) == jan) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-7",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Eric`, `Alice`, `Carol`\n - People have unique favorite music genres: `jazz`, `rock`, `pop`, `hip hop`, `classical`, `country`\n - Each person has a unique birthday month: `april`, `feb`, `jan`, `mar`, `sept`, `may`\n - Each person has a unique favorite drink: `root beer`, `coffee`, `tea`, `boba tea`, `water`, `milk`\n - Each person has an occupation: `nurse`, `doctor`, `teacher`, `lawyer`, `artist`, `engineer`\n\nClues:\n1. The person who loves pop music is not in the fourth house.\n2. The boba tea drinker is the person whose birthday is in April.\n3. The person whose birthday is in January is somewhere to the right of the person whose birthday is in May.\n4. Arnold is not in the third house.\n5. Eric is in the first house.\n6. Carol is the person who loves jazz music.\n7. The person who loves classical music is directly left of the root beer lover.\n8. The person who loves country music is somewhere to the left of the person who is a teacher.\n9. The person who is a teacher is somewhere to the left of the person who is a nurse.\n10. The person who is a doctor is somewhere to the left of the person who is a teacher.\n11. The root beer lover is the person who loves hip-hop music.\n12. Arnold is the person who is a lawyer.\n13. Carol is not in the fourth house.\n14. The person who is an artist is somewhere to the left of the person who loves pop music.\n15. The person whose birthday is in April is Bob.\n16. The person who likes milk is not in the second house.\n17. The one who only drinks water is somewhere to the right of the person whose birthday is in March.\n18. The tea drinker is the person whose birthday is in September.\n19. The person whose birthday is in January is the person who loves pop music.\n20. The person who loves jazz music is directly left of the person who loves rock music.\n21. Alice is the person who is a nurse.\n22. The tea drinker is not in the sixth house.\n23. The person who is a doctor is the root beer lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Birthday",
        "Drink",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "country",
          "may",
          "milk",
          "artist"
        ],
        [
          "2",
          "Arnold",
          "pop",
          "jan",
          "coffee",
          "lawyer"
        ],
        [
          "3",
          "Bob",
          "classical",
          "april",
          "boba tea",
          "engineer"
        ],
        [
          "4",
          "Peter",
          "hip hop",
          "mar",
          "root beer",
          "doctor"
        ],
        [
          "5",
          "Carol",
          "jazz",
          "sept",
          "tea",
          "teacher"
        ],
        [
          "6",
          "Alice",
          "rock",
          "feb",
          "water",
          "nurse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Eric, Alice, Carol])\nmusicGenres = EnumSort([jazz, rock, pop, hip_hop, classical, country])\nbirthdayMonths = EnumSort([april, feb, jan, mar, sept, may])\ndrinks = EnumSort([root_beer, coffee, tea, boba_tea, water, milk])\noccupations = EnumSort([nurse, doctor, teacher, lawyer, artist, engineer])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nhas_drink = Function([people] -> [drinks])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves pop music is not in the fourth house\nThe boba tea drinker is the person whose birthday is in April\nThe person whose birthday is in January is somewhere to the right of the person whose birthday is in May\nArnold is not in the third house\nEric is in the first house\nCarol is the person who loves jazz music\nThe person who loves classical music is directly left of the root beer lover\nThe person who loves country music is somewhere to the left of the person who is a teacher\nThe person who is a teacher is somewhere to the left of the person who is a nurse\nThe person who is a doctor is somewhere to the left of the person who is a teacher\nThe root beer lover is the person who loves hip-hop music\nArnold is the person who is a lawyer\nCarol is not in the fourth house\nThe person who is an artist is somewhere to the left of the person who loves pop music\nThe person whose birthday is in April is Bob\nThe person who likes milk is not in the second house\nThe one who only drinks water is somewhere to the right of the person whose birthday is in March\nThe tea drinker is the person whose birthday is in September\nThe person whose birthday is in January is the person who loves pop music\nThe person who loves jazz music is directly left of the person who loves rock music\nAlice is the person who is a nurse\nThe tea drinker is not in the sixth house\nThe person who is a doctor is the root beer lover",
    "queries": "And( And(lives(Eric) == 1, has_musicGenre(Eric) == country, has_birthdayMonth(Eric) == may, has_drink(Eric) == milk, has_occupation(Eric) == artist), And(lives(Arnold) == 2, has_musicGenre(Arnold) == pop, has_birthdayMonth(Arnold) == jan, has_drink(Arnold) == coffee, has_occupation(Arnold) == lawyer), And(lives(Bob) == 3, has_musicGenre(Bob) == classical, has_birthdayMonth(Bob) == april, has_drink(Bob) == boba_tea, has_occupation(Bob) == engineer), And(lives(Peter) == 4, has_musicGenre(Peter) == hip_hop, has_birthdayMonth(Peter) == mar, has_drink(Peter) == root_beer, has_occupation(Peter) == doctor), And(lives(Carol) == 5, has_musicGenre(Carol) == jazz, has_birthdayMonth(Carol) == sept, has_drink(Carol) == tea, has_occupation(Carol) == teacher), And(lives(Alice) == 6, has_musicGenre(Alice) == rock, has_birthdayMonth(Alice) == feb, has_drink(Alice) == water, has_occupation(Alice) == nurse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-2",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Alice`, `Eric`, `Peter`, `Arnold`, `Bob`\n - The mothers' names in different houses are unique: `Penny`, `Janelle`, `Aniya`, `Sarah`, `Holly`, `Kailyn`\n - Everyone has a unique favorite cigar: `blends`, `dunhill`, `blue master`, `prince`, `yellow monster`, `pall mall`\n - Each person has a unique type of pet: `cat`, `dog`, `rabbit`, `hamster`, `bird`, `fish`\n - The people keep unique animals: `bird`, `horse`, `cat`, `rabbit`, `dog`, `fish`\n - Everyone has a favorite smoothie: `desert`, `watermelon`, `lime`, `cherry`, `blueberry`, `dragonfruit`\n\nClues:\n1. The dog owner is not in the third house.\n2. The fish enthusiast is not in the fourth house.\n3. The person who owns a dog is Eric.\n4. The cat lover is not in the second house.\n5. The person who smokes Blue Master is somewhere to the right of The person whose mother's name is Sarah.\n6. The cat lover is not in the fourth house.\n7. There are two houses between Carol and the person who owns a rabbit.\n8. The person whose mother's name is Penny is the person with a pet hamster.\n9. The person whose mother's name is Kailyn is somewhere to the right of the person with a pet hamster.\n10. The dog owner and the person who drinks Lime smoothies are next to each other.\n11. The Prince smoker is somewhere to the right of The person whose mother's name is Janelle.\n12. There is one house between The person whose mother's name is Penny and Bob.\n13. There are two houses between the person partial to Pall Mall and The person whose mother's name is Penny.\n14. Peter is somewhere to the left of the person who drinks Lime smoothies.\n15. The bird keeper is the Watermelon smoothie lover.\n16. The person with a pet hamster is the Prince smoker.\n17. The person who smokes Yellow Monster is the person who drinks Lime smoothies.\n18. The person whose mother's name is Sarah is the person who smokes Yellow Monster.\n19. The Dunhill smoker is somewhere to the left of the Watermelon smoothie lover.\n20. The person whose mother's name is Holly is directly left of the person who owns a dog.\n21. The bird keeper is The person whose mother's name is Kailyn.\n22. The person whose mother's name is Sarah is not in the third house.\n23. The person who smokes many unique blends is the rabbit owner.\n24. The person who has a cat is somewhere to the right of the person with an aquarium of fish.\n25. The person who smokes Yellow Monster is Eric.\n26. The person who keeps a pet bird is the Desert smoothie lover.\n27. Alice is The person whose mother's name is Kailyn.\n28. The Dragonfruit smoothie lover is Carol.\n29. The person who keeps horses is the person who likes Cherry smoothies.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Cigar",
        "Pet",
        "Animal",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "Holly",
          "pall mall",
          "bird",
          "dog",
          "desert"
        ],
        [
          "2",
          "Eric",
          "Sarah",
          "yellow monster",
          "dog",
          "fish",
          "lime"
        ],
        [
          "3",
          "Carol",
          "Janelle",
          "dunhill",
          "fish",
          "cat",
          "dragonfruit"
        ],
        [
          "4",
          "Arnold",
          "Penny",
          "prince",
          "hamster",
          "horse",
          "cherry"
        ],
        [
          "5",
          "Alice",
          "Kailyn",
          "blue master",
          "cat",
          "bird",
          "watermelon"
        ],
        [
          "6",
          "Bob",
          "Aniya",
          "blends",
          "rabbit",
          "rabbit",
          "blueberry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Alice, Eric, Peter, Arnold, Bob])\nmothers = EnumSort([Penny, Janelle, Aniya, Sarah, Holly, Kailyn])\ncigars = EnumSort([blends, dunhill, blue_master, prince, yellow_monster, pall_mall])\npets = EnumSort([cat, dog, rabbit, hamster, bird, fish])\nanimals = EnumSort([bird, horse, cat, rabbit, dog, fish])\nsmoothies = EnumSort([desert, watermelon, lime, cherry, blueberry, dragonfruit])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nsmokes = Function([people] -> [cigars])\nhas_pet = Function([people] -> [pets])\nkeeps_animal = Function([people] -> [animals])\ndrinks_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The dog owner is not in the third house\nThe fish enthusiast is not in the fourth house\nThe person who owns a dog is Eric\nThe cat lover is not in the second house\nThe person who smokes Blue Master is somewhere to the right of The person whose mother's name is Sarah\nThe cat lover is not in the fourth house\nThere are two houses between Carol and the person who owns a rabbit\nThe person whose mother's name is Penny is the person with a pet hamster\nThe person whose mother's name is Kailyn is somewhere to the right of the person with a pet hamster\nThe dog owner and the person who drinks Lime smoothies are next to each other\nThe Prince smoker is somewhere to the right of The person whose mother's name is Janelle\nThere is one house between The person whose mother's name is Penny and Bob\nThere are two houses between the person partial to Pall Mall and The person whose mother's name is Penny\nPeter is somewhere to the left of the person who drinks Lime smoothies\nThe bird keeper is the Watermelon smoothie lover\nThe person with a pet hamster is the Prince smoker\nThe person who smokes Yellow Monster is the person who drinks Lime smoothies\nThe person whose mother's name is Sarah is the person who smokes Yellow Monster\nThe Dunhill smoker is somewhere to the left of the Watermelon smoothie lover\nThe person whose mother's name is Holly is directly left of the person who owns a dog\nThe bird keeper is The person whose mother's name is Kailyn\nThe person whose mother's name is Sarah is not in the third house\nThe person who smokes many unique blends is the rabbit owner\nThe person who has a cat is somewhere to the right of the person with an aquarium of fish\nThe person who smokes Yellow Monster is Eric\nThe person who keeps a pet bird is the Desert smoothie lover\nAlice is The person whose mother's name is Kailyn\nThe Dragonfruit smoothie lover is Carol\nThe person who keeps horses is the person who likes Cherry smoothies",
    "queries": "And( And(lives(Peter) == 1, has_mother(Peter) == Holly, smokes(Peter) == pall_mall, has_pet(Peter) == bird, keeps_animal(Peter) == dog, drinks_smoothie(Peter) == desert), And(lives(Eric) == 2, has_mother(Eric) == Sarah, smokes(Eric) == yellow_monster, has_pet(Eric) == dog, keeps_animal(Eric) == fish, drinks_smoothie(Eric) == lime), And(lives(Carol) == 3, has_mother(Carol) == Janelle, smokes(Carol) == dunhill, has_pet(Carol) == fish, keeps_animal(Carol) == cat, drinks_smoothie(Carol) == dragonfruit), And(lives(Arnold) == 4, has_mother(Arnold) == Penny, smokes(Arnold) == prince, has_pet(Arnold) == hamster, keeps_animal(Arnold) == horse, drinks_smoothie(Arnold) == cherry), And(lives(Alice) == 5, has_mother(Alice) == Kailyn, smokes(Alice) == blue_master, has_pet(Alice) == cat, keeps_animal(Alice) == bird, drinks_smoothie(Alice) == watermelon), And(lives(Bob) == 6, has_mother(Bob) == Aniya, smokes(Bob) == blends, has_pet(Bob) == rabbit, keeps_animal(Bob) == rabbit, drinks_smoothie(Bob) == blueberry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-37",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Eric`, `Arnold`, `Carol`, `Bob`\n - People have unique heights: `very short`, `very tall`, `short`, `super tall`, `tall`, `average`\n - Everyone has something unique for lunch: `grilled cheese`, `stir fry`, `pizza`, `spaghetti`, `soup`, `stew`\n - The mothers' names in different houses are unique: `Holly`, `Janelle`, `Penny`, `Aniya`, `Kailyn`, `Sarah`\n - Each person has a unique favorite drink: `tea`, `water`, `milk`, `coffee`, `boba tea`, `root beer`\n - Each person has a unique type of pet: `rabbit`, `fish`, `bird`, `hamster`, `cat`, `dog`\n\nClues:\n1. Arnold is the person who loves the stew.\n2. The person who owns a dog is directly left of the person who has a cat.\n3. The person whose mother's name is Holly is in the sixth house.\n4. The tea drinker is somewhere to the left of the boba tea drinker.\n5. The tea drinker is in the second house.\n6. The person who is very tall is Bob.\n7. The person who has a cat is The person whose mother's name is Penny.\n8. The person who is very short is directly left of Alice.\n9. Carol is the person who is a pizza lover.\n10. The person who has an average height is not in the sixth house.\n11. The person who loves stir fry is Bob.\n12. The person with a pet hamster is not in the third house.\n13. The person whose mother's name is Janelle is somewhere to the left of the person with a pet hamster.\n14. Eric is the person who loves the soup.\n15. The person whose mother's name is Kailyn is directly left of the person who keeps a pet bird.\n16. The one who only drinks water is somewhere to the right of the person who likes milk.\n17. The person who owns a rabbit is the person who loves the stew.\n18. The person who is tall is The person whose mother's name is Aniya.\n19. The person who is very short is somewhere to the left of the person who likes milk.\n20. The person who is tall is not in the fifth house.\n21. The person who is very short is in the second house.\n22. The person who loves the stew is the root beer lover.\n23. The person whose mother's name is Kailyn is the boba tea drinker.\n24. The person who is tall is not in the fourth house.\n25. The person who is super tall is directly left of the person who loves eating grilled cheese.\n26. Carol is directly left of the root beer lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Food",
        "Mother",
        "Drink",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "super tall",
          "soup",
          "Janelle",
          "coffee",
          "dog"
        ],
        [
          "2",
          "Peter",
          "very short",
          "grilled cheese",
          "Penny",
          "tea",
          "cat"
        ],
        [
          "3",
          "Alice",
          "tall",
          "spaghetti",
          "Aniya",
          "milk",
          "fish"
        ],
        [
          "4",
          "Bob",
          "very tall",
          "stir fry",
          "Kailyn",
          "boba tea",
          "hamster"
        ],
        [
          "5",
          "Carol",
          "average",
          "pizza",
          "Sarah",
          "water",
          "bird"
        ],
        [
          "6",
          "Arnold",
          "short",
          "stew",
          "Holly",
          "root beer",
          "rabbit"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Eric, Arnold, Carol, Bob])\nheights = EnumSort([very_short, very_tall, short, super_tall, tall, average])\nfoods = EnumSort([grilled_cheese, stir_fry, pizza, spaghetti, soup, stew])\nmothers = EnumSort([Holly, Janelle, Penny, Aniya, Kailyn, Sarah])\ndrinks = EnumSort([tea, water, milk, coffee, boba_tea, root_beer])\npets = EnumSort([rabbit, fish, bird, hamster, cat, dog])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_food = Function([people] -> [foods])\nhas_mother = Function([people] -> [mothers])\nhas_drink = Function([people] -> [drinks])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is the person who loves the stew\nThe person who owns a dog is directly left of the person who has a cat\nThe person whose mother's name is Holly is in the sixth house\nThe tea drinker is somewhere to the left of the boba tea drinker\nThe tea drinker is in the second house\nThe person who is very tall is Bob\nThe person who has a cat is The person whose mother's name is Penny\nThe person who is very short is directly left of Alice\nCarol is the person who is a pizza lover\nThe person who has an average height is not in the sixth house\nThe person who loves stir fry is Bob\nThe person with a pet hamster is not in the third house\nThe person whose mother's name is Janelle is somewhere to the left of the person with a pet hamster\nEric is the person who loves the soup\nThe person whose mother's name is Kailyn is directly left of the person who keeps a pet bird\nThe one who only drinks water is somewhere to the right of the person who likes milk\nThe person who owns a rabbit is the person who loves the stew\nThe person who is tall is The person whose mother's name is Aniya\nThe person who is very short is somewhere to the left of the person who likes milk\nThe person who is tall is not in the fifth house\nThe person who is very short is in the second house\nThe person who loves the stew is the root beer lover\nThe person whose mother's name is Kailyn is the boba tea drinker\nThe person who is tall is not in the fourth house\nThe person who is super tall is directly left of the person who loves eating grilled cheese\nCarol is directly left of the root beer lover",
    "queries": "And( And(lives(Eric) == 1, has_height(Eric) == super_tall, has_food(Eric) == soup, has_mother(Eric) == Janelle, has_drink(Eric) == coffee, has_pet(Eric) == dog), And(lives(Peter) == 2, has_height(Peter) == very_short, has_food(Peter) == grilled_cheese, has_mother(Peter) == Penny, has_drink(Peter) == tea, has_pet(Peter) == cat), And(lives(Alice) == 3, has_height(Alice) == tall, has_food(Alice) == spaghetti, has_mother(Alice) == Aniya, has_drink(Alice) == milk, has_pet(Alice) == fish), And(lives(Bob) == 4, has_height(Bob) == very_tall, has_food(Bob) == stir_fry, has_mother(Bob) == Kailyn, has_drink(Bob) == boba_tea, has_pet(Bob) == hamster), And(lives(Carol) == 5, has_height(Carol) == average, has_food(Carol) == pizza, has_mother(Carol) == Sarah, has_drink(Carol) == water, has_pet(Carol) == bird), And(lives(Arnold) == 6, has_height(Arnold) == short, has_food(Arnold) == stew, has_mother(Arnold) == Holly, has_drink(Arnold) == root_beer, has_pet(Arnold) == rabbit) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-24",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Carol`, `Alice`, `Bob`, `Peter`, `Arnold`\n - Each person prefers a unique type of vacation: `cultural`, `city`, `cruise`, `mountain`, `camping`, `beach`\n - Everyone has a favorite smoothie: `blueberry`, `watermelon`, `lime`, `desert`, `dragonfruit`, `cherry`\n - People have unique favorite book genres: `fantasy`, `mystery`, `science fiction`, `biography`, `historical fiction`, `romance`\n\nClues:\n1. The person who loves science fiction books is the person who enjoys camping trips.\n2. Arnold is not in the fifth house.\n3. The person who loves fantasy books is Peter.\n4. The Dragonfruit smoothie lover is the person who loves beach vacations.\n5. Alice is somewhere to the left of Eric.\n6. The person who drinks Blueberry smoothies is somewhere to the left of the person who enjoys mountain retreats.\n7. The person who likes Cherry smoothies is in the fifth house.\n8. The person who loves fantasy books is the person who prefers city breaks.\n9. There is one house between Peter and the person who loves mystery books.\n10. There is one house between the Dragonfruit smoothie lover and the person who drinks Lime smoothies.\n11. The person who likes Cherry smoothies is directly left of the person who loves romance books.\n12. The person who loves science fiction books is directly left of Eric.\n13. The person who loves mystery books is somewhere to the left of Carol.\n14. Carol is somewhere to the right of the person who enjoys mountain retreats.\n15. The person who likes going on cruises is the person who likes Cherry smoothies.\n16. Eric is the person who loves historical fiction books.\n17. The person who prefers city breaks is the Desert smoothie lover.\n18. The Desert smoothie lover is somewhere to the right of the Dragonfruit smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Smoothie",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "camping",
          "blueberry",
          "science fiction"
        ],
        [
          "2",
          "Eric",
          "beach",
          "dragonfruit",
          "historical fiction"
        ],
        [
          "3",
          "Peter",
          "city",
          "desert",
          "fantasy"
        ],
        [
          "4",
          "Arnold",
          "mountain",
          "lime",
          "biography"
        ],
        [
          "5",
          "Bob",
          "cruise",
          "cherry",
          "mystery"
        ],
        [
          "6",
          "Carol",
          "cultural",
          "watermelon",
          "romance"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Carol, Alice, Bob, Peter, Arnold])\nvacations = EnumSort([cultural, city, cruise, mountain, camping, beach])\nsmoothies = EnumSort([blueberry, watermelon, lime, desert, dragonfruit, cherry])\nbookGenres = EnumSort([fantasy, mystery, science_fiction, biography, historical_fiction, romance])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nlikes_smoothie = Function([people] -> [smoothies])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves science fiction books is the person who enjoys camping trips\nArnold is not in the fifth house\nThe person who loves fantasy books is Peter\nThe Dragonfruit smoothie lover is the person who loves beach vacations\nAlice is somewhere to the left of Eric\nThe person who drinks Blueberry smoothies is somewhere to the left of the person who enjoys mountain retreats\nThe person who likes Cherry smoothies is in the fifth house\nThe person who loves fantasy books is the person who prefers city breaks\nThere is one house between Peter and the person who loves mystery books\nThere is one house between the Dragonfruit smoothie lover and the person who drinks Lime smoothies\nThe person who likes Cherry smoothies is directly left of the person who loves romance books\nThe person who loves science fiction books is directly left of Eric\nThe person who loves mystery books is somewhere to the left of Carol\nCarol is somewhere to the right of the person who enjoys mountain retreats\nThe person who likes going on cruises is the person who likes Cherry smoothies\nEric is the person who loves historical fiction books\nThe person who prefers city breaks is the Desert smoothie lover\nThe Desert smoothie lover is somewhere to the right of the Dragonfruit smoothie lover",
    "queries": "And( And(lives(Alice) == 1, prefers_vacation(Alice) == camping, likes_smoothie(Alice) == blueberry, has_bookGenre(Alice) == science_fiction), And(lives(Eric) == 2, prefers_vacation(Eric) == beach, likes_smoothie(Eric) == dragonfruit, has_bookGenre(Eric) == historical_fiction), And(lives(Peter) == 3, prefers_vacation(Peter) == city, likes_smoothie(Peter) == desert, has_bookGenre(Peter) == fantasy), And(lives(Arnold) == 4, prefers_vacation(Arnold) == mountain, likes_smoothie(Arnold) == lime, has_bookGenre(Arnold) == biography), And(lives(Bob) == 5, prefers_vacation(Bob) == cruise, likes_smoothie(Bob) == cherry, has_bookGenre(Bob) == mystery), And(lives(Carol) == 6, prefers_vacation(Carol) == cultural, likes_smoothie(Carol) == watermelon, has_bookGenre(Carol) == romance) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-25",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Eric`, `Arnold`\n - Each mother is accompanied by their child: `Meredith`, `Bella`, `Samantha`, `Fred`, `Timothy`\n - People have unique favorite music genres: `classical`, `hip hop`, `pop`, `jazz`, `rock`\n - Everyone has a favorite smoothie: `watermelon`, `lime`, `dragonfruit`, `cherry`, `desert`\n - Each person prefers a unique type of vacation: `beach`, `mountain`, `city`, `cruise`, `camping`\n\nClues:\n1. The person who loves rock music is somewhere to the left of the person who loves classical music.\n2. The person who loves beach vacations and the person who loves rock music are next to each other.\n3. Eric is the person who is the mother of Timothy.\n4. The person who drinks Lime smoothies is not in the second house.\n5. The Watermelon smoothie lover is somewhere to the left of the person who loves rock music.\n6. Alice is the person who loves beach vacations.\n7. The Dragonfruit smoothie lover is somewhere to the right of Peter.\n8. The person who loves jazz music is the person's child is named Samantha.\n9. Bob is the person's child is named Samantha.\n10. Alice is somewhere to the left of Eric.\n11. The person who loves pop music is the person who likes going on cruises.\n12. The person's child is named Fred is in the fifth house.\n13. The person who prefers city breaks is the person who loves jazz music.\n14. The Dragonfruit smoothie lover is the person's child is named Samantha.\n15. The person's child is named Meredith is the person who likes going on cruises.\n16. The Desert smoothie lover is somewhere to the left of the person who likes Cherry smoothies.\n17. The person who enjoys mountain retreats is not in the fifth house.\n18. The person who drinks Lime smoothies is directly left of the Desert smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "MusicGenre",
        "Smoothie",
        "Vacation"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "Meredith",
          "pop",
          "watermelon",
          "cruise"
        ],
        [
          "2",
          "Bob",
          "Samantha",
          "jazz",
          "dragonfruit",
          "city"
        ],
        [
          "3",
          "Alice",
          "Bella",
          "hip hop",
          "lime",
          "beach"
        ],
        [
          "4",
          "Eric",
          "Timothy",
          "rock",
          "desert",
          "mountain"
        ],
        [
          "5",
          "Arnold",
          "Fred",
          "classical",
          "cherry",
          "camping"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Eric, Arnold])\nchildren = EnumSort([Meredith, Bella, Samantha, Fred, Timothy])\nmusicGenres = EnumSort([classical, hip_hop, pop, jazz, rock])\nsmoothies = EnumSort([watermelon, lime, dragonfruit, cherry, desert])\nvacations = EnumSort([beach, mountain, city, cruise, camping])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_smoothie = Function([people] -> [smoothies])\nhas_vacation = Function([people] -> [vacations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves rock music is somewhere to the left of the person who loves classical music\nThe person who loves beach vacations and the person who loves rock music are next to each other\nEric is the person who is the mother of Timothy\nThe person who drinks Lime smoothies is not in the second house\nThe Watermelon smoothie lover is somewhere to the left of the person who loves rock music\nAlice is the person who loves beach vacations\nThe Dragonfruit smoothie lover is somewhere to the right of Peter\nThe person who loves jazz music is the person's child is named Samantha\nBob is the person's child is named Samantha\nAlice is somewhere to the left of Eric\nThe person who loves pop music is the person who likes going on cruises\nThe person's child is named Fred is in the fifth house\nThe person who prefers city breaks is the person who loves jazz music\nThe Dragonfruit smoothie lover is the person's child is named Samantha\nThe person's child is named Meredith is the person who likes going on cruises\nThe Desert smoothie lover is somewhere to the left of the person who likes Cherry smoothies\nThe person who enjoys mountain retreats is not in the fifth house\nThe person who drinks Lime smoothies is directly left of the Desert smoothie lover",
    "queries": "And( And(lives(Peter) == 1, has_child(Peter) == Meredith, has_musicGenre(Peter) == pop, has_smoothie(Peter) == watermelon, has_vacation(Peter) == cruise), And(lives(Bob) == 2, has_child(Bob) == Samantha, has_musicGenre(Bob) == jazz, has_smoothie(Bob) == dragonfruit, has_vacation(Bob) == city), And(lives(Alice) == 3, has_child(Alice) == Bella, has_musicGenre(Alice) == hip_hop, has_smoothie(Alice) == lime, has_vacation(Alice) == beach), And(lives(Eric) == 4, has_child(Eric) == Timothy, has_musicGenre(Eric) == rock, has_smoothie(Eric) == desert, has_vacation(Eric) == mountain), And(lives(Arnold) == 5, has_child(Arnold) == Fred, has_musicGenre(Arnold) == classical, has_smoothie(Arnold) == cherry, has_vacation(Arnold) == camping) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-39",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Bob`, `Carol`, `Alice`\n - The people keep unique animals: `horse`, `bird`, `fish`, `cat`, `rabbit`, `dog`\n - Each person lives in a unique style of house: `modern`, `colonial`, `victorian`, `ranch`, `craftsman`, `mediterranean`\n - Each person has an occupation: `engineer`, `lawyer`, `artist`, `nurse`, `doctor`, `teacher`\n\nClues:\n1. The person who is a teacher is the person in a Craftsman-style house.\n2. Bob is in the second house.\n3. There are two houses between the person residing in a Victorian house and Eric.\n4. The cat lover is directly left of the person who keeps horses.\n5. The person who is an engineer is somewhere to the left of the person in a modern-style house.\n6. The person in a Craftsman-style house is directly left of the person who is an artist.\n7. The person in a Mediterranean-style villa is somewhere to the right of the person who is a doctor.\n8. The dog owner is not in the first house.\n9. The person in a Mediterranean-style villa is somewhere to the left of the cat lover.\n10. The person in a ranch-style home is in the sixth house.\n11. The person in a Mediterranean-style villa is Alice.\n12. The fish enthusiast is the person in a ranch-style home.\n13. The bird keeper is the person in a modern-style house.\n14. The person living in a colonial-style house is Peter.\n15. The person who is a lawyer is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "HouseStyle",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "rabbit",
          "victorian",
          "engineer"
        ],
        [
          "2",
          "Bob",
          "bird",
          "modern",
          "doctor"
        ],
        [
          "3",
          "Alice",
          "dog",
          "mediterranean",
          "nurse"
        ],
        [
          "4",
          "Eric",
          "cat",
          "craftsman",
          "teacher"
        ],
        [
          "5",
          "Peter",
          "horse",
          "colonial",
          "artist"
        ],
        [
          "6",
          "Arnold",
          "fish",
          "ranch",
          "lawyer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Bob, Carol, Alice])\nanimals = EnumSort([horse, bird, fish, cat, rabbit, dog])\nhouseStyles = EnumSort([modern, colonial, victorian, ranch, craftsman, mediterranean])\noccupations = EnumSort([engineer, lawyer, artist, nurse, doctor, teacher])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is a teacher is the person in a Craftsman-style house\nBob is in the second house\nThere are two houses between the person residing in a Victorian house and Eric\nThe cat lover is directly left of the person who keeps horses\nThe person who is an engineer is somewhere to the left of the person in a modern-style house\nThe person in a Craftsman-style house is directly left of the person who is an artist\nThe person in a Mediterranean-style villa is somewhere to the right of the person who is a doctor\nThe dog owner is not in the first house\nThe person in a Mediterranean-style villa is somewhere to the left of the cat lover\nThe person in a ranch-style home is in the sixth house\nThe person in a Mediterranean-style villa is Alice\nThe fish enthusiast is the person in a ranch-style home\nThe bird keeper is the person in a modern-style house\nThe person living in a colonial-style house is Peter\nThe person who is a lawyer is Arnold",
    "queries": "And( And(lives(Carol) == 1, has_animal(Carol) == rabbit, has_houseStyle(Carol) == victorian, has_occupation(Carol) == engineer), And(lives(Bob) == 2, has_animal(Bob) == bird, has_houseStyle(Bob) == modern, has_occupation(Bob) == doctor), And(lives(Alice) == 3, has_animal(Alice) == dog, has_houseStyle(Alice) == mediterranean, has_occupation(Alice) == nurse), And(lives(Eric) == 4, has_animal(Eric) == cat, has_houseStyle(Eric) == craftsman, has_occupation(Eric) == teacher), And(lives(Peter) == 5, has_animal(Peter) == horse, has_houseStyle(Peter) == colonial, has_occupation(Peter) == artist), And(lives(Arnold) == 6, has_animal(Arnold) == fish, has_houseStyle(Arnold) == ranch, has_occupation(Arnold) == lawyer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-25",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Alice`, `Carol`, `Bob`, `Eric`\n - Each person has an occupation: `artist`, `nurse`, `engineer`, `lawyer`, `teacher`, `doctor`\n - The mothers' names in different houses are unique: `Holly`, `Penny`, `Aniya`, `Janelle`, `Sarah`, `Kailyn`\n - People have unique favorite music genres: `pop`, `rock`, `classical`, `jazz`, `hip hop`, `country`\n\nClues:\n1. The person who is an engineer is directly left of the person who is an artist.\n2. The person whose mother's name is Janelle is the person who is an artist.\n3. The person who loves classical music is directly left of Peter.\n4. The person whose mother's name is Janelle and the person who loves pop music are next to each other.\n5. The person whose mother's name is Sarah is somewhere to the left of Arnold.\n6. The person who loves country music is The person whose mother's name is Aniya.\n7. The person whose mother's name is Penny is not in the second house.\n8. Bob is the person who loves jazz music.\n9. Carol is not in the sixth house.\n10. The person who is an engineer is the person who loves classical music.\n11. The person who is a nurse is somewhere to the right of the person who loves rock music.\n12. There are two houses between Bob and The person whose mother's name is Penny.\n13. The person who is a lawyer is directly left of the person who is a doctor.\n14. The person whose mother's name is Penny is not in the third house.\n15. The person who is an engineer is not in the fourth house.\n16. The person who is a doctor is The person whose mother's name is Kailyn.\n17. Carol is somewhere to the right of the person who loves country music.\n18. The person who loves classical music is Alice.\n19. The person who is a nurse is The person whose mother's name is Holly.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Occupation",
        "Mother",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "lawyer",
          "Aniya",
          "country"
        ],
        [
          "2",
          "Bob",
          "doctor",
          "Kailyn",
          "jazz"
        ],
        [
          "3",
          "Alice",
          "engineer",
          "Sarah",
          "classical"
        ],
        [
          "4",
          "Peter",
          "artist",
          "Janelle",
          "rock"
        ],
        [
          "5",
          "Carol",
          "teacher",
          "Penny",
          "pop"
        ],
        [
          "6",
          "Arnold",
          "nurse",
          "Holly",
          "hip hop"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Alice, Carol, Bob, Eric])\noccupations = EnumSort([artist, nurse, engineer, lawyer, teacher, doctor])\nmothers = EnumSort([Holly, Penny, Aniya, Janelle, Sarah, Kailyn])\nmusicGenres = EnumSort([pop, rock, classical, jazz, hip_hop, country])\nlives = Function([people] -> [int])\nhas_occupation = Function([people] -> [occupations])\nhas_mother = Function([people] -> [mothers])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is an engineer is directly left of the person who is an artist\nThe person whose mother's name is Janelle is the person who is an artist\nThe person who loves classical music is directly left of Peter\nThe person whose mother's name is Janelle and the person who loves pop music are next to each other\nThe person whose mother's name is Sarah is somewhere to the left of Arnold\nThe person who loves country music is The person whose mother's name is Aniya\nThe person whose mother's name is Penny is not in the second house\nBob is the person who loves jazz music\nCarol is not in the sixth house\nThe person who is an engineer is the person who loves classical music\nThe person who is a nurse is somewhere to the right of the person who loves rock music\nThere are two houses between Bob and The person whose mother's name is Penny\nThe person who is a lawyer is directly left of the person who is a doctor\nThe person whose mother's name is Penny is not in the third house\nThe person who is an engineer is not in the fourth house\nThe person who is a doctor is The person whose mother's name is Kailyn\nCarol is somewhere to the right of the person who loves country music\nThe person who loves classical music is Alice\nThe person who is a nurse is The person whose mother's name is Holly",
    "queries": "And( And(lives(Eric) == 1, has_occupation(Eric) == lawyer, has_mother(Eric) == Aniya, has_musicGenre(Eric) == country), And(lives(Bob) == 2, has_occupation(Bob) == doctor, has_mother(Bob) == Kailyn, has_musicGenre(Bob) == jazz), And(lives(Alice) == 3, has_occupation(Alice) == engineer, has_mother(Alice) == Sarah, has_musicGenre(Alice) == classical), And(lives(Peter) == 4, has_occupation(Peter) == artist, has_mother(Peter) == Janelle, has_musicGenre(Peter) == rock), And(lives(Carol) == 5, has_occupation(Carol) == teacher, has_mother(Carol) == Penny, has_musicGenre(Carol) == pop), And(lives(Arnold) == 6, has_occupation(Arnold) == nurse, has_mother(Arnold) == Holly, has_musicGenre(Arnold) == hip_hop) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-28",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Alice`, `Eric`\n - People have unique favorite music genres: `rock`, `jazz`, `classical`, `pop`\n - People have unique favorite book genres: `mystery`, `science fiction`, `fantasy`, `romance`\n - Everyone has a unique favorite cigar: `prince`, `blue master`, `pall mall`, `dunhill`\n - Each person has a unique birthday month: `april`, `jan`, `feb`, `sept`\n - Each person has a unique favorite drink: `water`, `tea`, `milk`, `coffee`\n\nClues:\n1. The person whose birthday is in September is the one who only drinks water.\n2. The person who loves rock music and the person who loves jazz music are next to each other.\n3. The person who loves mystery books is the person who smokes Blue Master.\n4. Alice is the person who loves classical music.\n5. The person who loves jazz music is the person who likes milk.\n6. The person who loves jazz music is directly left of the person who loves romance books.\n7. The person who loves rock music is not in the fourth house.\n8. The person whose birthday is in February is Arnold.\n9. The Prince smoker and the person who loves classical music are next to each other.\n10. The coffee drinker is the person who loves science fiction books.\n11. The person who loves mystery books is the person whose birthday is in September.\n12. Peter is the person who loves jazz music.\n13. The Dunhill smoker is the person whose birthday is in April.\n14. The person who loves mystery books is in the second house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "BookGenre",
        "Cigar",
        "Birthday",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "pop",
          "science fiction",
          "pall mall",
          "feb",
          "coffee"
        ],
        [
          "2",
          "Eric",
          "rock",
          "mystery",
          "blue master",
          "sept",
          "water"
        ],
        [
          "3",
          "Peter",
          "jazz",
          "fantasy",
          "prince",
          "jan",
          "milk"
        ],
        [
          "4",
          "Alice",
          "classical",
          "romance",
          "dunhill",
          "april",
          "tea"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Alice, Eric])\nmusicGenres = EnumSort([rock, jazz, classical, pop])\nbookGenres = EnumSort([mystery, science_fiction, fantasy, romance])\ncigars = EnumSort([prince, blue_master, pall_mall, dunhill])\nmonths = EnumSort([april, jan, feb, sept])\ndrinks = EnumSort([water, tea, milk, coffee])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_cigar = Function([people] -> [cigars])\nhas_month = Function([people] -> [months])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person whose birthday is in September is the one who only drinks water\nThe person who loves rock music and the person who loves jazz music are next to each other\nThe person who loves mystery books is the person who smokes Blue Master\nAlice is the person who loves classical music\nThe person who loves jazz music is the person who likes milk\nThe person who loves jazz music is directly left of the person who loves romance books\nThe person who loves rock music is not in the fourth house\nThe person whose birthday is in February is Arnold\nThe Prince smoker and the person who loves classical music are next to each other\nThe coffee drinker is the person who loves science fiction books\nThe person who loves mystery books is the person whose birthday is in September\nPeter is the person who loves jazz music\nThe Dunhill smoker is the person whose birthday is in April\nThe person who loves mystery books is in the second house",
    "queries": "And( And( lives(Arnold) == 1, has_musicGenre(Arnold) == pop, has_bookGenre(Arnold) == science_fiction, has_cigar(Arnold) == pall_mall, has_month(Arnold) == feb, has_drink(Arnold) == coffee ), And( lives(Eric) == 2, has_musicGenre(Eric) == rock, has_bookGenre(Eric) == mystery, has_cigar(Eric) == blue_master, has_month(Eric) == sept, has_drink(Eric) == water ), And( lives(Peter) == 3, has_musicGenre(Peter) == jazz, has_bookGenre(Peter) == fantasy, has_cigar(Peter) == prince, has_month(Peter) == jan, has_drink(Peter) == milk ), And( lives(Alice) == 4, has_musicGenre(Alice) == classical, has_bookGenre(Alice) == romance, has_cigar(Alice) == dunhill, has_month(Alice) == april, has_drink(Alice) == tea ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-0",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Alice`, `Bob`, `Arnold`, `Carol`\n - People have unique favorite book genres: `mystery`, `fantasy`, `romance`, `historical fiction`, `science fiction`, `biography`\n - Everyone has a favorite smoothie: `cherry`, `desert`, `lime`, `watermelon`, `blueberry`, `dragonfruit`\n - The people keep unique animals: `fish`, `rabbit`, `bird`, `cat`, `horse`, `dog`\n - People have unique favorite music genres: `classical`, `hip hop`, `country`, `jazz`, `rock`, `pop`\n - Everyone has a unique favorite cigar: `prince`, `dunhill`, `blends`, `pall mall`, `blue master`, `yellow monster`\n\nClues:\n1. The person who smokes many unique blends is the person who loves fantasy books.\n2. The person who loves biography books is the Desert smoothie lover.\n3. There are two houses between the person who loves pop music and the person who loves country music.\n4. The rabbit owner is in the third house.\n5. Arnold is the bird keeper.\n6. The person who loves country music is in the fifth house.\n7. The person who loves mystery books is not in the first house.\n8. The person who drinks Lime smoothies is not in the third house.\n9. The fish enthusiast is somewhere to the right of the person who loves rock music.\n10. The Prince smoker is somewhere to the left of the person who likes Cherry smoothies.\n11. Bob is the cat lover.\n12. Eric is the person who likes Cherry smoothies.\n13. The person who smokes Yellow Monster is in the sixth house.\n14. The Prince smoker is the Dragonfruit smoothie lover.\n15. Carol is directly left of Arnold.\n16. The person who smokes Blue Master is directly left of the person who loves classical music.\n17. The person who loves classical music is the person who loves historical fiction books.\n18. The Dunhill smoker and the person who loves science fiction books are next to each other.\n19. The person who keeps horses is directly left of Peter.\n20. The Watermelon smoothie lover is the cat lover.\n21. The person who smokes many unique blends is directly left of the person who loves jazz music.\n22. The cat lover is in the first house.\n23. The Desert smoothie lover is the person who loves jazz music.\n24. The person who drinks Lime smoothies is directly left of the fish enthusiast.\n25. The person who smokes Blue Master is not in the fifth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "Smoothie",
        "Animal",
        "MusicGenre",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "romance",
          "watermelon",
          "cat",
          "rock",
          "pall mall"
        ],
        [
          "2",
          "Alice",
          "fantasy",
          "blueberry",
          "horse",
          "pop",
          "blends"
        ],
        [
          "3",
          "Peter",
          "biography",
          "desert",
          "rabbit",
          "jazz",
          "blue master"
        ],
        [
          "4",
          "Carol",
          "historical fiction",
          "dragonfruit",
          "dog",
          "classical",
          "prince"
        ],
        [
          "5",
          "Arnold",
          "mystery",
          "lime",
          "bird",
          "country",
          "dunhill"
        ],
        [
          "6",
          "Eric",
          "science fiction",
          "cherry",
          "fish",
          "hip hop",
          "yellow monster"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Alice, Bob, Arnold, Carol])\nbookGenres = EnumSort([mystery, fantasy, romance, historical_fiction, science_fiction, biography])\nsmoothies = EnumSort([cherry, desert, lime, watermelon, blueberry, dragonfruit])\nanimals = EnumSort([fish, rabbit, bird, cat, horse, dog])\nmusicGenres = EnumSort([classical, hip_hop, country, jazz, rock, pop])\ncigars = EnumSort([prince, dunhill, blends, pall_mall, blue_master, yellow_monster])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_smoothie = Function([people] -> [smoothies])\nhas_animal = Function([people] -> [animals])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who smokes many unique blends is the person who loves fantasy books\nThe person who loves biography books is the Desert smoothie lover\nThere are two houses between the person who loves pop music and the person who loves country music\nThe rabbit owner is in the third house\nArnold is the bird keeper\nThe person who loves country music is in the fifth house\nThe person who loves mystery books is not in the first house\nThe person who drinks Lime smoothies is not in the third house\nThe fish enthusiast is somewhere to the right of the person who loves rock music\nThe Prince smoker is somewhere to the left of the person who likes Cherry smoothies\nBob is the cat lover\nEric is the person who likes Cherry smoothies\nThe person who smokes Yellow Monster is in the sixth house\nThe Prince smoker is the Dragonfruit smoothie lover\nCarol is directly left of Arnold\nThe person who smokes Blue Master is directly left of the person who loves classical music\nThe person who loves classical music is the person who loves historical fiction books\nThe Dunhill smoker and the person who loves science fiction books are next to each other\nThe person who keeps horses is directly left of Peter\nThe Watermelon smoothie lover is the cat lover\nThe person who smokes many unique blends is directly left of the person who loves jazz music\nThe cat lover is in the first house\nThe Desert smoothie lover is the person who loves jazz music\nThe person who drinks Lime smoothies is directly left of the fish enthusiast\nThe person who smokes Blue Master is not in the fifth house",
    "queries": "And( And( lives(Bob) == 1, has_bookGenre(Bob) == romance, has_smoothie(Bob) == watermelon, has_animal(Bob) == cat, has_musicGenre(Bob) == rock, has_cigar(Bob) == pall_mall ), And( lives(Alice) == 2, has_bookGenre(Alice) == fantasy, has_smoothie(Alice) == blueberry, has_animal(Alice) == horse, has_musicGenre(Alice) == pop, has_cigar(Alice) == blends ), And( lives(Peter) == 3, has_bookGenre(Peter) == biography, has_smoothie(Peter) == desert, has_animal(Peter) == rabbit, has_musicGenre(Peter) == jazz, has_cigar(Peter) == blue_master ), And( lives(Carol) == 4, has_bookGenre(Carol) == historical_fiction, has_smoothie(Carol) == dragonfruit, has_animal(Carol) == dog, has_musicGenre(Carol) == classical, has_cigar(Carol) == prince ), And( lives(Arnold) == 5, has_bookGenre(Arnold) == mystery, has_smoothie(Arnold) == lime, has_animal(Arnold) == bird, has_musicGenre(Arnold) == country, has_cigar(Arnold) == dunhill ), And( lives(Eric) == 6, has_bookGenre(Eric) == science_fiction, has_smoothie(Eric) == cherry, has_animal(Eric) == fish, has_musicGenre(Eric) == hip_hop, has_cigar(Eric) == yellow_monster ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-25",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Eric`, `Arnold`\n - People use unique phone models: `iphone 13`, `samsung galaxy s21`, `google pixel 6`, `oneplus 9`, `huawei p50`\n - Each person has a unique hobby: `knitting`, `photography`, `painting`, `cooking`, `gardening`\n - Everyone has a unique favorite cigar: `pall mall`, `blends`, `blue master`, `dunhill`, `prince`\n - People have unique favorite sports: `swimming`, `baseball`, `tennis`, `basketball`, `soccer`\n - Everyone has a favorite smoothie: `cherry`, `desert`, `lime`, `watermelon`, `dragonfruit`\n\nClues:\n1. Peter is in the first house.\n2. The person who loves soccer is the person who paints as a hobby.\n3. The person partial to Pall Mall is the person who enjoys knitting.\n4. The person who uses a Google Pixel 6 is not in the fifth house.\n5. The person who enjoys knitting is somewhere to the left of Alice.\n6. Peter is directly left of the person who smokes Blue Master.\n7. The Prince smoker is the person who uses a OnePlus 9.\n8. The person who loves basketball is directly left of the photography enthusiast.\n9. The Dunhill smoker is somewhere to the left of the photography enthusiast.\n10. There is one house between the person who drinks Lime smoothies and the person who loves basketball.\n11. The person who enjoys gardening is somewhere to the right of the person who enjoys knitting.\n12. The Dragonfruit smoothie lover is in the third house.\n13. The person who loves baseball is the person partial to Pall Mall.\n14. Eric is the person who loves tennis.\n15. The person who uses a OnePlus 9 is Peter.\n16. The Dunhill smoker is the person who uses a Huawei P50.\n17. The Desert smoothie lover is the person who loves soccer.\n18. The person who uses a Samsung Galaxy S21 is directly left of Arnold.\n19. The person who loves tennis is somewhere to the right of the Watermelon smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Hobby",
        "Cigar",
        "FavoriteSport",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "oneplus 9",
          "painting",
          "prince",
          "soccer",
          "desert"
        ],
        [
          "2",
          "Bob",
          "samsung galaxy s21",
          "cooking",
          "blue master",
          "swimming",
          "lime"
        ],
        [
          "3",
          "Arnold",
          "google pixel 6",
          "knitting",
          "pall mall",
          "baseball",
          "dragonfruit"
        ],
        [
          "4",
          "Alice",
          "huawei p50",
          "gardening",
          "dunhill",
          "basketball",
          "watermelon"
        ],
        [
          "5",
          "Eric",
          "iphone 13",
          "photography",
          "blends",
          "tennis",
          "cherry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Eric, Arnold])\nphones = EnumSort([iphone_13, samsung_galaxy_s21, google_pixel_6, oneplus_9, huawei_p50])\nhobbies = EnumSort([knitting, photography, painting, cooking, gardening])\ncigars = EnumSort([pall_mall, blends, blue_master, dunhill, prince])\nsports = EnumSort([swimming, baseball, tennis, basketball, soccer])\nsmoothies = EnumSort([cherry, desert, lime, watermelon, dragonfruit])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phones])\nhas_hobby = Function([people] -> [hobbies])\nsmokes_cigar = Function([people] -> [cigars])\nloves_sport = Function([people] -> [sports])\ndrinks_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Peter is in the first house\nThe person who loves soccer is the person who paints as a hobby\nThe person partial to Pall Mall is the person who enjoys knitting\nThe person who uses a Google Pixel 6 is not in the fifth house\nThe person who enjoys knitting is somewhere to the left of Alice\nPeter is directly left of the person who smokes Blue Master\nThe Prince smoker is the person who uses a OnePlus 9\nThe person who loves basketball is directly left of the photography enthusiast\nThe Dunhill smoker is somewhere to the left of the photography enthusiast\nThere is one house between the person who drinks Lime smoothies and the person who loves basketball\nThe person who enjoys gardening is somewhere to the right of the person who enjoys knitting\nThe Dragonfruit smoothie lover is in the third house\nThe person who loves baseball is the person partial to Pall Mall\nEric is the person who loves tennis\nThe person who uses a OnePlus 9 is Peter\nThe Dunhill smoker is the person who uses a Huawei P50\nThe Desert smoothie lover is the person who loves soccer\nThe person who uses a Samsung Galaxy S21 is directly left of Arnold\nThe person who loves tennis is somewhere to the right of the Watermelon smoothie lover",
    "queries": "And( And(lives(Peter) == 1, uses_phone(Peter) == oneplus_9, has_hobby(Peter) == painting, smokes_cigar(Peter) == prince, loves_sport(Peter) == soccer, drinks_smoothie(Peter) == desert), And(lives(Bob) == 2, uses_phone(Bob) == samsung_galaxy_s21, has_hobby(Bob) == cooking, smokes_cigar(Bob) == blue_master, loves_sport(Bob) == swimming, drinks_smoothie(Bob) == lime), And(lives(Arnold) == 3, uses_phone(Arnold) == google_pixel_6, has_hobby(Arnold) == knitting, smokes_cigar(Arnold) == pall_mall, loves_sport(Arnold) == baseball, drinks_smoothie(Arnold) == dragonfruit), And(lives(Alice) == 4, uses_phone(Alice) == huawei_p50, has_hobby(Alice) == gardening, smokes_cigar(Alice) == dunhill, loves_sport(Alice) == basketball, drinks_smoothie(Alice) == watermelon), And(lives(Eric) == 5, uses_phone(Eric) == iphone_13, has_hobby(Eric) == photography, smokes_cigar(Eric) == blends, loves_sport(Eric) == tennis, drinks_smoothie(Eric) == cherry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-28",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Bob`, `Arnold`, `Peter`, `Carol`\n - People have unique favorite music genres: `classical`, `rock`, `jazz`, `pop`, `country`, `hip hop`\n - Each person has an occupation: `teacher`, `artist`, `nurse`, `engineer`, `lawyer`, `doctor`\n - Each person prefers a unique type of vacation: `cruise`, `camping`, `city`, `cultural`, `mountain`, `beach`\n - Each person has a favorite color: `blue`, `white`, `red`, `yellow`, `purple`, `green`\n\nClues:\n1. The person who loves beach vacations is Arnold.\n2. The person who is an engineer is the person who enjoys mountain retreats.\n3. Peter is not in the second house.\n4. The person whose favorite color is red is in the third house.\n5. The person who loves beach vacations and the person who is a teacher are next to each other.\n6. The person who is a nurse is Carol.\n7. The person who goes on cultural tours is the person who loves pop music.\n8. The person who loves rock music and the person who loves country music are next to each other.\n9. The person whose favorite color is green is in the second house.\n10. The person whose favorite color is red is the person who enjoys camping trips.\n11. Peter is the person who loves pop music.\n12. The person who loves classical music is the person who loves purple.\n13. The person who loves blue is directly left of Alice.\n14. The person who loves rock music is in the fourth house.\n15. The person who loves white is the person who is a doctor.\n16. The person who loves jazz music is the person whose favorite color is red.\n17. Carol is somewhere to the right of the person who prefers city breaks.\n18. The person who loves rock music is the person who is an artist.\n19. The person who enjoys mountain retreats is in the first house.\n20. Bob is the person who loves classical music.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Occupation",
        "Vacation",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "classical",
          "engineer",
          "mountain",
          "purple"
        ],
        [
          "2",
          "Eric",
          "hip hop",
          "lawyer",
          "city",
          "green"
        ],
        [
          "3",
          "Carol",
          "jazz",
          "nurse",
          "camping",
          "red"
        ],
        [
          "4",
          "Arnold",
          "rock",
          "artist",
          "beach",
          "blue"
        ],
        [
          "5",
          "Alice",
          "country",
          "teacher",
          "cruise",
          "yellow"
        ],
        [
          "6",
          "Peter",
          "pop",
          "doctor",
          "cultural",
          "white"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Bob, Arnold, Peter, Carol])\nmusicGenres = EnumSort([classical, rock, jazz, pop, country, hip_hop])\noccupations = EnumSort([teacher, artist, nurse, engineer, lawyer, doctor])\nvacations = EnumSort([cruise, camping, city, cultural, mountain, beach])\ncolors = EnumSort([blue, white, red, yellow, purple, green])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_occupation = Function([people] -> [occupations])\nhas_vacation = Function([people] -> [vacations])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves beach vacations is Arnold\nThe person who is an engineer is the person who enjoys mountain retreats\nPeter is not in the second house\nThe person whose favorite color is red is in the third house\nThe person who loves beach vacations and the person who is a teacher are next to each other\nThe person who is a nurse is Carol\nThe person who goes on cultural tours is the person who loves pop music\nThe person who loves rock music and the person who loves country music are next to each other\nThe person whose favorite color is green is in the second house\nThe person whose favorite color is red is the person who enjoys camping trips\nPeter is the person who loves pop music\nThe person who loves classical music is the person who loves purple\nThe person who loves blue is directly left of Alice\nThe person who loves rock music is in the fourth house\nThe person who loves white is the person who is a doctor\nThe person who loves jazz music is the person whose favorite color is red\nCarol is somewhere to the right of the person who prefers city breaks\nThe person who loves rock music is the person who is an artist\nThe person who enjoys mountain retreats is in the first house\nBob is the person who loves classical music",
    "queries": "And( And(lives(Bob) == 1, has_musicGenre(Bob) == classical, has_occupation(Bob) == engineer, has_vacation(Bob) == mountain, has_color(Bob) == purple), And(lives(Eric) == 2, has_musicGenre(Eric) == hip_hop, has_occupation(Eric) == lawyer, has_vacation(Eric) == city, has_color(Eric) == green), And(lives(Carol) == 3, has_musicGenre(Carol) == jazz, has_occupation(Carol) == nurse, has_vacation(Carol) == camping, has_color(Carol) == red), And(lives(Arnold) == 4, has_musicGenre(Arnold) == rock, has_occupation(Arnold) == artist, has_vacation(Arnold) == beach, has_color(Arnold) == blue), And(lives(Alice) == 5, has_musicGenre(Alice) == country, has_occupation(Alice) == teacher, has_vacation(Alice) == cruise, has_color(Alice) == yellow), And(lives(Peter) == 6, has_musicGenre(Peter) == pop, has_occupation(Peter) == doctor, has_vacation(Peter) == cultural, has_color(Peter) == white) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-19",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Peter`, `Bob`, `Eric`\n - Each mother is accompanied by their child: `Samantha`, `Meredith`, `Bella`, `Timothy`, `Fred`\n - Everyone has a favorite smoothie: `lime`, `dragonfruit`, `watermelon`, `desert`, `cherry`\n - Each person has a unique type of pet: `hamster`, `bird`, `fish`, `cat`, `dog`\n - Each person has a unique favorite drink: `tea`, `coffee`, `milk`, `root beer`, `water`\n - The mothers' names in different houses are unique: `Penny`, `Aniya`, `Holly`, `Janelle`, `Kailyn`\n\nClues:\n1. Alice is the person's child is named Samantha.\n2. The person whose mother's name is Penny is somewhere to the right of the person's child is named Meredith.\n3. Peter is The person whose mother's name is Penny.\n4. The person who is the mother of Timothy is directly left of The person whose mother's name is Kailyn.\n5. The person who likes Cherry smoothies is Eric.\n6. There is one house between the person who drinks Lime smoothies and The person whose mother's name is Holly.\n7. There is one house between the person who keeps a pet bird and the coffee drinker.\n8. The person with a pet hamster is Arnold.\n9. The tea drinker is in the fifth house.\n10. There are two houses between the one who only drinks water and the tea drinker.\n11. The person who likes Cherry smoothies is the person who keeps a pet bird.\n12. The person whose mother's name is Holly is the person who owns a dog.\n13. There is one house between the person who keeps a pet bird and the person's child is named Bella.\n14. The person whose mother's name is Kailyn and The person whose mother's name is Penny are next to each other.\n15. Peter is not in the fourth house.\n16. The person with a pet hamster is not in the second house.\n17. The person who likes Cherry smoothies is directly left of the person's child is named Meredith.\n18. The Dragonfruit smoothie lover is the person who has a cat.\n19. The root beer lover is in the first house.\n20. The person's child is named Fred is not in the fourth house.\n21. The Desert smoothie lover and The person whose mother's name is Aniya are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "Smoothie",
        "Pet",
        "Drink",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "Timothy",
          "cherry",
          "bird",
          "root beer",
          "Janelle"
        ],
        [
          "2",
          "Bob",
          "Meredith",
          "lime",
          "fish",
          "water",
          "Kailyn"
        ],
        [
          "3",
          "Peter",
          "Bella",
          "dragonfruit",
          "cat",
          "coffee",
          "Penny"
        ],
        [
          "4",
          "Alice",
          "Samantha",
          "desert",
          "dog",
          "milk",
          "Holly"
        ],
        [
          "5",
          "Arnold",
          "Fred",
          "watermelon",
          "hamster",
          "tea",
          "Aniya"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Peter, Bob, Eric])\nchildren = EnumSort([Samantha, Meredith, Bella, Timothy, Fred])\nsmoothies = EnumSort([lime, dragonfruit, watermelon, desert, cherry])\npets = EnumSort([hamster, bird, fish, cat, dog])\ndrinks = EnumSort([tea, coffee, milk, root_beer, water])\nmothers = EnumSort([Penny, Aniya, Holly, Janelle, Kailyn])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_smoothie = Function([people] -> [smoothies])\nhas_pet = Function([people] -> [pets])\nhas_drink = Function([people] -> [drinks])\nhas_mother = Function([people] -> [mothers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Alice is the person's child is named Samantha\nThe person whose mother's name is Penny is somewhere to the right of the person's child is named Meredith\nPeter is The person whose mother's name is Penny\nThe person who is the mother of Timothy is directly left of The person whose mother's name is Kailyn\nThe person who likes Cherry smoothies is Eric\nThere is one house between the person who drinks Lime smoothies and The person whose mother's name is Holly\nThere is one house between the person who keeps a pet bird and the coffee drinker\nThe person with a pet hamster is Arnold\nThe tea drinker is in the fifth house\nThere are two houses between the one who only drinks water and the tea drinker\nThe person who likes Cherry smoothies is the person who keeps a pet bird\nThe person whose mother's name is Holly is the person who owns a dog\nThere is one house between the person who keeps a pet bird and the person's child is named Bella\nThe person whose mother's name is Kailyn and The person whose mother's name is Penny are next to each other\nPeter is not in the fourth house\nThe person with a pet hamster is not in the second house\nThe person who likes Cherry smoothies is directly left of the person's child is named Meredith\nThe Dragonfruit smoothie lover is the person who has a cat\nThe root beer lover is in the first house\nThe person's child is named Fred is not in the fourth house\nThe Desert smoothie lover and The person whose mother's name is Aniya are next to each other",
    "queries": "And( And(lives(Eric) == 1, has_child(Eric) == Timothy, has_smoothie(Eric) == cherry, has_pet(Eric) == bird, has_drink(Eric) == root_beer, has_mother(Eric) == Janelle), And(lives(Bob) == 2, has_child(Bob) == Meredith, has_smoothie(Bob) == lime, has_pet(Bob) == fish, has_drink(Bob) == water, has_mother(Bob) == Kailyn), And(lives(Peter) == 3, has_child(Peter) == Bella, has_smoothie(Peter) == dragonfruit, has_pet(Peter) == cat, has_drink(Peter) == coffee, has_mother(Peter) == Penny), And(lives(Alice) == 4, has_child(Alice) == Samantha, has_smoothie(Alice) == desert, has_pet(Alice) == dog, has_drink(Alice) == milk, has_mother(Alice) == Holly), And(lives(Arnold) == 5, has_child(Arnold) == Fred, has_smoothie(Arnold) == watermelon, has_pet(Arnold) == hamster, has_drink(Arnold) == tea, has_mother(Arnold) == Aniya) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-17",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Bob`, `Alice`, `Eric`, `Carol`\n - The mothers' names in different houses are unique: `Holly`, `Aniya`, `Kailyn`, `Janelle`, `Penny`, `Sarah`\n - Everyone has something unique for lunch: `stir fry`, `stew`, `spaghetti`, `soup`, `pizza`, `grilled cheese`\n - The people keep unique animals: `dog`, `horse`, `cat`, `fish`, `rabbit`, `bird`\n - Everyone has a favorite smoothie: `watermelon`, `desert`, `lime`, `cherry`, `blueberry`, `dragonfruit`\n - Each person lives in a unique style of house: `mediterranean`, `craftsman`, `victorian`, `colonial`, `modern`, `ranch`\n\nClues:\n1. The person whose mother's name is Penny is the person residing in a Victorian house.\n2. The person in a modern-style house is The person whose mother's name is Kailyn.\n3. The person in a modern-style house is somewhere to the right of the person residing in a Victorian house.\n4. The person who drinks Blueberry smoothies is not in the sixth house.\n5. The person whose mother's name is Sarah is the person who drinks Blueberry smoothies.\n6. The person who likes Cherry smoothies is not in the third house.\n7. The person who likes Cherry smoothies is Eric.\n8. The person whose mother's name is Janelle is not in the third house.\n9. The person who loves the spaghetti eater is in the third house.\n10. The fish enthusiast is The person whose mother's name is Holly.\n11. The person who keeps horses is in the first house.\n12. The person in a Mediterranean-style villa is the person who loves the stew.\n13. The bird keeper is in the third house.\n14. The person living in a colonial-style house is the person who drinks Blueberry smoothies.\n15. Carol is the person who keeps horses.\n16. There are two houses between the Desert smoothie lover and Peter.\n17. The person who loves eating grilled cheese is the Dragonfruit smoothie lover.\n18. The person who is a pizza lover is somewhere to the right of the Dragonfruit smoothie lover.\n19. The person whose mother's name is Janelle is somewhere to the left of Arnold.\n20. Carol is directly left of The person whose mother's name is Aniya.\n21. The person in a ranch-style home is The person whose mother's name is Aniya.\n22. Arnold is somewhere to the right of the person in a Craftsman-style house.\n23. The cat lover is Bob.\n24. There is one house between the Watermelon smoothie lover and the person who is a pizza lover.\n25. There are two houses between the cat lover and the person who loves stir fry.\n26. Arnold is the rabbit owner.\n27. Peter is The person whose mother's name is Janelle.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Food",
        "Animal",
        "Smoothie",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "Penny",
          "soup",
          "horse",
          "desert",
          "victorian"
        ],
        [
          "2",
          "Bob",
          "Aniya",
          "grilled cheese",
          "cat",
          "dragonfruit",
          "ranch"
        ],
        [
          "3",
          "Alice",
          "Sarah",
          "spaghetti",
          "bird",
          "blueberry",
          "colonial"
        ],
        [
          "4",
          "Peter",
          "Janelle",
          "stew",
          "dog",
          "watermelon",
          "mediterranean"
        ],
        [
          "5",
          "Eric",
          "Holly",
          "stir fry",
          "fish",
          "cherry",
          "craftsman"
        ],
        [
          "6",
          "Arnold",
          "Kailyn",
          "pizza",
          "rabbit",
          "lime",
          "modern"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Bob, Alice, Eric, Carol])\nmothers = EnumSort([Holly, Aniya, Kailyn, Janelle, Penny, Sarah])\nfoods = EnumSort([stir_fry, stew, spaghetti, soup, pizza, grilled_cheese])\nanimals = EnumSort([dog, horse, cat, fish, rabbit, bird])\nsmoothies = EnumSort([watermelon, desert, lime, cherry, blueberry, dragonfruit])\nhouseStyles = EnumSort([mediterranean, craftsman, victorian, colonial, modern, ranch])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nhas_food = Function([people] -> [foods])\nhas_animal = Function([people] -> [animals])\nhas_smoothie = Function([people] -> [smoothies])\nhas_houseStyle = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose mother's name is Penny is the person residing in a Victorian house\nThe person in a modern-style house is The person whose mother's name is Kailyn\nThe person in a modern-style house is somewhere to the right of the person residing in a Victorian house\nThe person who drinks Blueberry smoothies is not in the sixth house\nThe person whose mother's name is Sarah is the person who drinks Blueberry smoothies\nThe person who likes Cherry smoothies is not in the third house\nThe person who likes Cherry smoothies is Eric\nThe person whose mother's name is Janelle is not in the third house\nThe person who loves the spaghetti eater is in the third house\nThe fish enthusiast is The person whose mother's name is Holly\nThe person who keeps horses is in the first house\nThe person in a Mediterranean-style villa is the person who loves the stew\nThe bird keeper is in the third house\nThe person living in a colonial-style house is the person who drinks Blueberry smoothies\nCarol is the person who keeps horses\nThere are two houses between the Desert smoothie lover and Peter\nThe person who loves eating grilled cheese is the Dragonfruit smoothie lover\nThe person who is a pizza lover is somewhere to the right of the Dragonfruit smoothie lover\nThe person whose mother's name is Janelle is somewhere to the left of Arnold\nCarol is directly left of The person whose mother's name is Aniya\nThe person in a ranch-style home is The person whose mother's name is Aniya\nArnold is somewhere to the right of the person in a Craftsman-style house\nThe cat lover is Bob\nThere is one house between the Watermelon smoothie lover and the person who is a pizza lover\nThere are two houses between the cat lover and the person who loves stir fry\nArnold is the rabbit owner\nPeter is The person whose mother's name is Janelle",
    "queries": "And( And(lives(Carol) == 1, has_mother(Carol) == Penny, has_food(Carol) == soup, has_animal(Carol) == horse, has_smoothie(Carol) == desert, has_houseStyle(Carol) == victorian), And(lives(Bob) == 2, has_mother(Bob) == Aniya, has_food(Bob) == grilled_cheese, has_animal(Bob) == cat, has_smoothie(Bob) == dragonfruit, has_houseStyle(Bob) == ranch), And(lives(Alice) == 3, has_mother(Alice) == Sarah, has_food(Alice) == spaghetti, has_animal(Alice) == bird, has_smoothie(Alice) == blueberry, has_houseStyle(Alice) == colonial), And(lives(Peter) == 4, has_mother(Peter) == Janelle, has_food(Peter) == stew, has_animal(Peter) == dog, has_smoothie(Peter) == watermelon, has_houseStyle(Peter) == mediterranean), And(lives(Eric) == 5, has_mother(Eric) == Holly, has_food(Eric) == stir_fry, has_animal(Eric) == fish, has_smoothie(Eric) == cherry, has_houseStyle(Eric) == craftsman), And(lives(Arnold) == 6, has_mother(Arnold) == Kailyn, has_food(Arnold) == pizza, has_animal(Arnold) == rabbit, has_smoothie(Arnold) == lime, has_houseStyle(Arnold) == modern) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-39",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Alice`, `Peter`\n - People own unique car models: `honda civic`, `tesla model 3`, `toyota camry`, `ford f150`\n - They all have a unique favorite flower: `roses`, `daffodils`, `lilies`, `carnations`\n - Each person has a unique favorite drink: `milk`, `water`, `tea`, `coffee`\n - People have unique heights: `very short`, `average`, `tall`, `short`\n - Each person has a favorite color: `red`, `white`, `yellow`, `green`\n\nClues:\n1. The person who owns a Toyota Camry is somewhere to the left of the person who owns a Ford F-150.\n2. The coffee drinker is the person who owns a Ford F-150.\n3. The person who has an average height is in the third house.\n4. The person whose favorite color is green and the person who owns a Tesla Model 3 are next to each other.\n5. There are two houses between the person who loves the rose bouquet and the person who owns a Tesla Model 3.\n6. The person who is very short is the tea drinker.\n7. Alice is the person who loves white.\n8. The person who loves the boquet of lilies is the person who owns a Tesla Model 3.\n9. Peter is the person whose favorite color is red.\n10. The person who owns a Toyota Camry is Eric.\n11. The person who is short is somewhere to the left of the person who loves the boquet of lilies.\n12. The person who loves a bouquet of daffodils is the person who loves white.\n13. The coffee drinker is in the second house.\n14. The person who owns a Tesla Model 3 is the person who likes milk.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Flower",
        "Drink",
        "Height",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "toyota camry",
          "roses",
          "tea",
          "very short",
          "yellow"
        ],
        [
          "2",
          "Alice",
          "ford f150",
          "daffodils",
          "coffee",
          "short",
          "white"
        ],
        [
          "3",
          "Arnold",
          "honda civic",
          "carnations",
          "water",
          "average",
          "green"
        ],
        [
          "4",
          "Peter",
          "tesla model 3",
          "lilies",
          "milk",
          "tall",
          "red"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Alice, Peter])\ncarModels = EnumSort([honda_civic, tesla_model_3, toyota_camry, ford_f150])\nflowers = EnumSort([roses, daffodils, lilies, carnations])\ndrinks = EnumSort([milk, water, tea, coffee])\nheights = EnumSort([very_short, average, tall, short])\ncolors = EnumSort([red, white, yellow, green])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nlikes_flower = Function([people] -> [flowers])\nlikes_drink = Function([people] -> [drinks])\nhas_height = Function([people] -> [heights])\nlikes_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who owns a Toyota Camry is somewhere to the left of the person who owns a Ford F-150\nThe coffee drinker is the person who owns a Ford F-150\nThe person who has an average height is in the third house\nThe person whose favorite color is green and the person who owns a Tesla Model 3 are next to each other\nThere are two houses between the person who loves the rose bouquet and the person who owns a Tesla Model 3\nThe person who is very short is the tea drinker\nAlice is the person who loves white\nThe person who loves the boquet of lilies is the person who owns a Tesla Model 3\nPeter is the person whose favorite color is red\nThe person who owns a Toyota Camry is Eric\nThe person who is short is somewhere to the left of the person who loves the boquet of lilies\nThe person who loves a bouquet of daffodils is the person who loves white\nThe coffee drinker is in the second house\nThe person who owns a Tesla Model 3 is the person who likes milk",
    "queries": "And( And( lives(Eric) == 1, owns_car(Eric) == toyota_camry, likes_flower(Eric) == roses, likes_drink(Eric) == tea, has_height(Eric) == very_short, likes_color(Eric) == yellow ), And( lives(Alice) == 2, owns_car(Alice) == ford_f150, likes_flower(Alice) == daffodils, likes_drink(Alice) == coffee, has_height(Alice) == short, likes_color(Alice) == white ), And( lives(Arnold) == 3, owns_car(Arnold) == honda_civic, likes_flower(Arnold) == carnations, likes_drink(Arnold) == water, has_height(Arnold) == average, likes_color(Arnold) == green ), And( lives(Peter) == 4, owns_car(Peter) == tesla_model_3, likes_flower(Peter) == lilies, likes_drink(Peter) == milk, has_height(Peter) == tall, likes_color(Peter) == red ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-33",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Bob`, `Eric`, `Arnold`, `Carol`\n - Each person has a unique level of education: `bachelor`, `high school`, `associate`, `doctorate`, `trade school`, `master`\n - Everyone has something unique for lunch: `spaghetti`, `stir fry`, `stew`, `grilled cheese`, `pizza`, `soup`\n - People have unique favorite sports: `baseball`, `swimming`, `tennis`, `volleyball`, `soccer`, `basketball`\n - People have unique heights: `very short`, `average`, `very tall`, `super tall`, `tall`, `short`\n\nClues:\n1. Alice is somewhere to the left of Bob.\n2. The person who loves tennis is the person with an associate's degree.\n3. The person who is tall is not in the first house.\n4. The person who loves the spaghetti eater is in the second house.\n5. The person who loves baseball is in the third house.\n6. Arnold is somewhere to the left of the person who is very tall.\n7. Eric is the person with a bachelor's degree.\n8. The person who loves the soup is the person who is very short.\n9. The person who loves swimming is the person who loves the stew.\n10. Arnold is somewhere to the right of the person who loves soccer.\n11. The person with a doctorate is not in the sixth house.\n12. The person who loves stir fry is Carol.\n13. The person who has an average height is in the sixth house.\n14. There is one house between the person who attended trade school and the person who has an average height.\n15. The person who is very tall is directly left of the person who is super tall.\n16. Alice is somewhere to the right of the person who attended trade school.\n17. The person who is a pizza lover is somewhere to the left of Eric.\n18. Alice is the person who loves basketball.\n19. The person with a high school diploma is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Food",
        "FavoriteSport",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "associate",
          "pizza",
          "tennis",
          "short"
        ],
        [
          "2",
          "Eric",
          "bachelor",
          "spaghetti",
          "soccer",
          "tall"
        ],
        [
          "3",
          "Arnold",
          "high school",
          "soup",
          "baseball",
          "very short"
        ],
        [
          "4",
          "Carol",
          "trade school",
          "stir fry",
          "volleyball",
          "very tall"
        ],
        [
          "5",
          "Alice",
          "doctorate",
          "grilled cheese",
          "basketball",
          "super tall"
        ],
        [
          "6",
          "Bob",
          "master",
          "stew",
          "swimming",
          "average"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Bob, Eric, Arnold, Carol])\neducationLevels = EnumSort([bachelor, high_school, associate, doctorate, trade_school, master])\nfoods = EnumSort([spaghetti, stir_fry, stew, grilled_cheese, pizza, soup])\nsports = EnumSort([baseball, swimming, tennis, volleyball, soccer, basketball])\nheights = EnumSort([very_short, average, very_tall, super_tall, tall, short])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_food = Function([people] -> [foods])\nhas_sport = Function([people] -> [sports])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is somewhere to the left of Bob\nThe person who loves tennis is the person with an associate's degree\nThe person who is tall is not in the first house\nThe person who loves the spaghetti eater is in the second house\nThe person who loves baseball is in the third house\nArnold is somewhere to the left of the person who is very tall\nEric is the person with a bachelor's degree\nThe person who loves the soup is the person who is very short\nThe person who loves swimming is the person who loves the stew\nArnold is somewhere to the right of the person who loves soccer\nThe person with a doctorate is not in the sixth house\nThe person who loves stir fry is Carol\nThe person who has an average height is in the sixth house\nThere is one house between the person who attended trade school and the person who has an average height\nThe person who is very tall is directly left of the person who is super tall\nAlice is somewhere to the right of the person who attended trade school\nThe person who is a pizza lover is somewhere to the left of Eric\nAlice is the person who loves basketball\nThe person with a high school diploma is Arnold",
    "queries": "And( And(lives(Peter) == 1, has_education(Peter) == associate, has_food(Peter) == pizza, has_sport(Peter) == tennis, has_height(Peter) == short), And(lives(Eric) == 2, has_education(Eric) == bachelor, has_food(Eric) == spaghetti, has_sport(Eric) == soccer, has_height(Eric) == tall), And(lives(Arnold) == 3, has_education(Arnold) == high_school, has_food(Arnold) == soup, has_sport(Arnold) == baseball, has_height(Arnold) == very_short), And(lives(Carol) == 4, has_education(Carol) == trade_school, has_food(Carol) == stir_fry, has_sport(Carol) == volleyball, has_height(Carol) == very_tall), And(lives(Alice) == 5, has_education(Alice) == doctorate, has_food(Alice) == grilled_cheese, has_sport(Alice) == basketball, has_height(Alice) == super_tall), And(lives(Bob) == 6, has_education(Bob) == master, has_food(Bob) == stew, has_sport(Bob) == swimming, has_height(Bob) == average) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-21",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Carol`, `Eric`, `Peter`, `Arnold`\n - Each person has a unique hobby: `knitting`, `woodworking`, `photography`, `cooking`, `gardening`, `painting`\n - Each person lives in a unique style of house: `ranch`, `modern`, `mediterranean`, `colonial`, `craftsman`, `victorian`\n - People have unique favorite music genres: `classical`, `jazz`, `rock`, `hip hop`, `pop`, `country`\n - People have unique hair colors: `blonde`, `red`, `gray`, `black`, `brown`, `auburn`\n\nClues:\n1. The woodworking hobbyist is somewhere to the right of the person living in a colonial-style house.\n2. The person who loves jazz music is in the sixth house.\n3. The person who has black hair is directly left of Bob.\n4. The person who has blonde hair is the person living in a colonial-style house.\n5. Arnold is directly left of the person in a ranch-style home.\n6. The person who paints as a hobby is somewhere to the left of the photography enthusiast.\n7. Peter is the person who has black hair.\n8. Eric is not in the first house.\n9. The person who enjoys gardening is the person who has brown hair.\n10. The person who has red hair is the person who loves pop music.\n11. The person in a Craftsman-style house is in the sixth house.\n12. Carol is in the sixth house.\n13. The person who has blonde hair is directly left of the person residing in a Victorian house.\n14. The person who enjoys knitting is Bob.\n15. The person who paints as a hobby is the person who has blonde hair.\n16. The person who enjoys knitting is the person who has auburn hair.\n17. The photography enthusiast is somewhere to the left of the person in a Craftsman-style house.\n18. There is one house between the person who loves hip-hop music and the person who loves country music.\n19. The person who has black hair is somewhere to the right of the person who loves hip-hop music.\n20. The person who enjoys gardening is the person residing in a Victorian house.\n21. The person who loves pop music is somewhere to the left of the person in a Mediterranean-style villa.\n22. The person who loves rock music is in the second house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "HouseStyle",
        "MusicGenre",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "cooking",
          "modern",
          "pop",
          "red"
        ],
        [
          "2",
          "Eric",
          "painting",
          "colonial",
          "rock",
          "blonde"
        ],
        [
          "3",
          "Arnold",
          "gardening",
          "victorian",
          "hip hop",
          "brown"
        ],
        [
          "4",
          "Peter",
          "photography",
          "ranch",
          "classical",
          "black"
        ],
        [
          "5",
          "Bob",
          "knitting",
          "mediterranean",
          "country",
          "auburn"
        ],
        [
          "6",
          "Carol",
          "woodworking",
          "craftsman",
          "jazz",
          "gray"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Carol, Eric, Peter, Arnold])\nhobbies = EnumSort([knitting, woodworking, photography, cooking, gardening, painting])\nhouseStyles = EnumSort([ranch, modern, mediterranean, colonial, craftsman, victorian])\nmusicGenres = EnumSort([classical, jazz, rock, hip_hop, pop, country])\nhairColors = EnumSort([blonde, red, gray, black, brown, auburn])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The woodworking hobbyist is somewhere to the right of the person living in a colonial-style house\nThe person who loves jazz music is in the sixth house\nThe person who has black hair is directly left of Bob\nThe person who has blonde hair is the person living in a colonial-style house\nArnold is directly left of the person in a ranch-style home\nThe person who paints as a hobby is somewhere to the left of the photography enthusiast\nPeter is the person who has black hair\nEric is not in the first house\nThe person who enjoys gardening is the person who has brown hair\nThe person who has red hair is the person who loves pop music\nThe person in a Craftsman-style house is in the sixth house\nCarol is in the sixth house\nThe person who has blonde hair is directly left of the person residing in a Victorian house\nThe person who enjoys knitting is Bob\nThe person who paints as a hobby is the person who has blonde hair\nThe person who enjoys knitting is the person who has auburn hair\nThe photography enthusiast is somewhere to the left of the person in a Craftsman-style house\nThere is one house between the person who loves hip-hop music and the person who loves country music\nThe person who has black hair is somewhere to the right of the person who loves hip-hop music\nThe person who enjoys gardening is the person residing in a Victorian house\nThe person who loves pop music is somewhere to the left of the person in a Mediterranean-style villa\nThe person who loves rock music is in the second house",
    "queries": "And( And(lives(Alice) == 1, has_hobby(Alice) == cooking, has_houseStyle(Alice) == modern, has_musicGenre(Alice) == pop, has_hairColor(Alice) == red), And(lives(Eric) == 2, has_hobby(Eric) == painting, has_houseStyle(Eric) == colonial, has_musicGenre(Eric) == rock, has_hairColor(Eric) == blonde), And(lives(Arnold) == 3, has_hobby(Arnold) == gardening, has_houseStyle(Arnold) == victorian, has_musicGenre(Arnold) == hip_hop, has_hairColor(Arnold) == brown), And(lives(Peter) == 4, has_hobby(Peter) == photography, has_houseStyle(Peter) == ranch, has_musicGenre(Peter) == classical, has_hairColor(Peter) == black), And(lives(Bob) == 5, has_hobby(Bob) == knitting, has_houseStyle(Bob) == mediterranean, has_musicGenre(Bob) == country, has_hairColor(Bob) == auburn), And(lives(Carol) == 6, has_hobby(Carol) == woodworking, has_houseStyle(Carol) == craftsman, has_musicGenre(Carol) == jazz, has_hairColor(Carol) == gray) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-12",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Carol`, `Alice`, `Eric`, `Bob`\n - People have unique favorite music genres: `pop`, `hip hop`, `rock`, `jazz`, `classical`, `country`\n - The people keep unique animals: `fish`, `dog`, `cat`, `rabbit`, `horse`, `bird`\n - Each person lives in a unique style of house: `modern`, `colonial`, `mediterranean`, `ranch`, `victorian`, `craftsman`\n - Each person has a unique hobby: `gardening`, `woodworking`, `knitting`, `cooking`, `painting`, `photography`\n - The people are of nationalities: `brit`, `german`, `norwegian`, `swede`, `dane`, `chinese`\n\nClues:\n1. The cat lover is the person in a Mediterranean-style villa.\n2. The person who loves country music is somewhere to the right of the rabbit owner.\n3. The person who loves pop music is not in the second house.\n4. Alice is somewhere to the right of Arnold.\n5. The person who loves jazz music and the photography enthusiast are next to each other.\n6. The person who loves rock music is the German.\n7. The woodworking hobbyist is somewhere to the right of the person in a modern-style house.\n8. The person who loves hip-hop music is the Norwegian.\n9. The cat lover is somewhere to the left of the woodworking hobbyist.\n10. Alice is the person who paints as a hobby.\n11. The person in a Craftsman-style house is Carol.\n12. Peter is the fish enthusiast.\n13. The person who loves hip-hop music is not in the fifth house.\n14. The person who loves pop music is not in the sixth house.\n15. The person who loves cooking is somewhere to the left of the Swedish person.\n16. The Dane is directly left of the person who keeps horses.\n17. The rabbit owner is somewhere to the left of the British person.\n18. There is one house between Alice and the person who loves country music.\n19. The person who paints as a hobby is the person living in a colonial-style house.\n20. The German is somewhere to the left of the photography enthusiast.\n21. Eric is the Norwegian.\n22. The person residing in a Victorian house is directly left of the person who enjoys gardening.\n23. There are two houses between the person who loves cooking and the person who loves classical music.\n24. The bird keeper is the person who loves cooking.\n25. The cat lover is directly left of Bob.\n26. Eric is not in the first house.\n27. Carol is somewhere to the right of the German.\n28. The rabbit owner is directly left of the person in a modern-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "MusicGenre",
        "Animal",
        "HouseStyle",
        "Hobby",
        "Nationality"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "pop",
          "cat",
          "mediterranean",
          "knitting",
          "chinese"
        ],
        [
          "2",
          "Bob",
          "rock",
          "bird",
          "victorian",
          "cooking",
          "german"
        ],
        [
          "3",
          "Eric",
          "hip hop",
          "dog",
          "ranch",
          "gardening",
          "norwegian"
        ],
        [
          "4",
          "Alice",
          "jazz",
          "rabbit",
          "colonial",
          "painting",
          "swede"
        ],
        [
          "5",
          "Peter",
          "classical",
          "fish",
          "modern",
          "photography",
          "dane"
        ],
        [
          "6",
          "Carol",
          "country",
          "horse",
          "craftsman",
          "woodworking",
          "brit"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Carol, Alice, Eric, Bob])\nmusicGenres = EnumSort([pop, hip_hop, rock, jazz, classical, country])\nanimals = EnumSort([fish, dog, cat, rabbit, horse, bird])\nhouseStyles = EnumSort([modern, colonial, mediterranean, ranch, victorian, craftsman])\nhobbies = EnumSort([gardening, woodworking, knitting, cooking, painting, photography])\nnationalities = EnumSort([brit, german, norwegian, swede, dane, chinese])\nlives = Function([people] -> [int])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_animal = Function([people] -> [animals])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_hobby = Function([people] -> [hobbies])\nhas_nationality = Function([people] -> [nationalities])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The cat lover is the person in a Mediterranean-style villa\nThe person who loves country music is somewhere to the right of the rabbit owner\nThe person who loves pop music is not in the second house\nAlice is somewhere to the right of Arnold\nThe person who loves jazz music and the photography enthusiast are next to each other\nThe person who loves rock music is the German\nThe woodworking hobbyist is somewhere to the right of the person in a modern-style house\nThe person who loves hip-hop music is the Norwegian\nThe cat lover is somewhere to the left of the woodworking hobbyist\nAlice is the person who paints as a hobby\nThe person in a Craftsman-style house is Carol\nPeter is the fish enthusiast\nThe person who loves hip-hop music is not in the fifth house\nThe person who loves pop music is not in the sixth house\nThe person who loves cooking is somewhere to the left of the Swedish person\nThe Dane is directly left of the person who keeps horses\nThe rabbit owner is somewhere to the left of the British person\nThere is one house between Alice and the person who loves country music\nThe person who paints as a hobby is the person living in a colonial-style house\nThe German is somewhere to the left of the photography enthusiast\nEric is the Norwegian\nThe person residing in a Victorian house is directly left of the person who enjoys gardening\nThere are two houses between the person who loves cooking and the person who loves classical music\nThe bird keeper is the person who loves cooking\nThe cat lover is directly left of Bob\nEric is not in the first house\nCarol is somewhere to the right of the German\nThe rabbit owner is directly left of the person in a modern-style house",
    "queries": "And( And(lives(Arnold) == 1, has_musicGenre(Arnold) == pop, has_animal(Arnold) == cat, has_houseStyle(Arnold) == mediterranean, has_hobby(Arnold) == knitting, has_nationality(Arnold) == chinese), And(lives(Bob) == 2, has_musicGenre(Bob) == rock, has_animal(Bob) == bird, has_houseStyle(Bob) == victorian, has_hobby(Bob) == cooking, has_nationality(Bob) == german), And(lives(Eric) == 3, has_musicGenre(Eric) == hip_hop, has_animal(Eric) == dog, has_houseStyle(Eric) == ranch, has_hobby(Eric) == gardening, has_nationality(Eric) == norwegian), And(lives(Alice) == 4, has_musicGenre(Alice) == jazz, has_animal(Alice) == rabbit, has_houseStyle(Alice) == colonial, has_hobby(Alice) == painting, has_nationality(Alice) == swede), And(lives(Peter) == 5, has_musicGenre(Peter) == classical, has_animal(Peter) == fish, has_houseStyle(Peter) == modern, has_hobby(Peter) == photography, has_nationality(Peter) == dane), And(lives(Carol) == 6, has_musicGenre(Carol) == country, has_animal(Carol) == horse, has_houseStyle(Carol) == craftsman, has_hobby(Carol) == woodworking, has_nationality(Carol) == brit) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-23",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Eric`, `Arnold`, `Peter`, `Alice`\n - People have unique favorite sports: `tennis`, `baseball`, `basketball`, `soccer`, `swimming`\n - Each mother is accompanied by their child: `Fred`, `Bella`, `Meredith`, `Timothy`, `Samantha`\n - The mothers' names in different houses are unique: `Kailyn`, `Holly`, `Penny`, `Janelle`, `Aniya`\n - The people keep unique animals: `horse`, `cat`, `dog`, `bird`, `fish`\n\nClues:\n1. The person whose mother's name is Penny is in the fourth house.\n2. Eric is The person whose mother's name is Penny.\n3. The person who keeps horses is the person who loves swimming.\n4. The person who loves baseball is the person's child is named Meredith.\n5. The dog owner is directly left of the person who loves basketball.\n6. The person who loves soccer is the bird keeper.\n7. The person who loves swimming is directly left of the person's child is named Fred.\n8. The person who loves tennis is The person whose mother's name is Kailyn.\n9. The person who is the mother of Timothy is The person whose mother's name is Aniya.\n10. Eric is somewhere to the right of the person's child is named Samantha.\n11. The person who loves basketball is Bob.\n12. The person who is the mother of Timothy is the fish enthusiast.\n13. The person's child is named Meredith is somewhere to the right of Peter.\n14. The person who loves basketball is somewhere to the left of the person who keeps horses.\n15. The bird keeper is Alice.\n16. The person whose mother's name is Holly is the bird keeper.\n17. Bob is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Children",
        "Mother",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "tennis",
          "Samantha",
          "Kailyn",
          "dog"
        ],
        [
          "2",
          "Bob",
          "basketball",
          "Timothy",
          "Aniya",
          "fish"
        ],
        [
          "3",
          "Arnold",
          "baseball",
          "Meredith",
          "Janelle",
          "cat"
        ],
        [
          "4",
          "Eric",
          "swimming",
          "Bella",
          "Penny",
          "horse"
        ],
        [
          "5",
          "Alice",
          "soccer",
          "Fred",
          "Holly",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Eric, Arnold, Peter, Alice])\nsports = EnumSort([tennis, baseball, basketball, soccer, swimming])\nchildren = EnumSort([Fred, Bella, Meredith, Timothy, Samantha])\nmothers = EnumSort([Kailyn, Holly, Penny, Janelle, Aniya])\nanimals = EnumSort([horse, cat, dog, bird, fish])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_child = Function([people] -> [children])\nhas_mother = Function([people] -> [mothers])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose mother's name is Penny is in the fourth house\nEric is The person whose mother's name is Penny\nThe person who keeps horses is the person who loves swimming\nThe person who loves baseball is the person's child is named Meredith\nThe dog owner is directly left of the person who loves basketball\nThe person who loves soccer is the bird keeper\nThe person who loves swimming is directly left of the person's child is named Fred\nThe person who loves tennis is The person whose mother's name is Kailyn\nThe person who is the mother of Timothy is The person whose mother's name is Aniya\nEric is somewhere to the right of the person's child is named Samantha\nThe person who loves basketball is Bob\nThe person who is the mother of Timothy is the fish enthusiast\nThe person's child is named Meredith is somewhere to the right of Peter\nThe person who loves basketball is somewhere to the left of the person who keeps horses\nThe bird keeper is Alice\nThe person whose mother's name is Holly is the bird keeper\nBob is not in the third house",
    "queries": "And( And(lives(Peter) == 1, has_sport(Peter) == tennis, has_child(Peter) == Samantha, has_mother(Peter) == Kailyn, has_animal(Peter) == dog), And(lives(Bob) == 2, has_sport(Bob) == basketball, has_child(Bob) == Timothy, has_mother(Bob) == Aniya, has_animal(Bob) == fish), And(lives(Arnold) == 3, has_sport(Arnold) == baseball, has_child(Arnold) == Meredith, has_mother(Arnold) == Janelle, has_animal(Arnold) == cat), And(lives(Eric) == 4, has_sport(Eric) == swimming, has_child(Eric) == Bella, has_mother(Eric) == Penny, has_animal(Eric) == horse), And(lives(Alice) == 5, has_sport(Alice) == soccer, has_child(Alice) == Fred, has_mother(Alice) == Holly, has_animal(Alice) == bird) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-9",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Alice`, `Arnold`, `Eric`, `Peter`\n - People use unique phone models: `samsung galaxy s21`, `google pixel 6`, `iphone 13`, `huawei p50`, `oneplus 9`, `xiaomi mi 11`\n - The people are of nationalities: `swede`, `chinese`, `norwegian`, `dane`, `german`, `brit`\n - Each person has a favorite color: `blue`, `red`, `yellow`, `green`, `white`, `purple`\n\nClues:\n1. Carol is not in the third house.\n2. There is one house between the Dane and the British person.\n3. Carol is the person whose favorite color is green.\n4. Arnold is directly left of Alice.\n5. Alice is the German.\n6. The person who uses a OnePlus 9 is the person who loves purple.\n7. The person who uses a Huawei P50 is not in the third house.\n8. The person who uses a Samsung Galaxy S21 is in the fifth house.\n9. The person who loves white is somewhere to the right of the person whose favorite color is red.\n10. The person who uses a Samsung Galaxy S21 is Bob.\n11. The Dane is the person who loves yellow.\n12. The person who uses a Samsung Galaxy S21 is somewhere to the left of Peter.\n13. The person who loves blue is Peter.\n14. Peter is the British person.\n15. The person who uses a Samsung Galaxy S21 is directly left of the person who uses an iPhone 13.\n16. The Norwegian is the person who loves purple.\n17. The person who uses a Xiaomi Mi 11 is the Chinese.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Nationality",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "xiaomi mi 11",
          "chinese",
          "green"
        ],
        [
          "2",
          "Arnold",
          "oneplus 9",
          "norwegian",
          "purple"
        ],
        [
          "3",
          "Alice",
          "google pixel 6",
          "german",
          "red"
        ],
        [
          "4",
          "Eric",
          "huawei p50",
          "dane",
          "yellow"
        ],
        [
          "5",
          "Bob",
          "samsung galaxy s21",
          "swede",
          "white"
        ],
        [
          "6",
          "Peter",
          "iphone 13",
          "brit",
          "blue"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Alice, Arnold, Eric, Peter])\nphoneModels = EnumSort([samsung_galaxy_s21, google_pixel_6, iphone_13, huawei_p50, oneplus_9, xiaomi_mi_11])\nnationalities = EnumSort([swede, chinese, norwegian, dane, german, brit])\ncolors = EnumSort([blue, red, yellow, green, white, purple])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_nationality = Function([people] -> [nationalities])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Carol is not in the third house\nThere is one house between the Dane and the British person\nCarol is the person whose favorite color is green\nArnold is directly left of Alice\nAlice is the German\nThe person who uses a OnePlus 9 is the person who loves purple\nThe person who uses a Huawei P50 is not in the third house\nThe person who uses a Samsung Galaxy S21 is in the fifth house\nThe person who loves white is somewhere to the right of the person whose favorite color is red\nThe person who uses a Samsung Galaxy S21 is Bob\nThe Dane is the person who loves yellow\nThe person who uses a Samsung Galaxy S21 is somewhere to the left of Peter\nThe person who loves blue is Peter\nPeter is the British person\nThe person who uses a Samsung Galaxy S21 is directly left of the person who uses an iPhone 13\nThe Norwegian is the person who loves purple\nThe person who uses a Xiaomi Mi 11 is the Chinese",
    "queries": "And( And(lives(Carol) == 1, uses_phone(Carol) == xiaomi_mi_11, has_nationality(Carol) == chinese, has_color(Carol) == green), And(lives(Arnold) == 2, uses_phone(Arnold) == oneplus_9, has_nationality(Arnold) == norwegian, has_color(Arnold) == purple), And(lives(Alice) == 3, uses_phone(Alice) == google_pixel_6, has_nationality(Alice) == german, has_color(Alice) == red), And(lives(Eric) == 4, uses_phone(Eric) == huawei_p50, has_nationality(Eric) == dane, has_color(Eric) == yellow), And(lives(Bob) == 5, uses_phone(Bob) == samsung_galaxy_s21, has_nationality(Bob) == swede, has_color(Bob) == white), And(lives(Peter) == 6, uses_phone(Peter) == iphone_13, has_nationality(Peter) == brit, has_color(Peter) == blue) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-16",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Alice`\n - Each person has a unique birthday month: `sept`, `april`, `feb`, `jan`\n - Everyone has something unique for lunch: `pizza`, `spaghetti`, `grilled cheese`, `stew`\n - Each person has a unique hobby: `cooking`, `gardening`, `painting`, `photography`\n - Each person has an occupation: `teacher`, `artist`, `engineer`, `doctor`\n - Each mother is accompanied by their child: `Bella`, `Samantha`, `Fred`, `Meredith`\n\nClues:\n1. The person who is a teacher is the person who loves cooking.\n2. The person whose birthday is in January is directly left of Eric.\n3. The person who is an artist is not in the fourth house.\n4. The person who loves the spaghetti eater is not in the third house.\n5. The person's child is named Bella is the person who paints as a hobby.\n6. The person whose birthday is in January is the person who is a teacher.\n7. The person who paints as a hobby is the person who is a doctor.\n8. The person whose birthday is in September is directly left of Arnold.\n9. The person who is a pizza lover is Peter.\n10. The person who loves the stew is somewhere to the left of the photography enthusiast.\n11. Arnold is the person's child is named Meredith.\n12. The person whose birthday is in January is directly left of the person whose birthday is in September.\n13. The person whose birthday is in April is in the fourth house.\n14. The person's child is named Fred is directly left of the person whose birthday is in April.\n15. Alice is in the first house.\n16. The person whose birthday is in April is the person who enjoys gardening.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Food",
        "Hobby",
        "Occupation",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "feb",
          "stew",
          "painting",
          "doctor",
          "Bella"
        ],
        [
          "2",
          "Peter",
          "jan",
          "pizza",
          "cooking",
          "teacher",
          "Samantha"
        ],
        [
          "3",
          "Eric",
          "sept",
          "grilled cheese",
          "photography",
          "artist",
          "Fred"
        ],
        [
          "4",
          "Arnold",
          "april",
          "spaghetti",
          "gardening",
          "engineer",
          "Meredith"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Alice])\nbirthdayMonths = EnumSort([sept, april, feb, jan])\nfoods = EnumSort([pizza, spaghetti, grilled_cheese, stew])\nhobbies = EnumSort([cooking, gardening, painting, photography])\noccupations = EnumSort([teacher, artist, engineer, doctor])\nchildren = EnumSort([Bella, Samantha, Fred, Meredith])\nlives = Function([people] -> [int])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nhas_food = Function([people] -> [foods])\nhas_hobby = Function([people] -> [hobbies])\nhas_occupation = Function([people] -> [occupations])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who is a teacher is the person who loves cooking\nThe person whose birthday is in January is directly left of Eric\nThe person who is an artist is not in the fourth house\nThe person who loves the spaghetti eater is not in the third house\nThe person's child is named Bella is the person who paints as a hobby\nThe person whose birthday is in January is the person who is a teacher\nThe person who paints as a hobby is the person who is a doctor\nThe person whose birthday is in September is directly left of Arnold\nThe person who is a pizza lover is Peter\nThe person who loves the stew is somewhere to the left of the photography enthusiast\nArnold is the person's child is named Meredith\nThe person whose birthday is in January is directly left of the person whose birthday is in September\nThe person whose birthday is in April is in the fourth house\nThe person's child is named Fred is directly left of the person whose birthday is in April\nAlice is in the first house\nThe person whose birthday is in April is the person who enjoys gardening",
    "queries": "And( And(lives(Alice) == 1, has_birthdayMonth(Alice) == feb, has_food(Alice) == stew, has_hobby(Alice) == painting, has_occupation(Alice) == doctor, has_child(Alice) == Bella), And(lives(Peter) == 2, has_birthdayMonth(Peter) == jan, has_food(Peter) == pizza, has_hobby(Peter) == cooking, has_occupation(Peter) == teacher, has_child(Peter) == Samantha), And(lives(Eric) == 3, has_birthdayMonth(Eric) == sept, has_food(Eric) == grilled_cheese, has_hobby(Eric) == photography, has_occupation(Eric) == artist, has_child(Eric) == Fred), And(lives(Arnold) == 4, has_birthdayMonth(Arnold) == april, has_food(Arnold) == spaghetti, has_hobby(Arnold) == gardening, has_occupation(Arnold) == engineer, has_child(Arnold) == Meredith) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-31",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Eric`, `Peter`, `Alice`, `Bob`, `Arnold`\n - Everyone has something unique for lunch: `spaghetti`, `soup`, `grilled cheese`, `stir fry`, `stew`, `pizza`\n - Each person has a favorite color: `green`, `purple`, `blue`, `red`, `white`, `yellow`\n - The mothers' names in different houses are unique: `Holly`, `Penny`, `Aniya`, `Kailyn`, `Sarah`, `Janelle`\n - Each person lives in a unique style of house: `colonial`, `craftsman`, `modern`, `ranch`, `victorian`, `mediterranean`\n\nClues:\n1. The person whose mother's name is Janelle is the person living in a colonial-style house.\n2. Peter is the person whose favorite color is green.\n3. The person who loves blue is directly left of the person who loves the spaghetti eater.\n4. The person whose mother's name is Penny is directly left of the person whose favorite color is red.\n5. The person who loves blue is The person whose mother's name is Penny.\n6. The person whose mother's name is Aniya is directly left of the person whose favorite color is green.\n7. The person who loves white is somewhere to the left of The person whose mother's name is Janelle.\n8. Eric is the person who loves eating grilled cheese.\n9. The person whose mother's name is Holly is directly left of Alice.\n10. The person whose mother's name is Holly and the person who loves the stew are next to each other.\n11. Alice is the person in a ranch-style home.\n12. Carol is not in the sixth house.\n13. The person who loves stir fry is the person who loves purple.\n14. The person whose favorite color is red and the person living in a colonial-style house are next to each other.\n15. The person who loves the soup is Peter.\n16. The person who is a pizza lover is somewhere to the left of The person whose mother's name is Sarah.\n17. The person residing in a Victorian house is the person who loves eating grilled cheese.\n18. The person who loves the spaghetti eater is not in the fifth house.\n19. There are two houses between the person who loves eating grilled cheese and The person whose mother's name is Aniya.\n20. Arnold is the person whose favorite color is red.\n21. The person in a modern-style house is Arnold.\n22. The person who loves yellow is the person in a Mediterranean-style villa.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Color",
        "Mother",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "grilled cheese",
          "white",
          "Kailyn",
          "victorian"
        ],
        [
          "2",
          "Carol",
          "pizza",
          "yellow",
          "Holly",
          "mediterranean"
        ],
        [
          "3",
          "Alice",
          "stew",
          "blue",
          "Penny",
          "ranch"
        ],
        [
          "4",
          "Arnold",
          "spaghetti",
          "red",
          "Aniya",
          "modern"
        ],
        [
          "5",
          "Peter",
          "soup",
          "green",
          "Janelle",
          "colonial"
        ],
        [
          "6",
          "Bob",
          "stir fry",
          "purple",
          "Sarah",
          "craftsman"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Eric, Peter, Alice, Bob, Arnold])\nfoods = EnumSort([spaghetti, soup, grilled_cheese, stir_fry, stew, pizza])\ncolors = EnumSort([green, purple, blue, red, white, yellow])\nmothers = EnumSort([Holly, Penny, Aniya, Kailyn, Sarah, Janelle])\nhouseStyles = EnumSort([colonial, craftsman, modern, ranch, victorian, mediterranean])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_color = Function([people] -> [colors])\nhas_mother = Function([people] -> [mothers])\nhas_houseStyle = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose mother's name is Janelle is the person living in a colonial-style house\nPeter is the person whose favorite color is green\nThe person who loves blue is directly left of the person who loves the spaghetti eater\nThe person whose mother's name is Penny is directly left of the person whose favorite color is red\nThe person who loves blue is The person whose mother's name is Penny\nThe person whose mother's name is Aniya is directly left of the person whose favorite color is green\nThe person who loves white is somewhere to the left of The person whose mother's name is Janelle\nEric is the person who loves eating grilled cheese\nThe person whose mother's name is Holly is directly left of Alice\nThe person whose mother's name is Holly and the person who loves the stew are next to each other\nAlice is the person in a ranch-style home\nCarol is not in the sixth house\nThe person who loves stir fry is the person who loves purple\nThe person whose favorite color is red and the person living in a colonial-style house are next to each other\nThe person who loves the soup is Peter\nThe person who is a pizza lover is somewhere to the left of The person whose mother's name is Sarah\nThe person residing in a Victorian house is the person who loves eating grilled cheese\nThe person who loves the spaghetti eater is not in the fifth house\nThere are two houses between the person who loves eating grilled cheese and The person whose mother's name is Aniya\nArnold is the person whose favorite color is red\nThe person in a modern-style house is Arnold\nThe person who loves yellow is the person in a Mediterranean-style villa",
    "queries": "And( And(lives(Eric) == 1, has_food(Eric) == grilled_cheese, has_color(Eric) == white, has_mother(Eric) == Kailyn, has_houseStyle(Eric) == victorian), And(lives(Carol) == 2, has_food(Carol) == pizza, has_color(Carol) == yellow, has_mother(Carol) == Holly, has_houseStyle(Carol) == mediterranean), And(lives(Alice) == 3, has_food(Alice) == stew, has_color(Alice) == blue, has_mother(Alice) == Penny, has_houseStyle(Alice) == ranch), And(lives(Arnold) == 4, has_food(Arnold) == spaghetti, has_color(Arnold) == red, has_mother(Arnold) == Aniya, has_houseStyle(Arnold) == modern), And(lives(Peter) == 5, has_food(Peter) == soup, has_color(Peter) == green, has_mother(Peter) == Janelle, has_houseStyle(Peter) == colonial), And(lives(Bob) == 6, has_food(Bob) == stir_fry, has_color(Bob) == purple, has_mother(Bob) == Sarah, has_houseStyle(Bob) == craftsman) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-4",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Bob`, `Peter`, `Eric`, `Carol`, `Arnold`\n - People own unique car models: `toyota camry`, `ford f150`, `bmw 3 series`, `tesla model 3`, `chevrolet silverado`, `honda civic`\n - Each person has a unique hobby: `knitting`, `gardening`, `woodworking`, `painting`, `photography`, `cooking`\n - Each person has a unique favorite drink: `coffee`, `root beer`, `milk`, `water`, `tea`, `boba tea`\n\nClues:\n1. There is one house between the coffee drinker and the woodworking hobbyist.\n2. The person who enjoys knitting is in the first house.\n3. There are two houses between the person who loves cooking and the person who likes milk.\n4. The person who paints as a hobby is the person who owns a Toyota Camry.\n5. Arnold is the tea drinker.\n6. There is one house between the person who owns a Chevrolet Silverado and the person who owns a BMW 3 Series.\n7. The woodworking hobbyist is somewhere to the right of Carol.\n8. The person who paints as a hobby is not in the fourth house.\n9. The boba tea drinker is in the third house.\n10. Bob is somewhere to the left of the person who likes milk.\n11. The person who owns a Chevrolet Silverado is not in the sixth house.\n12. The person who owns a Toyota Camry is the root beer lover.\n13. The person who owns a Chevrolet Silverado is Alice.\n14. Peter is the person who owns a Toyota Camry.\n15. The root beer lover is not in the sixth house.\n16. The person who owns a Tesla Model 3 is not in the first house.\n17. The person who enjoys gardening is Eric.\n18. The tea drinker is somewhere to the left of the one who only drinks water.\n19. The person who owns a Honda Civic and the boba tea drinker are next to each other.\n20. Bob is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Hobby",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "ford f150",
          "knitting",
          "tea"
        ],
        [
          "2",
          "Carol",
          "honda civic",
          "photography",
          "coffee"
        ],
        [
          "3",
          "Bob",
          "tesla model 3",
          "cooking",
          "boba tea"
        ],
        [
          "4",
          "Alice",
          "chevrolet silverado",
          "woodworking",
          "water"
        ],
        [
          "5",
          "Peter",
          "toyota camry",
          "painting",
          "root beer"
        ],
        [
          "6",
          "Eric",
          "bmw 3 series",
          "gardening",
          "milk"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Bob, Peter, Eric, Carol, Arnold])\ncarModels = EnumSort([toyota_camry, ford_f150, bmw_3_series, tesla_model_3, chevrolet_silverado, honda_civic])\nhobbies = EnumSort([knitting, gardening, woodworking, painting, photography, cooking])\ndrinks = EnumSort([coffee, root_beer, milk, water, tea, boba_tea])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nhas_hobby = Function([people] -> [hobbies])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the coffee drinker and the woodworking hobbyist\nThe person who enjoys knitting is in the first house\nThere are two houses between the person who loves cooking and the person who likes milk\nThe person who paints as a hobby is the person who owns a Toyota Camry\nArnold is the tea drinker\nThere is one house between the person who owns a Chevrolet Silverado and the person who owns a BMW 3 Series\nThe woodworking hobbyist is somewhere to the right of Carol\nThe person who paints as a hobby is not in the fourth house\nThe boba tea drinker is in the third house\nBob is somewhere to the left of the person who likes milk\nThe person who owns a Chevrolet Silverado is not in the sixth house\nThe person who owns a Toyota Camry is the root beer lover\nThe person who owns a Chevrolet Silverado is Alice\nPeter is the person who owns a Toyota Camry\nThe root beer lover is not in the sixth house\nThe person who owns a Tesla Model 3 is not in the first house\nThe person who enjoys gardening is Eric\nThe tea drinker is somewhere to the left of the one who only drinks water\nThe person who owns a Honda Civic and the boba tea drinker are next to each other\nBob is in the third house",
    "queries": "And( And(lives(Arnold) == 1, owns_car(Arnold) == ford_f150, has_hobby(Arnold) == knitting, has_drink(Arnold) == tea), And(lives(Carol) == 2, owns_car(Carol) == honda_civic, has_hobby(Carol) == photography, has_drink(Carol) == coffee), And(lives(Bob) == 3, owns_car(Bob) == tesla_model_3, has_hobby(Bob) == cooking, has_drink(Bob) == boba_tea), And(lives(Alice) == 4, owns_car(Alice) == chevrolet_silverado, has_hobby(Alice) == woodworking, has_drink(Alice) == water), And(lives(Peter) == 5, owns_car(Peter) == toyota_camry, has_hobby(Peter) == painting, has_drink(Peter) == root_beer), And(lives(Eric) == 6, owns_car(Eric) == bmw_3_series, has_hobby(Eric) == gardening, has_drink(Eric) == milk) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-18",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Peter`, `Alice`\n - Each person has a unique level of education: `master`, `high school`, `associate`, `bachelor`\n - Everyone has something unique for lunch: `stew`, `grilled cheese`, `pizza`, `spaghetti`\n - People have unique favorite sports: `soccer`, `swimming`, `tennis`, `basketball`\n - People have unique hair colors: `blonde`, `black`, `brown`, `red`\n - People have unique favorite book genres: `mystery`, `fantasy`, `science fiction`, `romance`\n\nClues:\n1. The person who loves the stew is in the first house.\n2. The person who loves science fiction books is the person who has black hair.\n3. The person who has blonde hair is not in the second house.\n4. The person with a master's degree is in the first house.\n5. Eric is the person who loves soccer.\n6. The person with a master's degree and the person who loves mystery books are next to each other.\n7. The person who loves tennis is the person with a high school diploma.\n8. The person who loves the spaghetti eater is the person who loves science fiction books.\n9. The person who is a pizza lover is the person with an associate's degree.\n10. The person who has blonde hair is not in the fourth house.\n11. The person with a master's degree is directly left of Eric.\n12. The person with a bachelor's degree is directly left of the person who loves fantasy books.\n13. The person who has red hair is Peter.\n14. The person who loves swimming is directly left of the person who is a pizza lover.\n15. Alice is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Food",
        "FavoriteSport",
        "HairColor",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "master",
          "stew",
          "swimming",
          "blonde",
          "romance"
        ],
        [
          "2",
          "Eric",
          "associate",
          "pizza",
          "soccer",
          "brown",
          "mystery"
        ],
        [
          "3",
          "Alice",
          "bachelor",
          "spaghetti",
          "basketball",
          "black",
          "science fiction"
        ],
        [
          "4",
          "Peter",
          "high school",
          "grilled cheese",
          "tennis",
          "red",
          "fantasy"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Peter, Alice])\neducationLevels = EnumSort([master, high_school, associate, bachelor])\nfoods = EnumSort([stew, grilled_cheese, pizza, spaghetti])\nsports = EnumSort([soccer, swimming, tennis, basketball])\nhairColors = EnumSort([blonde, black, brown, red])\nbookGenres = EnumSort([mystery, fantasy, science_fiction, romance])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_food = Function([people] -> [foods])\nhas_sport = Function([people] -> [sports])\nhas_hairColor = Function([people] -> [hairColors])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves the stew is in the first house\nThe person who loves science fiction books is the person who has black hair\nThe person who has blonde hair is not in the second house\nThe person with a master's degree is in the first house\nEric is the person who loves soccer\nThe person with a master's degree and the person who loves mystery books are next to each other\nThe person who loves tennis is the person with a high school diploma\nThe person who loves the spaghetti eater is the person who loves science fiction books\nThe person who is a pizza lover is the person with an associate's degree\nThe person who has blonde hair is not in the fourth house\nThe person with a master's degree is directly left of Eric\nThe person with a bachelor's degree is directly left of the person who loves fantasy books\nThe person who has red hair is Peter\nThe person who loves swimming is directly left of the person who is a pizza lover\nAlice is not in the first house",
    "queries": "And( And( lives(Arnold) == 1, has_education(Arnold) == master, has_food(Arnold) == stew, has_sport(Arnold) == swimming, has_hairColor(Arnold) == blonde, has_bookGenre(Arnold) == romance ), And( lives(Eric) == 2, has_education(Eric) == associate, has_food(Eric) == pizza, has_sport(Eric) == soccer, has_hairColor(Eric) == brown, has_bookGenre(Eric) == mystery ), And( lives(Alice) == 3, has_education(Alice) == bachelor, has_food(Alice) == spaghetti, has_sport(Alice) == basketball, has_hairColor(Alice) == black, has_bookGenre(Alice) == science_fiction ), And( lives(Peter) == 4, has_education(Peter) == high_school, has_food(Peter) == grilled_cheese, has_sport(Peter) == tennis, has_hairColor(Peter) == red, has_bookGenre(Peter) == fantasy ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-8",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Bob`, `Arnold`, `Carol`, `Alice`\n - Each person has a unique birthday month: `may`, `sept`, `jan`, `mar`, `feb`, `april`\n - People have unique hair colors: `brown`, `blonde`, `red`, `auburn`, `black`, `gray`\n - Each mother is accompanied by their child: `Alice`, `Samantha`, `Fred`, `Meredith`, `Timothy`, `Bella`\n - Everyone has a favorite smoothie: `blueberry`, `cherry`, `watermelon`, `lime`, `dragonfruit`, `desert`\n - The mothers' names in different houses are unique: `Sarah`, `Aniya`, `Janelle`, `Holly`, `Kailyn`, `Penny`\n\nClues:\n1. The person whose birthday is in September and the person's child is named Alice are next to each other.\n2. The person whose birthday is in April is the person who is the mother of Timothy.\n3. The person who likes Cherry smoothies is the person who has gray hair.\n4. Alice is somewhere to the right of Arnold.\n5. The person's child is named Alice is somewhere to the right of The person whose mother's name is Sarah.\n6. Peter is the person who drinks Blueberry smoothies.\n7. The person whose mother's name is Janelle is the person whose birthday is in May.\n8. The person whose birthday is in January is somewhere to the left of The person whose mother's name is Sarah.\n9. The Watermelon smoothie lover is the person who has brown hair.\n10. The person who has red hair is somewhere to the right of the person who has gray hair.\n11. The person who drinks Lime smoothies is in the fifth house.\n12. The person who has black hair and the person's child is named Meredith are next to each other.\n13. The person whose birthday is in March is somewhere to the right of the person who has red hair.\n14. The person whose mother's name is Sarah is somewhere to the left of the person who has auburn hair.\n15. The person who has black hair is directly left of The person whose mother's name is Penny.\n16. The person's child is named Samantha is The person whose mother's name is Holly.\n17. The person who has blonde hair and Bob are next to each other.\n18. The person who has gray hair is the person whose birthday is in January.\n19. The person who has black hair is in the first house.\n20. The person whose mother's name is Sarah is the person who has blonde hair.\n21. The person whose mother's name is Kailyn is Arnold.\n22. The person whose birthday is in January is The person whose mother's name is Kailyn.\n23. The person whose birthday is in September is Carol.\n24. The person who drinks Lime smoothies is somewhere to the right of the Desert smoothie lover.\n25. The person's child is named Fred is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "HairColor",
        "Children",
        "Smoothie",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "april",
          "black",
          "Timothy",
          "blueberry",
          "Aniya"
        ],
        [
          "2",
          "Eric",
          "feb",
          "brown",
          "Meredith",
          "watermelon",
          "Penny"
        ],
        [
          "3",
          "Arnold",
          "jan",
          "gray",
          "Bella",
          "cherry",
          "Kailyn"
        ],
        [
          "4",
          "Carol",
          "sept",
          "blonde",
          "Fred",
          "desert",
          "Sarah"
        ],
        [
          "5",
          "Bob",
          "may",
          "red",
          "Alice",
          "lime",
          "Janelle"
        ],
        [
          "6",
          "Alice",
          "mar",
          "auburn",
          "Samantha",
          "dragonfruit",
          "Holly"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Bob, Arnold, Carol, Alice])\nmonths = EnumSort([may, sept, jan, mar, feb, april])\nhairColors = EnumSort([brown, blonde, red, auburn, black, gray])\nchildren = EnumSort([Alice, Samantha, Fred, Meredith, Timothy, Bella])\nsmoothies = EnumSort([blueberry, cherry, watermelon, lime, dragonfruit, desert])\nmothers = EnumSort([Sarah, Aniya, Janelle, Holly, Kailyn, Penny])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nhas_hairColor = Function([people] -> [hairColors])\nhas_child = Function([people] -> [children])\nhas_smoothie = Function([people] -> [smoothies])\nhas_mother = Function([people] -> [mothers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in September and the person's child is named Alice are next to each other\nThe person whose birthday is in April is the person who is the mother of Timothy\nThe person who likes Cherry smoothies is the person who has gray hair\nAlice is somewhere to the right of Arnold\nThe person's child is named Alice is somewhere to the right of The person whose mother's name is Sarah\nPeter is the person who drinks Blueberry smoothies\nThe person whose mother's name is Janelle is the person whose birthday is in May\nThe person whose birthday is in January is somewhere to the left of The person whose mother's name is Sarah\nThe Watermelon smoothie lover is the person who has brown hair\nThe person who has red hair is somewhere to the right of the person who has gray hair\nThe person who drinks Lime smoothies is in the fifth house\nThe person who has black hair and the person's child is named Meredith are next to each other\nThe person whose birthday is in March is somewhere to the right of the person who has red hair\nThe person whose mother's name is Sarah is somewhere to the left of the person who has auburn hair\nThe person who has black hair is directly left of The person whose mother's name is Penny\nThe person's child is named Samantha is The person whose mother's name is Holly\nThe person who has blonde hair and Bob are next to each other\nThe person who has gray hair is the person whose birthday is in January\nThe person who has black hair is in the first house\nThe person whose mother's name is Sarah is the person who has blonde hair\nThe person whose mother's name is Kailyn is Arnold\nThe person whose birthday is in January is The person whose mother's name is Kailyn\nThe person whose birthday is in September is Carol\nThe person who drinks Lime smoothies is somewhere to the right of the Desert smoothie lover\nThe person's child is named Fred is not in the third house",
    "queries": "And( And(lives(Peter) == 1, has_birthday(Peter) == april, has_hairColor(Peter) == black, has_child(Peter) == Timothy, has_smoothie(Peter) == blueberry, has_mother(Peter) == Aniya), And(lives(Eric) == 2, has_birthday(Eric) == feb, has_hairColor(Eric) == brown, has_child(Eric) == Meredith, has_smoothie(Eric) == watermelon, has_mother(Eric) == Penny), And(lives(Arnold) == 3, has_birthday(Arnold) == jan, has_hairColor(Arnold) == gray, has_child(Arnold) == Bella, has_smoothie(Arnold) == cherry, has_mother(Arnold) == Kailyn), And(lives(Carol) == 4, has_birthday(Carol) == sept, has_hairColor(Carol) == blonde, has_child(Carol) == Fred, has_smoothie(Carol) == desert, has_mother(Carol) == Sarah), And(lives(Bob) == 5, has_birthday(Bob) == may, has_hairColor(Bob) == red, has_child(Bob) == Alice, has_smoothie(Bob) == lime, has_mother(Bob) == Janelle), And(lives(Alice) == 6, has_birthday(Alice) == mar, has_hairColor(Alice) == auburn, has_child(Alice) == Samantha, has_smoothie(Alice) == dragonfruit, has_mother(Alice) == Holly) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-32",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Arnold`, `Eric`\n - Each person has a unique hobby: `cooking`, `gardening`, `painting`, `photography`\n - People own unique car models: `honda civic`, `toyota camry`, `tesla model 3`, `ford f150`\n - Everyone has something unique for lunch: `grilled cheese`, `pizza`, `spaghetti`, `stew`\n - Each person has an occupation: `doctor`, `artist`, `engineer`, `teacher`\n - They all have a unique favorite flower: `daffodils`, `roses`, `lilies`, `carnations`\n\nClues:\n1. The person who loves the stew is Eric.\n2. The person who is a teacher is directly left of Peter.\n3. The person who loves a carnations arrangement is the person who is an artist.\n4. The person who paints as a hobby is the person who loves the spaghetti eater.\n5. There is one house between the person who is an artist and the photography enthusiast.\n6. The person who enjoys gardening is in the first house.\n7. The person who loves the spaghetti eater is somewhere to the right of the person who owns a Honda Civic.\n8. The person who is a pizza lover is directly left of the photography enthusiast.\n9. The person who loves a carnations arrangement is Alice.\n10. The person who owns a Tesla Model 3 is directly left of Eric.\n11. The person who is an engineer is the person who loves a bouquet of daffodils.\n12. The person who loves the boquet of lilies is somewhere to the left of the person who loves the stew.\n13. There is one house between the person who enjoys gardening and the person who owns a Toyota Camry.\n14. The person who is a teacher is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "CarModel",
        "Food",
        "Occupation",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "gardening",
          "honda civic",
          "grilled cheese",
          "artist",
          "carnations"
        ],
        [
          "2",
          "Arnold",
          "cooking",
          "tesla model 3",
          "pizza",
          "doctor",
          "lilies"
        ],
        [
          "3",
          "Eric",
          "photography",
          "toyota camry",
          "stew",
          "teacher",
          "roses"
        ],
        [
          "4",
          "Peter",
          "painting",
          "ford f150",
          "spaghetti",
          "engineer",
          "daffodils"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Arnold, Eric])\nhobbies = EnumSort([cooking, gardening, painting, photography])\ncars = EnumSort([honda_civic, toyota_camry, tesla_model_3, ford_f150])\nfoods = EnumSort([grilled_cheese, pizza, spaghetti, stew])\noccupations = EnumSort([doctor, artist, engineer, teacher])\nflowers = EnumSort([daffodils, roses, lilies, carnations])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nowns_car = Function([people] -> [cars])\nhas_food = Function([people] -> [foods])\nhas_occupation = Function([people] -> [occupations])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves the stew is Eric\nThe person who is a teacher is directly left of Peter\nThe person who loves a carnations arrangement is the person who is an artist\nThe person who paints as a hobby is the person who loves the spaghetti eater\nThere is one house between the person who is an artist and the photography enthusiast\nThe person who enjoys gardening is in the first house\nThe person who loves the spaghetti eater is somewhere to the right of the person who owns a Honda Civic\nThe person who is a pizza lover is directly left of the photography enthusiast\nThe person who loves a carnations arrangement is Alice\nThe person who owns a Tesla Model 3 is directly left of Eric\nThe person who is an engineer is the person who loves a bouquet of daffodils\nThe person who loves the boquet of lilies is somewhere to the left of the person who loves the stew\nThere is one house between the person who enjoys gardening and the person who owns a Toyota Camry\nThe person who is a teacher is in the third house",
    "queries": "And( And(lives(Alice) == 1, has_hobby(Alice) == gardening, owns_car(Alice) == honda_civic, has_food(Alice) == grilled_cheese, has_occupation(Alice) == artist, has_flower(Alice) == carnations), And(lives(Arnold) == 2, has_hobby(Arnold) == cooking, owns_car(Arnold) == tesla_model_3, has_food(Arnold) == pizza, has_occupation(Arnold) == doctor, has_flower(Arnold) == lilies), And(lives(Eric) == 3, has_hobby(Eric) == photography, owns_car(Eric) == toyota_camry, has_food(Eric) == stew, has_occupation(Eric) == teacher, has_flower(Eric) == roses), And(lives(Peter) == 4, has_hobby(Peter) == painting, owns_car(Peter) == ford_f150, has_food(Peter) == spaghetti, has_occupation(Peter) == engineer, has_flower(Peter) == daffodils) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-23",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Peter`\n - People use unique phone models: `iphone 13`, `samsung galaxy s21`, `google pixel 6`, `oneplus 9`\n - The people are of nationalities: `norwegian`, `swede`, `dane`, `brit`\n - People have unique favorite sports: `tennis`, `swimming`, `soccer`, `basketball`\n - Each person has a favorite color: `red`, `white`, `yellow`, `green`\n - Everyone has a favorite smoothie: `desert`, `watermelon`, `cherry`, `dragonfruit`\n\nClues:\n1. The person who loves basketball is the British person.\n2. The person who likes Cherry smoothies is directly left of Arnold.\n3. The person who uses an iPhone 13 is somewhere to the left of the person who loves tennis.\n4. The person who loves soccer is the person whose favorite color is red.\n5. Eric is the person who loves basketball.\n6. Alice is the Watermelon smoothie lover.\n7. The Norwegian is not in the fourth house.\n8. Eric is somewhere to the left of the person who loves yellow.\n9. The Desert smoothie lover is not in the second house.\n10. The person who loves tennis is the person whose favorite color is green.\n11. The person who uses a OnePlus 9 is the Norwegian.\n12. Alice is the person who uses a Samsung Galaxy S21.\n13. Eric is in the third house.\n14. Peter is somewhere to the left of the Dane.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Nationality",
        "FavoriteSport",
        "Color",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "iphone 13",
          "swede",
          "soccer",
          "red",
          "cherry"
        ],
        [
          "2",
          "Arnold",
          "oneplus 9",
          "norwegian",
          "tennis",
          "green",
          "dragonfruit"
        ],
        [
          "3",
          "Eric",
          "google pixel 6",
          "brit",
          "basketball",
          "white",
          "desert"
        ],
        [
          "4",
          "Alice",
          "samsung galaxy s21",
          "dane",
          "swimming",
          "yellow",
          "watermelon"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Peter])\nphoneModels = EnumSort([iphone_13, samsung_galaxy_s21, google_pixel_6, oneplus_9])\nnationalities = EnumSort([norwegian, swede, dane, brit])\nsports = EnumSort([tennis, swimming, soccer, basketball])\ncolors = EnumSort([red, white, yellow, green])\nsmoothies = EnumSort([desert, watermelon, cherry, dragonfruit])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_nationality = Function([people] -> [nationalities])\nhas_sport = Function([people] -> [sports])\nhas_color = Function([people] -> [colors])\nhas_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves basketball is the British person\nThe person who likes Cherry smoothies is directly left of Arnold\nThe person who uses an iPhone 13 is somewhere to the left of the person who loves tennis\nThe person who loves soccer is the person whose favorite color is red\nEric is the person who loves basketball\nAlice is the Watermelon smoothie lover\nThe Norwegian is not in the fourth house\nEric is somewhere to the left of the person who loves yellow\nThe Desert smoothie lover is not in the second house\nThe person who loves tennis is the person whose favorite color is green\nThe person who uses a OnePlus 9 is the Norwegian\nAlice is the person who uses a Samsung Galaxy S21\nEric is in the third house\nPeter is somewhere to the left of the Dane",
    "queries": "And( And(lives(Peter) == 1, uses_phone(Peter) == iphone_13, has_nationality(Peter) == swede, has_sport(Peter) == soccer, has_color(Peter) == red, has_smoothie(Peter) == cherry), And(lives(Arnold) == 2, uses_phone(Arnold) == oneplus_9, has_nationality(Arnold) == norwegian, has_sport(Arnold) == tennis, has_color(Arnold) == green, has_smoothie(Arnold) == dragonfruit), And(lives(Eric) == 3, uses_phone(Eric) == google_pixel_6, has_nationality(Eric) == brit, has_sport(Eric) == basketball, has_color(Eric) == white, has_smoothie(Eric) == desert), And(lives(Alice) == 4, uses_phone(Alice) == samsung_galaxy_s21, has_nationality(Alice) == dane, has_sport(Alice) == swimming, has_color(Alice) == yellow, has_smoothie(Alice) == watermelon) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-3",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Eric`, `Alice`\n - They all have a unique favorite flower: `lilies`, `daffodils`, `carnations`, `roses`, `tulips`\n - Each person has an occupation: `artist`, `doctor`, `lawyer`, `teacher`, `engineer`\n - Everyone has a favorite smoothie: `lime`, `watermelon`, `cherry`, `dragonfruit`, `desert`\n - People own unique car models: `honda civic`, `ford f150`, `bmw 3 series`, `toyota camry`, `tesla model 3`\n\nClues:\n1. Arnold is the person who is an artist.\n2. The person who is a doctor is the person who loves the rose bouquet.\n3. Bob is the person who loves a carnations arrangement.\n4. The person who owns a BMW 3 Series is Arnold.\n5. The person who loves the boquet of lilies is somewhere to the right of Alice.\n6. The Watermelon smoothie lover is somewhere to the left of the person who drinks Lime smoothies.\n7. The person who is a lawyer is the person who owns a Toyota Camry.\n8. The person who loves the boquet of lilies is Arnold.\n9. There are two houses between Bob and the person who owns a Honda Civic.\n10. The person who owns a Tesla Model 3 is in the third house.\n11. Peter is directly left of the person who loves the boquet of lilies.\n12. The Desert smoothie lover is the person who is a teacher.\n13. The person who is an artist and the Dragonfruit smoothie lover are next to each other.\n14. The person who is a doctor is the Watermelon smoothie lover.\n15. The person who loves the vase of tulips is directly left of the person who owns a Toyota Camry.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Occupation",
        "Smoothie",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "tulips",
          "teacher",
          "desert",
          "ford f150"
        ],
        [
          "2",
          "Bob",
          "carnations",
          "lawyer",
          "cherry",
          "toyota camry"
        ],
        [
          "3",
          "Peter",
          "roses",
          "doctor",
          "watermelon",
          "tesla model 3"
        ],
        [
          "4",
          "Arnold",
          "lilies",
          "artist",
          "lime",
          "bmw 3 series"
        ],
        [
          "5",
          "Eric",
          "daffodils",
          "engineer",
          "dragonfruit",
          "honda civic"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Eric, Alice])\nflowers = EnumSort([lilies, daffodils, carnations, roses, tulips])\noccupations = EnumSort([artist, doctor, lawyer, teacher, engineer])\nsmoothies = EnumSort([lime, watermelon, cherry, dragonfruit, desert])\ncars = EnumSort([honda_civic, ford_f150, bmw_3_series, toyota_camry, tesla_model_3])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_occupation = Function([people] -> [occupations])\nhas_smoothie = Function([people] -> [smoothies])\nhas_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Arnold is the person who is an artist\nThe person who is a doctor is the person who loves the rose bouquet\nBob is the person who loves a carnations arrangement\nThe person who owns a BMW 3 Series is Arnold\nThe person who loves the boquet of lilies is somewhere to the right of Alice\nThe Watermelon smoothie lover is somewhere to the left of the person who drinks Lime smoothies\nThe person who is a lawyer is the person who owns a Toyota Camry\nThe person who loves the boquet of lilies is Arnold\nThere are two houses between Bob and the person who owns a Honda Civic\nThe person who owns a Tesla Model 3 is in the third house\nPeter is directly left of the person who loves the boquet of lilies\nThe Desert smoothie lover is the person who is a teacher\nThe person who is an artist and the Dragonfruit smoothie lover are next to each other\nThe person who is a doctor is the Watermelon smoothie lover\nThe person who loves the vase of tulips is directly left of the person who owns a Toyota Camry",
    "queries": "And( And(lives(Alice) == 1, has_flower(Alice) == tulips, has_occupation(Alice) == teacher, has_smoothie(Alice) == desert, has_car(Alice) == ford_f150), And(lives(Bob) == 2, has_flower(Bob) == carnations, has_occupation(Bob) == lawyer, has_smoothie(Bob) == cherry, has_car(Bob) == toyota_camry), And(lives(Peter) == 3, has_flower(Peter) == roses, has_occupation(Peter) == doctor, has_smoothie(Peter) == watermelon, has_car(Peter) == tesla_model_3), And(lives(Arnold) == 4, has_flower(Arnold) == lilies, has_occupation(Arnold) == artist, has_smoothie(Arnold) == lime, has_car(Arnold) == bmw_3_series), And(lives(Eric) == 5, has_flower(Eric) == daffodils, has_occupation(Eric) == engineer, has_smoothie(Eric) == dragonfruit, has_car(Eric) == honda_civic) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-6",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Alice`, `Bob`, `Peter`\n - Each person prefers a unique type of vacation: `mountain`, `city`, `cruise`, `beach`, `camping`\n - Each person has a unique level of education: `doctorate`, `high school`, `bachelor`, `associate`, `master`\n - Each person has a favorite color: `blue`, `red`, `white`, `yellow`, `green`\n - People use unique phone models: `google pixel 6`, `iphone 13`, `oneplus 9`, `huawei p50`, `samsung galaxy s21`\n - Everyone has something unique for lunch: `grilled cheese`, `stir fry`, `pizza`, `spaghetti`, `stew`\n\nClues:\n1. The person who loves the stew is not in the first house.\n2. There are two houses between the person who loves stir fry and the person with an associate's degree.\n3. The person who enjoys mountain retreats is the person with a bachelor's degree.\n4. The person with a doctorate is somewhere to the right of Bob.\n5. The person who uses a Samsung Galaxy S21 is in the third house.\n6. Eric is the person with a doctorate.\n7. The person with a doctorate is in the third house.\n8. The person who loves stir fry is the person with a bachelor's degree.\n9. The person with a doctorate is the person who is a pizza lover.\n10. The person whose favorite color is green is somewhere to the right of Peter.\n11. The person who enjoys camping trips is the person who uses an iPhone 13.\n12. The person who likes going on cruises is Alice.\n13. There is one house between the person with a high school diploma and the person who uses a Samsung Galaxy S21.\n14. The person who uses a Google Pixel 6 is Arnold.\n15. The person who uses a OnePlus 9 is somewhere to the right of the person who uses a Huawei P50.\n16. Arnold is the person who loves eating grilled cheese.\n17. The person who loves eating grilled cheese is not in the fourth house.\n18. There are two houses between the person with a bachelor's degree and the person whose favorite color is red.\n19. The person who loves beach vacations is somewhere to the right of the person who prefers city breaks.\n20. The person whose favorite color is green is not in the second house.\n21. The person who loves blue is somewhere to the right of Peter.\n22. There is one house between the person who enjoys camping trips and the person who loves yellow.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Education",
        "Color",
        "PhoneModel",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "camping",
          "high school",
          "white",
          "iphone 13",
          "spaghetti"
        ],
        [
          "2",
          "Bob",
          "mountain",
          "bachelor",
          "blue",
          "huawei p50",
          "stir fry"
        ],
        [
          "3",
          "Eric",
          "city",
          "doctorate",
          "yellow",
          "samsung galaxy s21",
          "pizza"
        ],
        [
          "4",
          "Alice",
          "cruise",
          "master",
          "green",
          "oneplus 9",
          "stew"
        ],
        [
          "5",
          "Arnold",
          "beach",
          "associate",
          "red",
          "google pixel 6",
          "grilled cheese"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Alice, Bob, Peter])\nvacations = EnumSort([mountain, city, cruise, beach, camping])\neducationLevels = EnumSort([doctorate, high_school, bachelor, associate, master])\ncolors = EnumSort([blue, red, white, yellow, green])\nphones = EnumSort([google_pixel_6, iphone_13, oneplus_9, huawei_p50, samsung_galaxy_s21])\nfoods = EnumSort([grilled_cheese, stir_fry, pizza, spaghetti, stew])\nlives = Function([people] -> [int])\nhas_vacation = Function([people] -> [vacations])\nhas_education = Function([people] -> [educationLevels])\nhas_color = Function([people] -> [colors])\nhas_phone = Function([people] -> [phones])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves the stew is not in the first house\nThere are two houses between the person who loves stir fry and the person with an associate's degree\nThe person who enjoys mountain retreats is the person with a bachelor's degree\nThe person with a doctorate is somewhere to the right of Bob\nThe person who uses a Samsung Galaxy S21 is in the third house\nEric is the person with a doctorate\nThe person with a doctorate is in the third house\nThe person who loves stir fry is the person with a bachelor's degree\nThe person with a doctorate is the person who is a pizza lover\nThe person whose favorite color is green is somewhere to the right of Peter\nThe person who enjoys camping trips is the person who uses an iPhone 13\nThe person who likes going on cruises is Alice\nThere is one house between the person with a high school diploma and the person who uses a Samsung Galaxy S21\nThe person who uses a Google Pixel 6 is Arnold\nThe person who uses a OnePlus 9 is somewhere to the right of the person who uses a Huawei P50\nArnold is the person who loves eating grilled cheese\nThe person who loves eating grilled cheese is not in the fourth house\nThere are two houses between the person with a bachelor's degree and the person whose favorite color is red\nThe person who loves beach vacations is somewhere to the right of the person who prefers city breaks\nThe person whose favorite color is green is not in the second house\nThe person who loves blue is somewhere to the right of Peter\nThere is one house between the person who enjoys camping trips and the person who loves yellow",
    "queries": "And( And(lives(Peter) == 1, has_vacation(Peter) == camping, has_education(Peter) == high_school, has_color(Peter) == white, has_phone(Peter) == iphone_13, has_food(Peter) == spaghetti), And(lives(Bob) == 2, has_vacation(Bob) == mountain, has_education(Bob) == bachelor, has_color(Bob) == blue, has_phone(Bob) == huawei_p50, has_food(Bob) == stir_fry), And(lives(Eric) == 3, has_vacation(Eric) == city, has_education(Eric) == doctorate, has_color(Eric) == yellow, has_phone(Eric) == samsung_galaxy_s21, has_food(Eric) == pizza), And(lives(Alice) == 4, has_vacation(Alice) == cruise, has_education(Alice) == master, has_color(Alice) == green, has_phone(Alice) == oneplus_9, has_food(Alice) == stew), And(lives(Arnold) == 5, has_vacation(Arnold) == beach, has_education(Arnold) == associate, has_color(Arnold) == red, has_phone(Arnold) == google_pixel_6, has_food(Arnold) == grilled_cheese) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-23",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Arnold`, `Peter`, `Eric`\n - Each person has a unique level of education: `doctorate`, `bachelor`, `associate`, `master`, `high school`\n - People use unique phone models: `oneplus 9`, `samsung galaxy s21`, `google pixel 6`, `iphone 13`, `huawei p50`\n - People have unique favorite music genres: `rock`, `classical`, `jazz`, `pop`, `hip hop`\n - The people keep unique animals: `bird`, `dog`, `horse`, `cat`, `fish`\n - Each person has a unique hobby: `painting`, `cooking`, `knitting`, `gardening`, `photography`\n\nClues:\n1. The person who loves hip-hop music is in the second house.\n2. The person who loves classical music is not in the fifth house.\n3. The person who loves classical music is the fish enthusiast.\n4. The person who uses an iPhone 13 is the person with a doctorate.\n5. The person with a master's degree is not in the second house.\n6. The person who enjoys knitting is not in the first house.\n7. The person with a high school diploma is somewhere to the left of the photography enthusiast.\n8. The person who paints as a hobby is somewhere to the right of the person who loves rock music.\n9. Arnold is the bird keeper.\n10. The person with a bachelor's degree is the person who uses a Google Pixel 6.\n11. The person with a bachelor's degree is somewhere to the right of the person who paints as a hobby.\n12. Bob is not in the fourth house.\n13. The person who loves cooking is the person who loves classical music.\n14. The person who loves cooking is the person who uses a Huawei P50.\n15. The person who keeps horses is somewhere to the right of Arnold.\n16. The person who paints as a hobby is the person who uses a OnePlus 9.\n17. The person who uses a OnePlus 9 is somewhere to the left of the person with an associate's degree.\n18. The person who uses an iPhone 13 is the dog owner.\n19. The person with a high school diploma is Alice.\n20. Peter is the person who enjoys gardening.\n21. The person who paints as a hobby is the person who loves jazz music.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "PhoneModel",
        "MusicGenre",
        "Animal",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "doctorate",
          "iphone 13",
          "rock",
          "dog",
          "gardening"
        ],
        [
          "2",
          "Alice",
          "high school",
          "samsung galaxy s21",
          "hip hop",
          "cat",
          "knitting"
        ],
        [
          "3",
          "Arnold",
          "master",
          "oneplus 9",
          "jazz",
          "bird",
          "painting"
        ],
        [
          "4",
          "Eric",
          "associate",
          "huawei p50",
          "classical",
          "fish",
          "cooking"
        ],
        [
          "5",
          "Bob",
          "bachelor",
          "google pixel 6",
          "pop",
          "horse",
          "photography"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Arnold, Peter, Eric])\neducationLevels = EnumSort([doctorate, bachelor, associate, master, high_school])\nphoneModels = EnumSort([oneplus_9, samsung_galaxy_s21, google_pixel_6, iphone_13, huawei_p50])\nmusicGenres = EnumSort([rock, classical, jazz, pop, hip_hop])\nanimals = EnumSort([bird, dog, horse, cat, fish])\nhobbies = EnumSort([painting, cooking, knitting, gardening, photography])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nuses_phone = Function([people] -> [phoneModels])\nlikes_music = Function([people] -> [musicGenres])\nhas_animal = Function([people] -> [animals])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves hip-hop music is in the second house\nThe person who loves classical music is not in the fifth house\nThe person who loves classical music is the fish enthusiast\nThe person who uses an iPhone 13 is the person with a doctorate\nThe person with a master's degree is not in the second house\nThe person who enjoys knitting is not in the first house\nThe person with a high school diploma is somewhere to the left of the photography enthusiast\nThe person who paints as a hobby is somewhere to the right of the person who loves rock music\nArnold is the bird keeper\nThe person with a bachelor's degree is the person who uses a Google Pixel 6\nThe person with a bachelor's degree is somewhere to the right of the person who paints as a hobby\nBob is not in the fourth house\nThe person who loves cooking is the person who loves classical music\nThe person who loves cooking is the person who uses a Huawei P50\nThe person who keeps horses is somewhere to the right of Arnold\nThe person who paints as a hobby is the person who uses a OnePlus 9\nThe person who uses a OnePlus 9 is somewhere to the left of the person with an associate's degree\nThe person who uses an iPhone 13 is the dog owner\nThe person with a high school diploma is Alice\nPeter is the person who enjoys gardening\nThe person who paints as a hobby is the person who loves jazz music",
    "queries": "And( And(lives(Peter) == 1, has_education(Peter) == doctorate, uses_phone(Peter) == iphone_13, likes_music(Peter) == rock, has_animal(Peter) == dog, has_hobby(Peter) == gardening), And(lives(Alice) == 2, has_education(Alice) == high_school, uses_phone(Alice) == samsung_galaxy_s21, likes_music(Alice) == hip_hop, has_animal(Alice) == cat, has_hobby(Alice) == knitting), And(lives(Arnold) == 3, has_education(Arnold) == master, uses_phone(Arnold) == oneplus_9, likes_music(Arnold) == jazz, has_animal(Arnold) == bird, has_hobby(Arnold) == painting), And(lives(Eric) == 4, has_education(Eric) == associate, uses_phone(Eric) == huawei_p50, likes_music(Eric) == classical, has_animal(Eric) == fish, has_hobby(Eric) == cooking), And(lives(Bob) == 5, has_education(Bob) == bachelor, uses_phone(Bob) == google_pixel_6, likes_music(Bob) == pop, has_animal(Bob) == horse, has_hobby(Bob) == photography) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-33",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Peter`\n - The people keep unique animals: `cat`, `fish`, `horse`, `bird`\n - Each person has a favorite color: `yellow`, `green`, `white`, `red`\n - Each person prefers a unique type of vacation: `cruise`, `city`, `beach`, `mountain`\n - Everyone has something unique for lunch: `pizza`, `spaghetti`, `stew`, `grilled cheese`\n - People have unique favorite sports: `soccer`, `swimming`, `basketball`, `tennis`\n\nClues:\n1. The person whose favorite color is red is the person who loves the spaghetti eater.\n2. The person who loves the stew is the cat lover.\n3. The person who loves yellow is not in the fourth house.\n4. Alice is somewhere to the right of Arnold.\n5. The person who loves the spaghetti eater is somewhere to the right of the person who loves soccer.\n6. The person who loves white is the person who loves tennis.\n7. The fish enthusiast is in the second house.\n8. Arnold is the person who loves the stew.\n9. The person who prefers city breaks is the person who is a pizza lover.\n10. The person who prefers city breaks is directly left of the person who likes going on cruises.\n11. The person who loves swimming is the person who loves beach vacations.\n12. The person who keeps horses and the person whose favorite color is red are next to each other.\n13. The person whose favorite color is green is directly left of Eric.\n14. The person who prefers city breaks is somewhere to the left of the cat lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Color",
        "Vacation",
        "Food",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "horse",
          "green",
          "city",
          "pizza",
          "soccer"
        ],
        [
          "2",
          "Eric",
          "fish",
          "red",
          "cruise",
          "spaghetti",
          "basketball"
        ],
        [
          "3",
          "Arnold",
          "cat",
          "yellow",
          "beach",
          "stew",
          "swimming"
        ],
        [
          "4",
          "Alice",
          "bird",
          "white",
          "mountain",
          "grilled cheese",
          "tennis"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Peter])\nanimals = EnumSort([cat, fish, horse, bird])\ncolors = EnumSort([yellow, green, white, red])\nvacations = EnumSort([cruise, city, beach, mountain])\nfoods = EnumSort([pizza, spaghetti, stew, grilled_cheese])\nsports = EnumSort([soccer, swimming, basketball, tennis])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_color = Function([people] -> [colors])\nhas_vacation = Function([people] -> [vacations])\nhas_food = Function([people] -> [foods])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person whose favorite color is red is the person who loves the spaghetti eater\nThe person who loves the stew is the cat lover\nThe person who loves yellow is not in the fourth house\nAlice is somewhere to the right of Arnold\nThe person who loves the spaghetti eater is somewhere to the right of the person who loves soccer\nThe person who loves white is the person who loves tennis\nThe fish enthusiast is in the second house\nArnold is the person who loves the stew\nThe person who prefers city breaks is the person who is a pizza lover\nThe person who prefers city breaks is directly left of the person who likes going on cruises\nThe person who loves swimming is the person who loves beach vacations\nThe person who keeps horses and the person whose favorite color is red are next to each other\nThe person whose favorite color is green is directly left of Eric\nThe person who prefers city breaks is somewhere to the left of the cat lover",
    "queries": "And( And( lives(Peter) == 1, has_animal(Peter) == horse, has_color(Peter) == green, has_vacation(Peter) == city, has_food(Peter) == pizza, has_sport(Peter) == soccer ), And( lives(Eric) == 2, has_animal(Eric) == fish, has_color(Eric) == red, has_vacation(Eric) == cruise, has_food(Eric) == spaghetti, has_sport(Eric) == basketball ), And( lives(Arnold) == 3, has_animal(Arnold) == cat, has_color(Arnold) == yellow, has_vacation(Arnold) == beach, has_food(Arnold) == stew, has_sport(Arnold) == swimming ), And( lives(Alice) == 4, has_animal(Alice) == bird, has_color(Alice) == white, has_vacation(Alice) == mountain, has_food(Alice) == grilled_cheese, has_sport(Alice) == tennis ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-9",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Alice`\n - They all have a unique favorite flower: `daffodils`, `carnations`, `roses`, `lilies`\n - People have unique heights: `very short`, `short`, `tall`, `average`\n - The mothers' names in different houses are unique: `Janelle`, `Kailyn`, `Holly`, `Aniya`\n - Each person has an occupation: `engineer`, `doctor`, `teacher`, `artist`\n - People have unique favorite sports: `swimming`, `basketball`, `tennis`, `soccer`\n\nClues:\n1. The person who loves swimming is the person who loves the rose bouquet.\n2. The person who loves the rose bouquet is Eric.\n3. Arnold is the person who is tall.\n4. The person who loves a bouquet of daffodils is somewhere to the right of the person who is an engineer.\n5. The person who loves soccer is the person who is short.\n6. The person who is a teacher is in the first house.\n7. The person whose mother's name is Janelle is the person who loves a carnations arrangement.\n8. The person who loves basketball is the person who has an average height.\n9. Arnold is not in the third house.\n10. The person whose mother's name is Holly is somewhere to the right of the person who has an average height.\n11. Peter is the person who is a doctor.\n12. The person whose mother's name is Aniya is Alice.\n13. Arnold is the person who loves the boquet of lilies.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Height",
        "Mother",
        "Occupation",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "lilies",
          "tall",
          "Kailyn",
          "teacher",
          "tennis"
        ],
        [
          "2",
          "Peter",
          "carnations",
          "average",
          "Janelle",
          "doctor",
          "basketball"
        ],
        [
          "3",
          "Eric",
          "roses",
          "very short",
          "Holly",
          "engineer",
          "swimming"
        ],
        [
          "4",
          "Alice",
          "daffodils",
          "short",
          "Aniya",
          "artist",
          "soccer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Alice])\nflowers = EnumSort([daffodils, carnations, roses, lilies])\nheights = EnumSort([very_short, short, tall, average])\nmothers = EnumSort([Janelle, Kailyn, Holly, Aniya])\noccupations = EnumSort([engineer, doctor, teacher, artist])\nsports = EnumSort([swimming, basketball, tennis, soccer])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_height = Function([people] -> [heights])\nhas_mother = Function([people] -> [mothers])\nhas_occupation = Function([people] -> [occupations])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who loves swimming is the person who loves the rose bouquet\nThe person who loves the rose bouquet is Eric\nArnold is the person who is tall\nThe person who loves a bouquet of daffodils is somewhere to the right of the person who is an engineer\nThe person who loves soccer is the person who is short\nThe person who is a teacher is in the first house\nThe person whose mother's name is Janelle is the person who loves a carnations arrangement\nThe person who loves basketball is the person who has an average height\nArnold is not in the third house\nThe person whose mother's name is Holly is somewhere to the right of the person who has an average height\nPeter is the person who is a doctor\nThe person whose mother's name is Aniya is Alice\nArnold is the person who loves the boquet of lilies",
    "queries": "And( And(lives(Arnold) == 1, has_flower(Arnold) == lilies, has_height(Arnold) == tall, has_mother(Arnold) == Kailyn, has_occupation(Arnold) == teacher, has_sport(Arnold) == tennis), And(lives(Peter) == 2, has_flower(Peter) == carnations, has_height(Peter) == average, has_mother(Peter) == Janelle, has_occupation(Peter) == doctor, has_sport(Peter) == basketball), And(lives(Eric) == 3, has_flower(Eric) == roses, has_height(Eric) == very_short, has_mother(Eric) == Holly, has_occupation(Eric) == engineer, has_sport(Eric) == swimming), And(lives(Alice) == 4, has_flower(Alice) == daffodils, has_height(Alice) == short, has_mother(Alice) == Aniya, has_occupation(Alice) == artist, has_sport(Alice) == soccer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-17",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Bob`, `Alice`, `Carol`, `Peter`\n - The people are of nationalities: `german`, `brit`, `dane`, `chinese`, `swede`, `norwegian`\n - People have unique favorite music genres: `pop`, `jazz`, `hip hop`, `classical`, `country`, `rock`\n - Each person has a unique level of education: `doctorate`, `associate`, `master`, `bachelor`, `high school`, `trade school`\n\nClues:\n1. The Chinese is the person who loves pop music.\n2. The person with a bachelor's degree is directly left of Arnold.\n3. The person with a master's degree is in the first house.\n4. Carol is somewhere to the left of Peter.\n5. The Dane is the person with a doctorate.\n6. The person who loves classical music is the person with a master's degree.\n7. The person with a bachelor's degree is in the fifth house.\n8. Eric is somewhere to the right of Bob.\n9. Carol is the British person.\n10. The person with a doctorate is somewhere to the right of the Norwegian.\n11. The person with a doctorate is the person who loves rock music.\n12. The Norwegian is somewhere to the right of the German.\n13. The person who attended trade school is somewhere to the left of the person with a high school diploma.\n14. The person who attended trade school and the Chinese are next to each other.\n15. The person who loves jazz music is Arnold.\n16. The person who loves hip-hop music is directly left of Alice.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "MusicGenre",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "german",
          "classical",
          "master"
        ],
        [
          "2",
          "Eric",
          "norwegian",
          "hip hop",
          "associate"
        ],
        [
          "3",
          "Alice",
          "dane",
          "rock",
          "doctorate"
        ],
        [
          "4",
          "Carol",
          "brit",
          "country",
          "trade school"
        ],
        [
          "5",
          "Peter",
          "chinese",
          "pop",
          "bachelor"
        ],
        [
          "6",
          "Arnold",
          "swede",
          "jazz",
          "high school"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Bob, Alice, Carol, Peter])\nnationalities = EnumSort([german, brit, dane, chinese, swede, norwegian])\nmusicGenres = EnumSort([pop, jazz, hip_hop, classical, country, rock])\neducationLevels = EnumSort([doctorate, associate, master, bachelor, high_school, trade_school])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_education = Function([people] -> [educationLevels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The Chinese is the person who loves pop music\nThe person with a bachelor's degree is directly left of Arnold\nThe person with a master's degree is in the first house\nCarol is somewhere to the left of Peter\nThe Dane is the person with a doctorate\nThe person who loves classical music is the person with a master's degree\nThe person with a bachelor's degree is in the fifth house\nEric is somewhere to the right of Bob\nCarol is the British person\nThe person with a doctorate is somewhere to the right of the Norwegian\nThe person with a doctorate is the person who loves rock music\nThe Norwegian is somewhere to the right of the German\nThe person who attended trade school is somewhere to the left of the person with a high school diploma\nThe person who attended trade school and the Chinese are next to each other\nThe person who loves jazz music is Arnold\nThe person who loves hip-hop music is directly left of Alice",
    "queries": "And( And(lives(Bob) == 1, has_nationality(Bob) == german, has_musicGenre(Bob) == classical, has_education(Bob) == master), And(lives(Eric) == 2, has_nationality(Eric) == norwegian, has_musicGenre(Eric) == hip_hop, has_education(Eric) == associate), And(lives(Alice) == 3, has_nationality(Alice) == dane, has_musicGenre(Alice) == rock, has_education(Alice) == doctorate), And(lives(Carol) == 4, has_nationality(Carol) == brit, has_musicGenre(Carol) == country, has_education(Carol) == trade_school), And(lives(Peter) == 5, has_nationality(Peter) == chinese, has_musicGenre(Peter) == pop, has_education(Peter) == bachelor), And(lives(Arnold) == 6, has_nationality(Arnold) == swede, has_musicGenre(Arnold) == jazz, has_education(Arnold) == high_school) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-28",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Arnold`, `Bob`, `Eric`, `Carol`\n - Everyone has something unique for lunch: `stir fry`, `grilled cheese`, `spaghetti`, `pizza`, `soup`, `stew`\n - People use unique phone models: `xiaomi mi 11`, `iphone 13`, `oneplus 9`, `google pixel 6`, `samsung galaxy s21`, `huawei p50`\n - People have unique favorite music genres: `pop`, `country`, `classical`, `jazz`, `rock`, `hip hop`\n - Each person has a unique favorite drink: `water`, `boba tea`, `milk`, `root beer`, `tea`, `coffee`\n - Each person has an occupation: `nurse`, `lawyer`, `artist`, `doctor`, `teacher`, `engineer`\n\nClues:\n1. The tea drinker is somewhere to the right of the person who is a teacher.\n2. Eric is the person who uses a Google Pixel 6.\n3. The person who loves the spaghetti eater and the person who loves hip-hop music are next to each other.\n4. The boba tea drinker is somewhere to the left of the person who uses a Google Pixel 6.\n5. The person who uses a Huawei P50 is somewhere to the left of the person who uses a OnePlus 9.\n6. The person who is a pizza lover is the person who loves rock music.\n7. The person who is a pizza lover is somewhere to the right of the person who loves the soup.\n8. The person who likes milk is somewhere to the left of the person who loves hip-hop music.\n9. The person who uses a OnePlus 9 is Arnold.\n10. The person who is a lawyer is the person who loves stir fry.\n11. The person who is an artist is Alice.\n12. Bob is the person who loves classical music.\n13. The person who loves rock music is directly left of the person who loves classical music.\n14. The person who is a doctor is the person who uses a Huawei P50.\n15. Bob is the root beer lover.\n16. There are two houses between the person who is an engineer and the person who uses a OnePlus 9.\n17. Eric is the person who loves jazz music.\n18. The person who uses a Xiaomi Mi 11 is the person who is an artist.\n19. Carol is directly left of the person who uses a Huawei P50.\n20. The person who is a lawyer is the coffee drinker.\n21. The person who loves eating grilled cheese is the person who loves pop music.\n22. The person who loves hip-hop music is the person who uses a Samsung Galaxy S21.\n23. The coffee drinker is somewhere to the left of the person who likes milk.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "PhoneModel",
        "MusicGenre",
        "Drink",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "soup",
          "xiaomi mi 11",
          "country",
          "boba tea",
          "artist"
        ],
        [
          "2",
          "Eric",
          "stir fry",
          "google pixel 6",
          "jazz",
          "coffee",
          "lawyer"
        ],
        [
          "3",
          "Carol",
          "pizza",
          "iphone 13",
          "rock",
          "milk",
          "engineer"
        ],
        [
          "4",
          "Bob",
          "spaghetti",
          "huawei p50",
          "classical",
          "root beer",
          "doctor"
        ],
        [
          "5",
          "Peter",
          "stew",
          "samsung galaxy s21",
          "hip hop",
          "water",
          "teacher"
        ],
        [
          "6",
          "Arnold",
          "grilled cheese",
          "oneplus 9",
          "pop",
          "tea",
          "nurse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Arnold, Bob, Eric, Carol])\nfoods = EnumSort([stir_fry, grilled_cheese, spaghetti, pizza, soup, stew])\nphones = EnumSort([xiaomi_mi_11, iphone_13, oneplus_9, google_pixel_6, samsung_galaxy_s21, huawei_p50])\nmusicGenres = EnumSort([pop, country, classical, jazz, rock, hip_hop])\ndrinks = EnumSort([water, boba_tea, milk, root_beer, tea, coffee])\noccupations = EnumSort([nurse, lawyer, artist, doctor, teacher, engineer])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nuses_phone = Function([people] -> [phones])\nlikes_music = Function([people] -> [musicGenres])\nlikes_drink = Function([people] -> [drinks])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The tea drinker is somewhere to the right of the person who is a teacher\nEric is the person who uses a Google Pixel 6\nThe person who loves the spaghetti eater and the person who loves hip-hop music are next to each other\nThe boba tea drinker is somewhere to the left of the person who uses a Google Pixel 6\nThe person who uses a Huawei P50 is somewhere to the left of the person who uses a OnePlus 9\nThe person who is a pizza lover is the person who loves rock music\nThe person who is a pizza lover is somewhere to the right of the person who loves the soup\nThe person who likes milk is somewhere to the left of the person who loves hip-hop music\nThe person who uses a OnePlus 9 is Arnold\nThe person who is a lawyer is the person who loves stir fry\nThe person who is an artist is Alice\nBob is the person who loves classical music\nThe person who loves rock music is directly left of the person who loves classical music\nThe person who is a doctor is the person who uses a Huawei P50\nBob is the root beer lover\nThere are two houses between the person who is an engineer and the person who uses a OnePlus 9\nEric is the person who loves jazz music\nThe person who uses a Xiaomi Mi 11 is the person who is an artist\nCarol is directly left of the person who uses a Huawei P50\nThe person who is a lawyer is the coffee drinker\nThe person who loves eating grilled cheese is the person who loves pop music\nThe person who loves hip-hop music is the person who uses a Samsung Galaxy S21\nThe coffee drinker is somewhere to the left of the person who likes milk",
    "queries": "And( And(lives(Alice) == 1, has_food(Alice) == soup, uses_phone(Alice) == xiaomi_mi_11, likes_music(Alice) == country, likes_drink(Alice) == boba_tea, has_occupation(Alice) == artist), And(lives(Eric) == 2, has_food(Eric) == stir_fry, uses_phone(Eric) == google_pixel_6, likes_music(Eric) == jazz, likes_drink(Eric) == coffee, has_occupation(Eric) == lawyer), And(lives(Carol) == 3, has_food(Carol) == pizza, uses_phone(Carol) == iphone_13, likes_music(Carol) == rock, likes_drink(Carol) == milk, has_occupation(Carol) == engineer), And(lives(Bob) == 4, has_food(Bob) == spaghetti, uses_phone(Bob) == huawei_p50, likes_music(Bob) == classical, likes_drink(Bob) == root_beer, has_occupation(Bob) == doctor), And(lives(Peter) == 5, has_food(Peter) == stew, uses_phone(Peter) == samsung_galaxy_s21, likes_music(Peter) == hip_hop, likes_drink(Peter) == water, has_occupation(Peter) == teacher), And(lives(Arnold) == 6, has_food(Arnold) == grilled_cheese, uses_phone(Arnold) == oneplus_9, likes_music(Arnold) == pop, likes_drink(Arnold) == tea, has_occupation(Arnold) == nurse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-6",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Arnold`, `Bob`, `Eric`, `Carol`\n - Each person has a unique hobby: `cooking`, `gardening`, `painting`, `knitting`, `photography`, `woodworking`\n - Each person has a unique birthday month: `april`, `sept`, `mar`, `jan`, `feb`, `may`\n - Everyone has a unique favorite cigar: `blends`, `prince`, `pall mall`, `dunhill`, `yellow monster`, `blue master`\n\nClues:\n1. The person whose birthday is in April is Eric.\n2. Arnold is in the first house.\n3. The person whose birthday is in January is the person who smokes many unique blends.\n4. The Dunhill smoker is Alice.\n5. Bob is the person whose birthday is in May.\n6. The person whose birthday is in September and the photography enthusiast are next to each other.\n7. Bob is the person who smokes Blue Master.\n8. The person who loves cooking is the person whose birthday is in May.\n9. The woodworking hobbyist and the person whose birthday is in March are next to each other.\n10. The person who enjoys knitting is directly left of the person who smokes Yellow Monster.\n11. Peter and the person who paints as a hobby are next to each other.\n12. The person whose birthday is in March is somewhere to the left of the Prince smoker.\n13. The person whose birthday is in February is somewhere to the left of the person who smokes many unique blends.\n14. The person whose birthday is in March is somewhere to the right of the person whose birthday is in September.\n15. The person who smokes many unique blends is directly left of the person whose birthday is in May.\n16. The photography enthusiast and Peter are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "Birthday",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "woodworking",
          "sept",
          "pall mall"
        ],
        [
          "2",
          "Alice",
          "photography",
          "mar",
          "dunhill"
        ],
        [
          "3",
          "Peter",
          "knitting",
          "feb",
          "prince"
        ],
        [
          "4",
          "Eric",
          "painting",
          "april",
          "yellow monster"
        ],
        [
          "5",
          "Carol",
          "gardening",
          "jan",
          "blends"
        ],
        [
          "6",
          "Bob",
          "cooking",
          "may",
          "blue master"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Arnold, Bob, Eric, Carol])\nhobbies = EnumSort([cooking, gardening, painting, knitting, photography, woodworking])\nmonths = EnumSort([april, sept, mar, jan, feb, may])\ncigars = EnumSort([blends, prince, pall_mall, dunhill, yellow_monster, blue_master])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_birthday = Function([people] -> [months])\nsmokes = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in April is Eric\nArnold is in the first house\nThe person whose birthday is in January is the person who smokes many unique blends\nThe Dunhill smoker is Alice\nBob is the person whose birthday is in May\nThe person whose birthday is in September and the photography enthusiast are next to each other\nBob is the person who smokes Blue Master\nThe person who loves cooking is the person whose birthday is in May\nThe woodworking hobbyist and the person whose birthday is in March are next to each other\nThe person who enjoys knitting is directly left of the person who smokes Yellow Monster\nPeter and the person who paints as a hobby are next to each other\nThe person whose birthday is in March is somewhere to the left of the Prince smoker\nThe person whose birthday is in February is somewhere to the left of the person who smokes many unique blends\nThe person whose birthday is in March is somewhere to the right of the person whose birthday is in September\nThe person who smokes many unique blends is directly left of the person whose birthday is in May\nThe photography enthusiast and Peter are next to each other",
    "queries": "And( And(lives(Arnold) == 1, has_hobby(Arnold) == woodworking, has_birthday(Arnold) == sept, smokes(Arnold) == pall_mall), And(lives(Alice) == 2, has_hobby(Alice) == photography, has_birthday(Alice) == mar, smokes(Alice) == dunhill), And(lives(Peter) == 3, has_hobby(Peter) == knitting, has_birthday(Peter) == feb, smokes(Peter) == prince), And(lives(Eric) == 4, has_hobby(Eric) == painting, has_birthday(Eric) == april, smokes(Eric) == yellow_monster), And(lives(Carol) == 5, has_hobby(Carol) == gardening, has_birthday(Carol) == jan, smokes(Carol) == blends), And(lives(Bob) == 6, has_hobby(Bob) == cooking, has_birthday(Bob) == may, smokes(Bob) == blue_master) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-5",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Arnold`, `Eric`, `Alice`\n - Each person has a favorite color: `red`, `white`, `green`, `blue`, `yellow`\n - Each person has a unique hobby: `gardening`, `cooking`, `painting`, `photography`, `knitting`\n - People have unique heights: `very tall`, `tall`, `average`, `short`, `very short`\n - People have unique hair colors: `black`, `blonde`, `brown`, `gray`, `red`\n\nClues:\n1. The person whose favorite color is green is somewhere to the right of the person who has black hair.\n2. The person who has an average height is somewhere to the right of the person who loves blue.\n3. The person who has red hair is Alice.\n4. The person who loves cooking is not in the first house.\n5. The person who loves yellow is the person who has gray hair.\n6. The person who is short is somewhere to the left of the person who loves yellow.\n7. The person who enjoys gardening is the person who loves white.\n8. Arnold is somewhere to the left of the person who has black hair.\n9. The person who is short is somewhere to the right of the person who has blonde hair.\n10. Eric and the person who loves cooking are next to each other.\n11. The person who has black hair is directly left of the person who loves blue.\n12. The person who is very short is the person who has black hair.\n13. Bob is the person who loves blue.\n14. The person who is tall is directly left of the photography enthusiast.\n15. The person who loves white is not in the first house.\n16. The person who loves yellow is the person who enjoys knitting.\n17. The person who loves blue is the person who has blonde hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Hobby",
        "Height",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "red",
          "painting",
          "very tall",
          "brown"
        ],
        [
          "2",
          "Eric",
          "white",
          "gardening",
          "very short",
          "black"
        ],
        [
          "3",
          "Bob",
          "blue",
          "cooking",
          "tall",
          "blonde"
        ],
        [
          "4",
          "Alice",
          "green",
          "photography",
          "short",
          "red"
        ],
        [
          "5",
          "Peter",
          "yellow",
          "knitting",
          "average",
          "gray"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Arnold, Eric, Alice])\ncolors = EnumSort([red, white, green, blue, yellow])\nhobbies = EnumSort([gardening, cooking, painting, photography, knitting])\nheights = EnumSort([very_tall, tall, average, short, very_short])\nhair_colors = EnumSort([black, blonde, brown, gray, red])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_hobby = Function([people] -> [hobbies])\nhas_height = Function([people] -> [heights])\nhas_hair_color = Function([people] -> [hair_colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose favorite color is green is somewhere to the right of the person who has black hair\nThe person who has an average height is somewhere to the right of the person who loves blue\nThe person who has red hair is Alice\nThe person who loves cooking is not in the first house\nThe person who loves yellow is the person who has gray hair\nThe person who is short is somewhere to the left of the person who loves yellow\nThe person who enjoys gardening is the person who loves white\nArnold is somewhere to the left of the person who has black hair\nThe person who is short is somewhere to the right of the person who has blonde hair\nEric and the person who loves cooking are next to each other\nThe person who has black hair is directly left of the person who loves blue\nThe person who is very short is the person who has black hair\nBob is the person who loves blue\nThe person who is tall is directly left of the photography enthusiast\nThe person who loves white is not in the first house\nThe person who loves yellow is the person who enjoys knitting\nThe person who loves blue is the person who has blonde hair",
    "queries": "And( And(lives(Arnold) == 1, has_color(Arnold) == red, has_hobby(Arnold) == painting, has_height(Arnold) == very_tall, has_hair_color(Arnold) == brown), And(lives(Eric) == 2, has_color(Eric) == white, has_hobby(Eric) == gardening, has_height(Eric) == very_short, has_hair_color(Eric) == black), And(lives(Bob) == 3, has_color(Bob) == blue, has_hobby(Bob) == cooking, has_height(Bob) == tall, has_hair_color(Bob) == blonde), And(lives(Alice) == 4, has_color(Alice) == green, has_hobby(Alice) == photography, has_height(Alice) == short, has_hair_color(Alice) == red), And(lives(Peter) == 5, has_color(Peter) == yellow, has_hobby(Peter) == knitting, has_height(Peter) == average, has_hair_color(Peter) == gray) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-31",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Peter`, `Bob`\n - People use unique phone models: `samsung galaxy s21`, `huawei p50`, `oneplus 9`, `iphone 13`, `google pixel 6`\n - Everyone has a favorite smoothie: `desert`, `dragonfruit`, `watermelon`, `cherry`, `lime`\n - The mothers' names in different houses are unique: `Janelle`, `Holly`, `Penny`, `Aniya`, `Kailyn`\n - Each person has an occupation: `doctor`, `lawyer`, `engineer`, `teacher`, `artist`\n\nClues:\n1. The person whose mother's name is Kailyn is Peter.\n2. The Dragonfruit smoothie lover is not in the fourth house.\n3. The person who uses an iPhone 13 is the person who is an artist.\n4. The person whose mother's name is Aniya is Arnold.\n5. The person whose mother's name is Aniya is the Desert smoothie lover.\n6. The person whose mother's name is Aniya is in the second house.\n7. The person who drinks Lime smoothies is in the first house.\n8. The person who uses a Huawei P50 is the person who is a doctor.\n9. Eric is the person who drinks Lime smoothies.\n10. There is one house between the person who is a teacher and Bob.\n11. The person whose mother's name is Aniya is the person who is a lawyer.\n12. The person who uses an iPhone 13 is the person who likes Cherry smoothies.\n13. Arnold is the person who uses a OnePlus 9.\n14. The person who is a doctor is The person whose mother's name is Penny.\n15. Peter is the person who uses a Samsung Galaxy S21.\n16. Bob is not in the third house.\n17. The person whose mother's name is Holly is directly left of Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Smoothie",
        "Mother",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "huawei p50",
          "lime",
          "Penny",
          "doctor"
        ],
        [
          "2",
          "Arnold",
          "oneplus 9",
          "desert",
          "Aniya",
          "lawyer"
        ],
        [
          "3",
          "Alice",
          "google pixel 6",
          "dragonfruit",
          "Holly",
          "teacher"
        ],
        [
          "4",
          "Peter",
          "samsung galaxy s21",
          "watermelon",
          "Kailyn",
          "engineer"
        ],
        [
          "5",
          "Bob",
          "iphone 13",
          "cherry",
          "Janelle",
          "artist"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Peter, Bob])\nphoneModels = EnumSort([samsung_galaxy_s21, huawei_p50, oneplus_9, iphone_13, google_pixel_6])\nsmoothies = EnumSort([desert, dragonfruit, watermelon, cherry, lime])\nmothers = EnumSort([Janelle, Holly, Penny, Aniya, Kailyn])\noccupations = EnumSort([doctor, lawyer, engineer, teacher, artist])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nlikes_smoothie = Function([people] -> [smoothies])\nhas_mother = Function([people] -> [mothers])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose mother's name is Kailyn is Peter\nThe Dragonfruit smoothie lover is not in the fourth house\nThe person who uses an iPhone 13 is the person who is an artist\nThe person whose mother's name is Aniya is Arnold\nThe person whose mother's name is Aniya is the Desert smoothie lover\nThe person whose mother's name is Aniya is in the second house\nThe person who drinks Lime smoothies is in the first house\nThe person who uses a Huawei P50 is the person who is a doctor\nEric is the person who drinks Lime smoothies\nThere is one house between the person who is a teacher and Bob\nThe person whose mother's name is Aniya is the person who is a lawyer\nThe person who uses an iPhone 13 is the person who likes Cherry smoothies\nArnold is the person who uses a OnePlus 9\nThe person who is a doctor is The person whose mother's name is Penny\nPeter is the person who uses a Samsung Galaxy S21\nBob is not in the third house\nThe person whose mother's name is Holly is directly left of Peter",
    "queries": "And( And(lives(Eric) == 1, uses_phone(Eric) == huawei_p50, likes_smoothie(Eric) == lime, has_mother(Eric) == Penny, has_occupation(Eric) == doctor), And(lives(Arnold) == 2, uses_phone(Arnold) == oneplus_9, likes_smoothie(Arnold) == desert, has_mother(Arnold) == Aniya, has_occupation(Arnold) == lawyer), And(lives(Alice) == 3, uses_phone(Alice) == google_pixel_6, likes_smoothie(Alice) == dragonfruit, has_mother(Alice) == Holly, has_occupation(Alice) == teacher), And(lives(Peter) == 4, uses_phone(Peter) == samsung_galaxy_s21, likes_smoothie(Peter) == watermelon, has_mother(Peter) == Kailyn, has_occupation(Peter) == engineer), And(lives(Bob) == 5, uses_phone(Bob) == iphone_13, likes_smoothie(Bob) == cherry, has_mother(Bob) == Janelle, has_occupation(Bob) == artist) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-20",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Eric`, `Bob`, `Arnold`, `Carol`\n - Everyone has a unique favorite cigar: `pall mall`, `yellow monster`, `dunhill`, `blue master`, `prince`, `blends`\n - People have unique favorite music genres: `hip hop`, `jazz`, `country`, `pop`, `classical`, `rock`\n - Each person has a unique favorite drink: `water`, `milk`, `boba tea`, `tea`, `root beer`, `coffee`\n - The mothers' names in different houses are unique: `Kailyn`, `Penny`, `Janelle`, `Holly`, `Sarah`, `Aniya`\n - Everyone has something unique for lunch: `soup`, `pizza`, `spaghetti`, `stir fry`, `stew`, `grilled cheese`\n\nClues:\n1. Carol is directly left of the person who loves eating grilled cheese.\n2. Eric is not in the second house.\n3. The person whose mother's name is Holly is somewhere to the right of Carol.\n4. The person who loves eating grilled cheese is somewhere to the right of the person who loves rock music.\n5. Eric is directly left of Carol.\n6. The person who loves pop music is not in the third house.\n7. Eric is the person who loves country music.\n8. The person who loves classical music is in the sixth house.\n9. The coffee drinker is Bob.\n10. The person who smokes many unique blends is Peter.\n11. The person who loves the stew is not in the fifth house.\n12. The root beer lover is directly left of The person whose mother's name is Janelle.\n13. There are two houses between The person whose mother's name is Sarah and the person who smokes Yellow Monster.\n14. Eric is the tea drinker.\n15. The person partial to Pall Mall is somewhere to the right of the person who loves stir fry.\n16. The person who loves the soup is Bob.\n17. The person who loves hip-hop music is directly left of The person whose mother's name is Kailyn.\n18. Arnold is somewhere to the right of The person whose mother's name is Kailyn.\n19. The one who only drinks water is directly left of the person who smokes Blue Master.\n20. The person who loves the spaghetti eater is somewhere to the left of the person who smokes many unique blends.\n21. The person whose mother's name is Sarah is directly left of the person who loves jazz music.\n22. The person who loves hip-hop music is directly left of the root beer lover.\n23. The one who only drinks water is the person who loves the stew.\n24. The Dunhill smoker is not in the second house.\n25. The person who likes milk is The person whose mother's name is Janelle.\n26. Eric is The person whose mother's name is Aniya.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "MusicGenre",
        "Drink",
        "Mother",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "dunhill",
          "country",
          "tea",
          "Aniya",
          "spaghetti"
        ],
        [
          "2",
          "Carol",
          "prince",
          "rock",
          "water",
          "Penny",
          "stew"
        ],
        [
          "3",
          "Alice",
          "blue master",
          "hip hop",
          "boba tea",
          "Sarah",
          "grilled cheese"
        ],
        [
          "4",
          "Peter",
          "blends",
          "jazz",
          "root beer",
          "Kailyn",
          "stir fry"
        ],
        [
          "5",
          "Arnold",
          "pall mall",
          "pop",
          "milk",
          "Janelle",
          "pizza"
        ],
        [
          "6",
          "Bob",
          "yellow monster",
          "classical",
          "coffee",
          "Holly",
          "soup"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Eric, Bob, Arnold, Carol])\ncigars = EnumSort([pall_mall, yellow_monster, dunhill, blue_master, prince, blends])\nmusicGenres = EnumSort([hip_hop, jazz, country, pop, classical, rock])\ndrinks = EnumSort([water, milk, boba_tea, tea, root_beer, coffee])\nmothers = EnumSort([Kailyn, Penny, Janelle, Holly, Sarah, Aniya])\nfoods = EnumSort([soup, pizza, spaghetti, stir_fry, stew, grilled_cheese])\nlives = Function([people] -> [int])\nhas_cigar = Function([people] -> [cigars])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_drink = Function([people] -> [drinks])\nhas_mother = Function([people] -> [mothers])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Carol is directly left of the person who loves eating grilled cheese\nEric is not in the second house\nThe person whose mother's name is Holly is somewhere to the right of Carol\nThe person who loves eating grilled cheese is somewhere to the right of the person who loves rock music\nEric is directly left of Carol\nThe person who loves pop music is not in the third house\nEric is the person who loves country music\nThe person who loves classical music is in the sixth house\nThe coffee drinker is Bob\nThe person who smokes many unique blends is Peter\nThe person who loves the stew is not in the fifth house\nThe root beer lover is directly left of The person whose mother's name is Janelle\nThere are two houses between The person whose mother's name is Sarah and the person who smokes Yellow Monster\nEric is the tea drinker\nThe person partial to Pall Mall is somewhere to the right of the person who loves stir fry\nThe person who loves the soup is Bob\nThe person who loves hip-hop music is directly left of The person whose mother's name is Kailyn\nArnold is somewhere to the right of The person whose mother's name is Kailyn\nThe one who only drinks water is directly left of the person who smokes Blue Master\nThe person who loves the spaghetti eater is somewhere to the left of the person who smokes many unique blends\nThe person whose mother's name is Sarah is directly left of the person who loves jazz music\nThe person who loves hip-hop music is directly left of the root beer lover\nThe one who only drinks water is the person who loves the stew\nThe Dunhill smoker is not in the second house\nThe person who likes milk is The person whose mother's name is Janelle\nEric is The person whose mother's name is Aniya",
    "queries": "And( And(lives(Eric) == 1, has_cigar(Eric) == dunhill, has_musicGenre(Eric) == country, has_drink(Eric) == tea, has_mother(Eric) == Aniya, has_food(Eric) == spaghetti), And(lives(Carol) == 2, has_cigar(Carol) == prince, has_musicGenre(Carol) == rock, has_drink(Carol) == water, has_mother(Carol) == Penny, has_food(Carol) == stew), And(lives(Alice) == 3, has_cigar(Alice) == blue_master, has_musicGenre(Alice) == hip_hop, has_drink(Alice) == boba_tea, has_mother(Alice) == Sarah, has_food(Alice) == grilled_cheese), And(lives(Peter) == 4, has_cigar(Peter) == blends, has_musicGenre(Peter) == jazz, has_drink(Peter) == root_beer, has_mother(Peter) == Kailyn, has_food(Peter) == stir_fry), And(lives(Arnold) == 5, has_cigar(Arnold) == pall_mall, has_musicGenre(Arnold) == pop, has_drink(Arnold) == milk, has_mother(Arnold) == Janelle, has_food(Arnold) == pizza), And(lives(Bob) == 6, has_cigar(Bob) == yellow_monster, has_musicGenre(Bob) == classical, has_drink(Bob) == coffee, has_mother(Bob) == Holly, has_food(Bob) == soup) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-29",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Carol`, `Peter`, `Eric`, `Bob`, `Alice`\n - Each person lives in a unique style of house: `ranch`, `colonial`, `modern`, `craftsman`, `mediterranean`, `victorian`\n - Everyone has something unique for lunch: `pizza`, `stew`, `spaghetti`, `grilled cheese`, `stir fry`, `soup`\n - Each person prefers a unique type of vacation: `cultural`, `cruise`, `mountain`, `camping`, `city`, `beach`\n - People have unique heights: `average`, `very tall`, `very short`, `short`, `tall`, `super tall`\n - Everyone has a unique favorite cigar: `yellow monster`, `prince`, `dunhill`, `pall mall`, `blue master`, `blends`\n\nClues:\n1. Alice is in the fifth house.\n2. The person who loves stir fry is the person living in a colonial-style house.\n3. Alice is the person who loves the spaghetti eater.\n4. Arnold is the person who loves the stew.\n5. There is one house between the person who has an average height and Peter.\n6. The person in a Craftsman-style house is not in the third house.\n7. The person who has an average height is the person who loves stir fry.\n8. The person who loves beach vacations is the person in a ranch-style home.\n9. Eric is in the fourth house.\n10. There is one house between the person living in a colonial-style house and the person who enjoys camping trips.\n11. The person who enjoys mountain retreats is the person who smokes Yellow Monster.\n12. The person who enjoys mountain retreats is the person who is very tall.\n13. The person who enjoys mountain retreats and the Dunhill smoker are next to each other.\n14. The person who loves the spaghetti eater is the person residing in a Victorian house.\n15. The person who is tall is the person who loves beach vacations.\n16. The person who is tall is somewhere to the left of the person residing in a Victorian house.\n17. The person who loves stir fry is directly left of Bob.\n18. The person in a modern-style house is somewhere to the left of Alice.\n19. The person in a Craftsman-style house is somewhere to the left of the person who is short.\n20. The person who loves stir fry is somewhere to the left of the Prince smoker.\n21. There are two houses between the person who loves eating grilled cheese and the person who is super tall.\n22. The person in a ranch-style home is the person who smokes Blue Master.\n23. The person who smokes many unique blends is directly left of the person who smokes Blue Master.\n24. The person who goes on cultural tours is the person who is a pizza lover.\n25. The person who is a pizza lover is somewhere to the left of the person who likes going on cruises.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Food",
        "Vacation",
        "Height",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "colonial",
          "stir fry",
          "city",
          "average",
          "pall mall"
        ],
        [
          "2",
          "Bob",
          "craftsman",
          "pizza",
          "cultural",
          "very short",
          "prince"
        ],
        [
          "3",
          "Peter",
          "modern",
          "grilled cheese",
          "camping",
          "short",
          "blends"
        ],
        [
          "4",
          "Eric",
          "ranch",
          "soup",
          "beach",
          "tall",
          "blue master"
        ],
        [
          "5",
          "Alice",
          "victorian",
          "spaghetti",
          "mountain",
          "very tall",
          "yellow monster"
        ],
        [
          "6",
          "Arnold",
          "mediterranean",
          "stew",
          "cruise",
          "super tall",
          "dunhill"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Carol, Peter, Eric, Bob, Alice])\nhouseStyles = EnumSort([ranch, colonial, modern, craftsman, mediterranean, victorian])\nfoods = EnumSort([pizza, stew, spaghetti, grilled_cheese, stir_fry, soup])\nvacations = EnumSort([cultural, cruise, mountain, camping, city, beach])\nheights = EnumSort([average, very_tall, very_short, short, tall, super_tall])\ncigars = EnumSort([yellow_monster, prince, dunhill, pall_mall, blue_master, blends])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_food = Function([people] -> [foods])\nhas_vacation = Function([people] -> [vacations])\nhas_height = Function([people] -> [heights])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is in the fifth house\nThe person who loves stir fry is the person living in a colonial-style house\nAlice is the person who loves the spaghetti eater\nArnold is the person who loves the stew\nThere is one house between the person who has an average height and Peter\nThe person in a Craftsman-style house is not in the third house\nThe person who has an average height is the person who loves stir fry\nThe person who loves beach vacations is the person in a ranch-style home\nEric is in the fourth house\nThere is one house between the person living in a colonial-style house and the person who enjoys camping trips\nThe person who enjoys mountain retreats is the person who smokes Yellow Monster\nThe person who enjoys mountain retreats is the person who is very tall\nThe person who enjoys mountain retreats and the Dunhill smoker are next to each other\nThe person who loves the spaghetti eater is the person residing in a Victorian house\nThe person who is tall is the person who loves beach vacations\nThe person who is tall is somewhere to the left of the person residing in a Victorian house\nThe person who loves stir fry is directly left of Bob\nThe person in a modern-style house is somewhere to the left of Alice\nThe person in a Craftsman-style house is somewhere to the left of the person who is short\nThe person who loves stir fry is somewhere to the left of the Prince smoker\nThere are two houses between the person who loves eating grilled cheese and the person who is super tall\nThe person in a ranch-style home is the person who smokes Blue Master\nThe person who smokes many unique blends is directly left of the person who smokes Blue Master\nThe person who goes on cultural tours is the person who is a pizza lover\nThe person who is a pizza lover is somewhere to the left of the person who likes going on cruises",
    "queries": "And( And( lives(Carol) == 1, has_houseStyle(Carol) == colonial, has_food(Carol) == stir_fry, has_vacation(Carol) == city, has_height(Carol) == average, has_cigar(Carol) == pall_mall ), And( lives(Bob) == 2, has_houseStyle(Bob) == craftsman, has_food(Bob) == pizza, has_vacation(Bob) == cultural, has_height(Bob) == very_short, has_cigar(Bob) == prince ), And( lives(Peter) == 3, has_houseStyle(Peter) == modern, has_food(Peter) == grilled_cheese, has_vacation(Peter) == camping, has_height(Peter) == short, has_cigar(Peter) == blends ), And( lives(Eric) == 4, has_houseStyle(Eric) == ranch, has_food(Eric) == soup, has_vacation(Eric) == beach, has_height(Eric) == tall, has_cigar(Eric) == blue_master ), And( lives(Alice) == 5, has_houseStyle(Alice) == victorian, has_food(Alice) == spaghetti, has_vacation(Alice) == mountain, has_height(Alice) == very_tall, has_cigar(Alice) == yellow_monster ), And( lives(Arnold) == 6, has_houseStyle(Arnold) == mediterranean, has_food(Arnold) == stew, has_vacation(Arnold) == cruise, has_height(Arnold) == super_tall, has_cigar(Arnold) == dunhill ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-3",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Alice`\n - Each person prefers a unique type of vacation: `mountain`, `cruise`, `beach`, `city`\n - Each person lives in a unique style of house: `craftsman`, `ranch`, `victorian`, `colonial`\n - The mothers' names in different houses are unique: `Kailyn`, `Holly`, `Aniya`, `Janelle`\n - They all have a unique favorite flower: `daffodils`, `roses`, `lilies`, `carnations`\n - Each person has a favorite color: `green`, `white`, `yellow`, `red`\n\nClues:\n1. Alice is directly left of the person whose favorite color is red.\n2. The person who loves a bouquet of daffodils is The person whose mother's name is Janelle.\n3. Eric is not in the first house.\n4. The person who loves the boquet of lilies is directly left of the person living in a colonial-style house.\n5. The person residing in a Victorian house is in the second house.\n6. The person who loves the rose bouquet is the person who loves yellow.\n7. The person whose mother's name is Aniya is the person who loves yellow.\n8. The person who enjoys mountain retreats is in the first house.\n9. The person who likes going on cruises is the person whose favorite color is red.\n10. The person who loves yellow is in the second house.\n11. The person who loves white is the person who prefers city breaks.\n12. The person whose mother's name is Holly is not in the fourth house.\n13. The person whose favorite color is red is directly left of Peter.\n14. The person who loves a bouquet of daffodils is the person in a ranch-style home.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "HouseStyle",
        "Mother",
        "Flower",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "mountain",
          "ranch",
          "Janelle",
          "daffodils",
          "green"
        ],
        [
          "2",
          "Alice",
          "beach",
          "victorian",
          "Aniya",
          "roses",
          "yellow"
        ],
        [
          "3",
          "Eric",
          "cruise",
          "craftsman",
          "Holly",
          "lilies",
          "red"
        ],
        [
          "4",
          "Peter",
          "city",
          "colonial",
          "Kailyn",
          "carnations",
          "white"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Alice])\nvacations = EnumSort([mountain, cruise, beach, city])\nhouseStyles = EnumSort([craftsman, ranch, victorian, colonial])\nmothers = EnumSort([Kailyn, Holly, Aniya, Janelle])\nflowers = EnumSort([daffodils, roses, lilies, carnations])\ncolors = EnumSort([green, white, yellow, red])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nlives_in_houseStyle = Function([people] -> [houseStyles])\nhas_mother = Function([people] -> [mothers])\nhas_flower = Function([people] -> [flowers])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "Alice is directly left of the person whose favorite color is red\nThe person who loves a bouquet of daffodils is The person whose mother's name is Janelle\nEric is not in the first house\nThe person who loves the boquet of lilies is directly left of the person living in a colonial-style house\nThe person residing in a Victorian house is in the second house\nThe person who loves the rose bouquet is the person who loves yellow\nThe person whose mother's name is Aniya is the person who loves yellow\nThe person who enjoys mountain retreats is in the first house\nThe person who likes going on cruises is the person whose favorite color is red\nThe person who loves yellow is in the second house\nThe person who loves white is the person who prefers city breaks\nThe person whose mother's name is Holly is not in the fourth house\nThe person whose favorite color is red is directly left of Peter\nThe person who loves a bouquet of daffodils is the person in a ranch-style home",
    "queries": "And( And( lives(Arnold) == 1, prefers_vacation(Arnold) == mountain, lives_in_houseStyle(Arnold) == ranch, has_mother(Arnold) == Janelle, has_flower(Arnold) == daffodils, has_color(Arnold) == green ), And( lives(Alice) == 2, prefers_vacation(Alice) == beach, lives_in_houseStyle(Alice) == victorian, has_mother(Alice) == Aniya, has_flower(Alice) == roses, has_color(Alice) == yellow ), And( lives(Eric) == 3, prefers_vacation(Eric) == cruise, lives_in_houseStyle(Eric) == craftsman, has_mother(Eric) == Holly, has_flower(Eric) == lilies, has_color(Eric) == red ), And( lives(Peter) == 4, prefers_vacation(Peter) == city, lives_in_houseStyle(Peter) == colonial, has_mother(Peter) == Kailyn, has_flower(Peter) == carnations, has_color(Peter) == white ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-32",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Arnold`, `Carol`, `Peter`, `Bob`\n - Each person lives in a unique style of house: `mediterranean`, `modern`, `craftsman`, `ranch`, `colonial`, `victorian`\n - People have unique favorite music genres: `country`, `hip hop`, `pop`, `jazz`, `classical`, `rock`\n - Each person has a unique hobby: `cooking`, `painting`, `photography`, `woodworking`, `gardening`, `knitting`\n\nClues:\n1. The person who loves rock music is in the fifth house.\n2. The person who loves classical music and the woodworking hobbyist are next to each other.\n3. The person in a Mediterranean-style villa is the person who loves hip-hop music.\n4. There are two houses between Arnold and the person residing in a Victorian house.\n5. The person who loves jazz music is directly left of Eric.\n6. The person who loves hip-hop music is somewhere to the left of the person who enjoys knitting.\n7. Carol is the person who loves hip-hop music.\n8. The person in a Craftsman-style house is Arnold.\n9. The person in a ranch-style home is Eric.\n10. The woodworking hobbyist is the person residing in a Victorian house.\n11. The person who loves country music is in the first house.\n12. There is one house between the person who paints as a hobby and the person living in a colonial-style house.\n13. Alice is the photography enthusiast.\n14. The person who enjoys gardening is Eric.\n15. Bob is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "MusicGenre",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "craftsman",
          "country",
          "painting"
        ],
        [
          "2",
          "Carol",
          "mediterranean",
          "hip hop",
          "cooking"
        ],
        [
          "3",
          "Bob",
          "colonial",
          "classical",
          "knitting"
        ],
        [
          "4",
          "Peter",
          "victorian",
          "jazz",
          "woodworking"
        ],
        [
          "5",
          "Eric",
          "ranch",
          "rock",
          "gardening"
        ],
        [
          "6",
          "Alice",
          "modern",
          "pop",
          "photography"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Arnold, Carol, Peter, Bob])\nhouseStyles = EnumSort([mediterranean, modern, craftsman, ranch, colonial, victorian])\nmusicGenres = EnumSort([country, hip_hop, pop, jazz, classical, rock])\nhobbies = EnumSort([cooking, painting, photography, woodworking, gardening, knitting])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves rock music is in the fifth house\nThe person who loves classical music and the woodworking hobbyist are next to each other\nThe person in a Mediterranean-style villa is the person who loves hip-hop music\nThere are two houses between Arnold and the person residing in a Victorian house\nThe person who loves jazz music is directly left of Eric\nThe person who loves hip-hop music is somewhere to the left of the person who enjoys knitting\nCarol is the person who loves hip-hop music\nThe person in a Craftsman-style house is Arnold\nThe person in a ranch-style home is Eric\nThe woodworking hobbyist is the person residing in a Victorian house\nThe person who loves country music is in the first house\nThere is one house between the person who paints as a hobby and the person living in a colonial-style house\nAlice is the photography enthusiast\nThe person who enjoys gardening is Eric\nBob is in the third house",
    "queries": "And( And(lives(Arnold) == 1, has_houseStyle(Arnold) == craftsman, has_musicGenre(Arnold) == country, has_hobby(Arnold) == painting), And(lives(Carol) == 2, has_houseStyle(Carol) == mediterranean, has_musicGenre(Carol) == hip_hop, has_hobby(Carol) == cooking), And(lives(Bob) == 3, has_houseStyle(Bob) == colonial, has_musicGenre(Bob) == classical, has_hobby(Bob) == knitting), And(lives(Peter) == 4, has_houseStyle(Peter) == victorian, has_musicGenre(Peter) == jazz, has_hobby(Peter) == woodworking), And(lives(Eric) == 5, has_houseStyle(Eric) == ranch, has_musicGenre(Eric) == rock, has_hobby(Eric) == gardening), And(lives(Alice) == 6, has_houseStyle(Alice) == modern, has_musicGenre(Alice) == pop, has_hobby(Alice) == photography) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-6",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Eric`, `Arnold`, `Carol`, `Alice`, `Peter`\n - Each person has a unique hobby: `cooking`, `painting`, `knitting`, `photography`, `woodworking`, `gardening`\n - People have unique hair colors: `brown`, `auburn`, `black`, `red`, `gray`, `blonde`\n - People have unique favorite sports: `swimming`, `volleyball`, `basketball`, `baseball`, `tennis`, `soccer`\n - The mothers' names in different houses are unique: `Sarah`, `Holly`, `Penny`, `Janelle`, `Kailyn`, `Aniya`\n - Everyone has a unique favorite cigar: `dunhill`, `blends`, `pall mall`, `prince`, `yellow monster`, `blue master`\n\nClues:\n1. The person who has gray hair is directly left of The person whose mother's name is Janelle.\n2. The person who loves soccer is in the sixth house.\n3. Arnold is the person who has blonde hair.\n4. The photography enthusiast is the person who smokes Yellow Monster.\n5. There is one house between the Dunhill smoker and the person who loves cooking.\n6. The person who paints as a hobby is the person who has blonde hair.\n7. The Dunhill smoker is directly left of Alice.\n8. The person who paints as a hobby is directly left of the person who loves volleyball.\n9. The person who loves soccer is The person whose mother's name is Aniya.\n10. The person partial to Pall Mall is somewhere to the left of Carol.\n11. The person who enjoys knitting and the person who loves basketball are next to each other.\n12. The person partial to Pall Mall is directly left of The person whose mother's name is Holly.\n13. The person who loves soccer is the Prince smoker.\n14. The person who loves swimming is The person whose mother's name is Penny.\n15. The person whose mother's name is Kailyn is the person who loves volleyball.\n16. The person who loves basketball is The person whose mother's name is Janelle.\n17. The person who enjoys knitting is the person who loves volleyball.\n18. The person who enjoys knitting is not in the third house.\n19. The person who has auburn hair is somewhere to the left of the photography enthusiast.\n20. The person whose mother's name is Sarah is not in the fifth house.\n21. Bob is directly left of the person who has red hair.\n22. The Dunhill smoker is the person who enjoys gardening.\n23. The person who loves baseball is the person who has auburn hair.\n24. Eric is the person who smokes many unique blends.\n25. The person who has brown hair is somewhere to the right of The person whose mother's name is Penny.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Hobby",
        "HairColor",
        "FavoriteSport",
        "Mother",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "painting",
          "blonde",
          "tennis",
          "Sarah",
          "blue master"
        ],
        [
          "2",
          "Eric",
          "knitting",
          "gray",
          "volleyball",
          "Kailyn",
          "blends"
        ],
        [
          "3",
          "Peter",
          "woodworking",
          "black",
          "basketball",
          "Janelle",
          "pall mall"
        ],
        [
          "4",
          "Bob",
          "gardening",
          "auburn",
          "baseball",
          "Holly",
          "dunhill"
        ],
        [
          "5",
          "Alice",
          "photography",
          "red",
          "swimming",
          "Penny",
          "yellow monster"
        ],
        [
          "6",
          "Carol",
          "cooking",
          "brown",
          "soccer",
          "Aniya",
          "prince"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Eric, Arnold, Carol, Alice, Peter])\nhobbies = EnumSort([cooking, painting, knitting, photography, woodworking, gardening])\nhairColors = EnumSort([brown, auburn, black, red, gray, blonde])\nsports = EnumSort([swimming, volleyball, basketball, baseball, tennis, soccer])\nmothersNames = EnumSort([Sarah, Holly, Penny, Janelle, Kailyn, Aniya])\ncigars = EnumSort([dunhill, blends, pall_mall, prince, yellow_monster, blue_master])\nlives = Function([people] -> [int])\nhas_hobby = Function([people] -> [hobbies])\nhas_hairColor = Function([people] -> [hairColors])\nhas_sport = Function([people] -> [sports])\nhas_motherName = Function([people] -> [mothersNames])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who has gray hair is directly left of The person whose mother's name is Janelle\nThe person who loves soccer is in the sixth house\nArnold is the person who has blonde hair\nThe photography enthusiast is the person who smokes Yellow Monster\nThere is one house between the Dunhill smoker and the person who loves cooking\nThe person who paints as a hobby is the person who has blonde hair\nThe Dunhill smoker is directly left of Alice\nThe person who paints as a hobby is directly left of the person who loves volleyball\nThe person who loves soccer is The person whose mother's name is Aniya\nThe person partial to Pall Mall is somewhere to the left of Carol\nThe person who enjoys knitting and the person who loves basketball are next to each other\nThe person partial to Pall Mall is directly left of The person whose mother's name is Holly\nThe person who loves soccer is the Prince smoker\nThe person who loves swimming is The person whose mother's name is Penny\nThe person whose mother's name is Kailyn is the person who loves volleyball\nThe person who loves basketball is The person whose mother's name is Janelle\nThe person who enjoys knitting is the person who loves volleyball\nThe person who enjoys knitting is not in the third house\nThe person who has auburn hair is somewhere to the left of the photography enthusiast\nThe person whose mother's name is Sarah is not in the fifth house\nBob is directly left of the person who has red hair\nThe Dunhill smoker is the person who enjoys gardening\nThe person who loves baseball is the person who has auburn hair\nEric is the person who smokes many unique blends\nThe person who has brown hair is somewhere to the right of The person whose mother's name is Penny",
    "queries": "And( And(lives(Arnold) == 1, has_hobby(Arnold) == painting, has_hairColor(Arnold) == blonde, has_sport(Arnold) == tennis, has_motherName(Arnold) == Sarah, has_cigar(Arnold) == blue_master), And(lives(Eric) == 2, has_hobby(Eric) == knitting, has_hairColor(Eric) == gray, has_sport(Eric) == volleyball, has_motherName(Eric) == Kailyn, has_cigar(Eric) == blends), And(lives(Peter) == 3, has_hobby(Peter) == woodworking, has_hairColor(Peter) == black, has_sport(Peter) == basketball, has_motherName(Peter) == Janelle, has_cigar(Peter) == pall_mall), And(lives(Bob) == 4, has_hobby(Bob) == gardening, has_hairColor(Bob) == auburn, has_sport(Bob) == baseball, has_motherName(Bob) == Holly, has_cigar(Bob) == dunhill), And(lives(Alice) == 5, has_hobby(Alice) == photography, has_hairColor(Alice) == red, has_sport(Alice) == swimming, has_motherName(Alice) == Penny, has_cigar(Alice) == yellow_monster), And(lives(Carol) == 6, has_hobby(Carol) == cooking, has_hairColor(Carol) == brown, has_sport(Carol) == soccer, has_motherName(Carol) == Aniya, has_cigar(Carol) == prince) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-3",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Alice`, `Carol`, `Bob`, `Arnold`\n - The people keep unique animals: `horse`, `fish`, `cat`, `bird`, `dog`, `rabbit`\n - Each person has a unique birthday month: `sept`, `mar`, `jan`, `feb`, `april`, `may`\n - The mothers' names in different houses are unique: `Holly`, `Sarah`, `Penny`, `Kailyn`, `Aniya`, `Janelle`\n - Each person prefers a unique type of vacation: `beach`, `cruise`, `cultural`, `camping`, `city`, `mountain`\n\nClues:\n1. The person whose birthday is in February is the fish enthusiast.\n2. The person whose birthday is in May is somewhere to the right of The person whose mother's name is Penny.\n3. The person who loves beach vacations is Peter.\n4. The person whose mother's name is Janelle is Carol.\n5. The rabbit owner is Bob.\n6. The rabbit owner is the person whose birthday is in May.\n7. The person whose mother's name is Kailyn is in the fourth house.\n8. The person who enjoys camping trips is the cat lover.\n9. The person who likes going on cruises is in the sixth house.\n10. The person whose birthday is in April is the dog owner.\n11. Alice is The person whose mother's name is Aniya.\n12. The person whose birthday is in May and The person whose mother's name is Sarah are next to each other.\n13. The person whose mother's name is Holly is the cat lover.\n14. There are two houses between the person whose birthday is in March and the rabbit owner.\n15. The dog owner is directly left of the person who keeps horses.\n16. The person whose birthday is in February is in the second house.\n17. The rabbit owner is somewhere to the right of the person who goes on cultural tours.\n18. Carol is in the second house.\n19. The person whose birthday is in September is the person who prefers city breaks.\n20. Eric is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Birthday",
        "Mother",
        "Vacation"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "cat",
          "mar",
          "Holly",
          "camping"
        ],
        [
          "2",
          "Carol",
          "fish",
          "feb",
          "Janelle",
          "cultural"
        ],
        [
          "3",
          "Eric",
          "bird",
          "sept",
          "Penny",
          "city"
        ],
        [
          "4",
          "Bob",
          "rabbit",
          "may",
          "Kailyn",
          "mountain"
        ],
        [
          "5",
          "Peter",
          "dog",
          "april",
          "Sarah",
          "beach"
        ],
        [
          "6",
          "Alice",
          "horse",
          "jan",
          "Aniya",
          "cruise"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Alice, Carol, Bob, Arnold])\nanimals = EnumSort([horse, fish, cat, bird, dog, rabbit])\nmonths = EnumSort([sept, mar, jan, feb, april, may])\nmothers = EnumSort([Holly, Sarah, Penny, Kailyn, Aniya, Janelle])\nvacations = EnumSort([beach, cruise, cultural, camping, city, mountain])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_birthday = Function([people] -> [months])\nhas_mother = Function([people] -> [mothers])\nprefers_vacation = Function([people] -> [vacations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person whose birthday is in February is the fish enthusiast\nThe person whose birthday is in May is somewhere to the right of The person whose mother's name is Penny\nThe person who loves beach vacations is Peter\nThe person whose mother's name is Janelle is Carol\nThe rabbit owner is Bob\nThe rabbit owner is the person whose birthday is in May\nThe person whose mother's name is Kailyn is in the fourth house\nThe person who enjoys camping trips is the cat lover\nThe person who likes going on cruises is in the sixth house\nThe person whose birthday is in April is the dog owner\nAlice is The person whose mother's name is Aniya\nThe person whose birthday is in May and The person whose mother's name is Sarah are next to each other\nThe person whose mother's name is Holly is the cat lover\nThere are two houses between the person whose birthday is in March and the rabbit owner\nThe dog owner is directly left of the person who keeps horses\nThe person whose birthday is in February is in the second house\nThe rabbit owner is somewhere to the right of the person who goes on cultural tours\nCarol is in the second house\nThe person whose birthday is in September is the person who prefers city breaks\nEric is not in the first house",
    "queries": "And( And(lives(Arnold) == 1, has_animal(Arnold) == cat, has_birthday(Arnold) == mar, has_mother(Arnold) == Holly, prefers_vacation(Arnold) == camping), And(lives(Carol) == 2, has_animal(Carol) == fish, has_birthday(Carol) == feb, has_mother(Carol) == Janelle, prefers_vacation(Carol) == cultural), And(lives(Eric) == 3, has_animal(Eric) == bird, has_birthday(Eric) == sept, has_mother(Eric) == Penny, prefers_vacation(Eric) == city), And(lives(Bob) == 4, has_animal(Bob) == rabbit, has_birthday(Bob) == may, has_mother(Bob) == Kailyn, prefers_vacation(Bob) == mountain), And(lives(Peter) == 5, has_animal(Peter) == dog, has_birthday(Peter) == april, has_mother(Peter) == Sarah, prefers_vacation(Peter) == beach), And(lives(Alice) == 6, has_animal(Alice) == horse, has_birthday(Alice) == jan, has_mother(Alice) == Aniya, prefers_vacation(Alice) == cruise) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-35",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Alice`, `Peter`, `Bob`\n - Each person has a unique type of pet: `fish`, `bird`, `cat`, `dog`, `hamster`\n - People use unique phone models: `samsung galaxy s21`, `iphone 13`, `google pixel 6`, `huawei p50`, `oneplus 9`\n - People have unique heights: `short`, `very tall`, `very short`, `tall`, `average`\n - Each mother is accompanied by their child: `Fred`, `Meredith`, `Samantha`, `Timothy`, `Bella`\n\nClues:\n1. The person with an aquarium of fish is Arnold.\n2. The person who uses a Huawei P50 is not in the fifth house.\n3. The person with an aquarium of fish is in the fourth house.\n4. The person who uses a Samsung Galaxy S21 is in the second house.\n5. The person's child is named Bella is the person who owns a dog.\n6. Arnold is somewhere to the left of the person with a pet hamster.\n7. The person who uses a Google Pixel 6 is directly left of the person's child is named Meredith.\n8. The person's child is named Bella is directly left of the person who is short.\n9. The person who keeps a pet bird is somewhere to the left of the person's child is named Bella.\n10. The person who has an average height and the person who uses a OnePlus 9 are next to each other.\n11. Alice is the person who has a cat.\n12. Bob is somewhere to the right of the person who is very short.\n13. The person who uses a Google Pixel 6 is not in the fourth house.\n14. Eric is the person who uses an iPhone 13.\n15. The person's child is named Fred is the person who keeps a pet bird.\n16. The person who is very tall is in the first house.\n17. There is one house between the person who uses an iPhone 13 and the person who is the mother of Timothy.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "PhoneModel",
        "Height",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "bird",
          "iphone 13",
          "very tall",
          "Fred"
        ],
        [
          "2",
          "Peter",
          "dog",
          "samsung galaxy s21",
          "very short",
          "Bella"
        ],
        [
          "3",
          "Alice",
          "cat",
          "google pixel 6",
          "short",
          "Timothy"
        ],
        [
          "4",
          "Arnold",
          "fish",
          "huawei p50",
          "average",
          "Meredith"
        ],
        [
          "5",
          "Bob",
          "hamster",
          "oneplus 9",
          "tall",
          "Samantha"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Alice, Peter, Bob])\npets = EnumSort([fish, bird, cat, dog, hamster])\nphones = EnumSort([samsung_galaxy_s21, iphone_13, google_pixel_6, huawei_p50, oneplus_9])\nheights = EnumSort([short, very_tall, very_short, tall, average])\nchildren = EnumSort([Fred, Meredith, Samantha, Timothy, Bella])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nuses_phone = Function([people] -> [phones])\nhas_height = Function([people] -> [heights])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person with an aquarium of fish is Arnold\nThe person who uses a Huawei P50 is not in the fifth house\nThe person with an aquarium of fish is in the fourth house\nThe person who uses a Samsung Galaxy S21 is in the second house\nThe person's child is named Bella is the person who owns a dog\nArnold is somewhere to the left of the person with a pet hamster\nThe person who uses a Google Pixel 6 is directly left of the person's child is named Meredith\nThe person's child is named Bella is directly left of the person who is short\nThe person who keeps a pet bird is somewhere to the left of the person's child is named Bella\nThe person who has an average height and the person who uses a OnePlus 9 are next to each other\nAlice is the person who has a cat\nBob is somewhere to the right of the person who is very short\nThe person who uses a Google Pixel 6 is not in the fourth house\nEric is the person who uses an iPhone 13\nThe person's child is named Fred is the person who keeps a pet bird\nThe person who is very tall is in the first house\nThere is one house between the person who uses an iPhone 13 and the person who is the mother of Timothy",
    "queries": "And( And(lives(Eric) == 1, has_pet(Eric) == bird, uses_phone(Eric) == iphone_13, has_height(Eric) == very_tall, has_child(Eric) == Fred), And(lives(Peter) == 2, has_pet(Peter) == dog, uses_phone(Peter) == samsung_galaxy_s21, has_height(Peter) == very_short, has_child(Peter) == Bella), And(lives(Alice) == 3, has_pet(Alice) == cat, uses_phone(Alice) == google_pixel_6, has_height(Alice) == short, has_child(Alice) == Timothy), And(lives(Arnold) == 4, has_pet(Arnold) == fish, uses_phone(Arnold) == huawei_p50, has_height(Arnold) == average, has_child(Arnold) == Meredith), And(lives(Bob) == 5, has_pet(Bob) == hamster, uses_phone(Bob) == oneplus_9, has_height(Bob) == tall, has_child(Bob) == Samantha) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-26",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Arnold`, `Bob`, `Alice`, `Peter`, `Eric`\n - People use unique phone models: `samsung galaxy s21`, `oneplus 9`, `google pixel 6`, `iphone 13`, `xiaomi mi 11`, `huawei p50`\n - Each person has a unique type of pet: `dog`, `cat`, `fish`, `rabbit`, `hamster`, `bird`\n - They all have a unique favorite flower: `daffodils`, `tulips`, `carnations`, `lilies`, `iris`, `roses`\n - People own unique car models: `toyota camry`, `chevrolet silverado`, `bmw 3 series`, `tesla model 3`, `honda civic`, `ford f150`\n\nClues:\n1. There is one house between the person who owns a Tesla Model 3 and the person who uses a OnePlus 9.\n2. There are two houses between the person who owns a dog and the person who owns a Honda Civic.\n3. There is one house between the person who uses an iPhone 13 and the person who uses a Xiaomi Mi 11.\n4. The person who loves the vase of tulips is somewhere to the right of the person who loves a bouquet of daffodils.\n5. The person who owns a Chevrolet Silverado is directly left of the person who loves the rose bouquet.\n6. Alice is the person who owns a dog.\n7. There are two houses between the person who uses a Google Pixel 6 and the person who uses a Huawei P50.\n8. There are two houses between the person who owns a Ford F-150 and the person who loves the boquet of lilies.\n9. The person who uses a Google Pixel 6 is somewhere to the left of the person who has a cat.\n10. The person who loves a bouquet of daffodils is not in the first house.\n11. There is one house between the person with a pet hamster and the person who has a cat.\n12. The person who uses a OnePlus 9 is Peter.\n13. The person who uses a Xiaomi Mi 11 is the person who has a cat.\n14. The person who loves the boquet of lilies is Eric.\n15. The person who owns a Tesla Model 3 and the person who uses a Google Pixel 6 are next to each other.\n16. The person who owns a rabbit is not in the second house.\n17. The person who loves a carnations arrangement is in the second house.\n18. The person who loves the boquet of lilies is somewhere to the right of the person who owns a Honda Civic.\n19. There are two houses between Arnold and the person who owns a Chevrolet Silverado.\n20. There are two houses between Peter and Bob.\n21. The person who keeps a pet bird is in the fifth house.\n22. The person who owns a Toyota Camry is the person who has a cat.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Pet",
        "Flower",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "samsung galaxy s21",
          "dog",
          "iris",
          "tesla model 3"
        ],
        [
          "2",
          "Arnold",
          "google pixel 6",
          "fish",
          "carnations",
          "ford f150"
        ],
        [
          "3",
          "Peter",
          "oneplus 9",
          "rabbit",
          "daffodils",
          "bmw 3 series"
        ],
        [
          "4",
          "Carol",
          "iphone 13",
          "hamster",
          "tulips",
          "honda civic"
        ],
        [
          "5",
          "Eric",
          "huawei p50",
          "bird",
          "lilies",
          "chevrolet silverado"
        ],
        [
          "6",
          "Bob",
          "xiaomi mi 11",
          "cat",
          "roses",
          "toyota camry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Arnold, Bob, Alice, Peter, Eric])\nphoneModels = EnumSort([samsung_galaxy_s21, oneplus_9, google_pixel_6, iphone_13, xiaomi_mi_11, huawei_p50])\npets = EnumSort([dog, cat, fish, rabbit, hamster, bird])\nflowers = EnumSort([daffodils, tulips, carnations, lilies, iris, roses])\ncarModels = EnumSort([toyota_camry, chevrolet_silverado, bmw_3_series, tesla_model_3, honda_civic, ford_f150])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_pet = Function([people] -> [pets])\nloves_flower = Function([people] -> [flowers])\nowns_car = Function([people] -> [carModels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the person who owns a Tesla Model 3 and the person who uses a OnePlus 9\nThere are two houses between the person who owns a dog and the person who owns a Honda Civic\nThere is one house between the person who uses an iPhone 13 and the person who uses a Xiaomi Mi 11\nThe person who loves the vase of tulips is somewhere to the right of the person who loves a bouquet of daffodils\nThe person who owns a Chevrolet Silverado is directly left of the person who loves the rose bouquet\nAlice is the person who owns a dog\nThere are two houses between the person who uses a Google Pixel 6 and the person who uses a Huawei P50\nThere are two houses between the person who owns a Ford F-150 and the person who loves the boquet of lilies\nThe person who uses a Google Pixel 6 is somewhere to the left of the person who has a cat\nThe person who loves a bouquet of daffodils is not in the first house\nThere is one house between the person with a pet hamster and the person who has a cat\nThe person who uses a OnePlus 9 is Peter\nThe person who uses a Xiaomi Mi 11 is the person who has a cat\nThe person who loves the boquet of lilies is Eric\nThe person who owns a Tesla Model 3 and the person who uses a Google Pixel 6 are next to each other\nThe person who owns a rabbit is not in the second house\nThe person who loves a carnations arrangement is in the second house\nThe person who loves the boquet of lilies is somewhere to the right of the person who owns a Honda Civic\nThere are two houses between Arnold and the person who owns a Chevrolet Silverado\nThere are two houses between Peter and Bob\nThe person who keeps a pet bird is in the fifth house\nThe person who owns a Toyota Camry is the person who has a cat",
    "queries": "And( And(lives(Alice) == 1, uses_phone(Alice) == samsung_galaxy_s21, has_pet(Alice) == dog, loves_flower(Alice) == iris, owns_car(Alice) == tesla_model_3), And(lives(Arnold) == 2, uses_phone(Arnold) == google_pixel_6, has_pet(Arnold) == fish, loves_flower(Arnold) == carnations, owns_car(Arnold) == ford_f150), And(lives(Peter) == 3, uses_phone(Peter) == oneplus_9, has_pet(Peter) == rabbit, loves_flower(Peter) == daffodils, owns_car(Peter) == bmw_3_series), And(lives(Carol) == 4, uses_phone(Carol) == iphone_13, has_pet(Carol) == hamster, loves_flower(Carol) == tulips, owns_car(Carol) == honda_civic), And(lives(Eric) == 5, uses_phone(Eric) == huawei_p50, has_pet(Eric) == bird, loves_flower(Eric) == lilies, owns_car(Eric) == chevrolet_silverado), And(lives(Bob) == 6, uses_phone(Bob) == xiaomi_mi_11, has_pet(Bob) == cat, loves_flower(Bob) == roses, owns_car(Bob) == toyota_camry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-30",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Eric`, `Peter`\n - They all have a unique favorite flower: `daffodils`, `carnations`, `lilies`, `roses`\n - Everyone has a unique favorite cigar: `dunhill`, `blue master`, `pall mall`, `prince`\n - Each mother is accompanied by their child: `Meredith`, `Samantha`, `Bella`, `Fred`\n - The mothers' names in different houses are unique: `Janelle`, `Aniya`, `Holly`, `Kailyn`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `oneplus 9`, `samsung galaxy s21`\n\nClues:\n1. The person whose mother's name is Kailyn is the Prince smoker.\n2. The person whose mother's name is Holly is the person who loves a bouquet of daffodils.\n3. Arnold is in the fourth house.\n4. The person's child is named Bella is somewhere to the left of the person who uses a OnePlus 9.\n5. The person's child is named Fred is not in the second house.\n6. The person's child is named Meredith is directly left of The person whose mother's name is Janelle.\n7. The person who loves a bouquet of daffodils is Eric.\n8. The person who loves the boquet of lilies is the person partial to Pall Mall.\n9. The person whose mother's name is Janelle is the person who loves a carnations arrangement.\n10. Alice is somewhere to the right of the person's child is named Fred.\n11. The person who uses an iPhone 13 is directly left of the Dunhill smoker.\n12. The person who loves the rose bouquet is somewhere to the right of the Dunhill smoker.\n13. The person who loves the rose bouquet is somewhere to the left of the person who uses a Google Pixel 6.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Cigar",
        "Children",
        "Mother",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "lilies",
          "pall mall",
          "Fred",
          "Aniya",
          "iphone 13"
        ],
        [
          "2",
          "Eric",
          "daffodils",
          "dunhill",
          "Bella",
          "Holly",
          "samsung galaxy s21"
        ],
        [
          "3",
          "Alice",
          "roses",
          "prince",
          "Meredith",
          "Kailyn",
          "oneplus 9"
        ],
        [
          "4",
          "Arnold",
          "carnations",
          "blue master",
          "Samantha",
          "Janelle",
          "google pixel 6"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Eric, Peter])\nflowers = EnumSort([daffodils, carnations, lilies, roses])\ncigars = EnumSort([dunhill, blue_master, pall_mall, prince])\nchildren = EnumSort([Meredith, Samantha, Bella, Fred])\nmothers = EnumSort([Janelle, Aniya, Holly, Kailyn])\nphones = EnumSort([iphone_13, google_pixel_6, oneplus_9, samsung_galaxy_s21])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_cigar = Function([people] -> [cigars])\nhas_child = Function([people] -> [children])\nhas_mother = Function([people] -> [mothers])\nuses_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person whose mother's name is Kailyn is the Prince smoker\nThe person whose mother's name is Holly is the person who loves a bouquet of daffodils\nArnold is in the fourth house\nThe person's child is named Bella is somewhere to the left of the person who uses a OnePlus 9\nThe person's child is named Fred is not in the second house\nThe person's child is named Meredith is directly left of The person whose mother's name is Janelle\nThe person who loves a bouquet of daffodils is Eric\nThe person who loves the boquet of lilies is the person partial to Pall Mall\nThe person whose mother's name is Janelle is the person who loves a carnations arrangement\nAlice is somewhere to the right of the person's child is named Fred\nThe person who uses an iPhone 13 is directly left of the Dunhill smoker\nThe person who loves the rose bouquet is somewhere to the right of the Dunhill smoker\nThe person who loves the rose bouquet is somewhere to the left of the person who uses a Google Pixel 6",
    "queries": "And( And( lives(Peter) == 1, has_flower(Peter) == lilies, has_cigar(Peter) == pall_mall, has_child(Peter) == Fred, has_mother(Peter) == Aniya, uses_phone(Peter) == iphone_13 ), And( lives(Eric) == 2, has_flower(Eric) == daffodils, has_cigar(Eric) == dunhill, has_child(Eric) == Bella, has_mother(Eric) == Holly, uses_phone(Eric) == samsung_galaxy_s21 ), And( lives(Alice) == 3, has_flower(Alice) == roses, has_cigar(Alice) == prince, has_child(Alice) == Meredith, has_mother(Alice) == Kailyn, uses_phone(Alice) == oneplus_9 ), And( lives(Arnold) == 4, has_flower(Arnold) == carnations, has_cigar(Arnold) == blue_master, has_child(Arnold) == Samantha, has_mother(Arnold) == Janelle, uses_phone(Arnold) == google_pixel_6 ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-24",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Peter`, `Alice`\n - The mothers' names in different houses are unique: `Holly`, `Janelle`, `Kailyn`, `Aniya`\n - The people are of nationalities: `dane`, `norwegian`, `brit`, `swede`\n - People have unique favorite book genres: `science fiction`, `romance`, `fantasy`, `mystery`\n - The people keep unique animals: `fish`, `cat`, `bird`, `horse`\n - People have unique hair colors: `black`, `blonde`, `red`, `brown`\n\nClues:\n1. The Swedish person is the person who has black hair.\n2. The bird keeper is in the first house.\n3. Arnold is the person who loves fantasy books.\n4. The person who loves science fiction books is not in the second house.\n5. The British person and Arnold are next to each other.\n6. The bird keeper is the person who has red hair.\n7. The person who keeps horses is Peter.\n8. The person who has black hair is the person who loves romance books.\n9. The person whose mother's name is Kailyn is Arnold.\n10. The Swedish person is The person whose mother's name is Janelle.\n11. The person who has blonde hair is in the third house.\n12. Alice is The person whose mother's name is Aniya.\n13. The Swedish person is the fish enthusiast.\n14. Arnold is directly left of the person who has black hair.\n15. The Norwegian is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Nationality",
        "BookGenre",
        "Animal",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "Aniya",
          "dane",
          "science fiction",
          "bird",
          "red"
        ],
        [
          "2",
          "Peter",
          "Holly",
          "brit",
          "mystery",
          "horse",
          "brown"
        ],
        [
          "3",
          "Arnold",
          "Kailyn",
          "norwegian",
          "fantasy",
          "cat",
          "blonde"
        ],
        [
          "4",
          "Eric",
          "Janelle",
          "swede",
          "romance",
          "fish",
          "black"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Peter, Alice])\nmothers = EnumSort([Holly, Janelle, Kailyn, Aniya])\nnationalities = EnumSort([dane, norwegian, brit, swede])\nbookGenres = EnumSort([science_fiction, romance, fantasy, mystery])\nanimals = EnumSort([fish, cat, bird, horse])\nhairColors = EnumSort([black, blonde, red, brown])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_animal = Function([people] -> [animals])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The Swedish person is the person who has black hair\nThe bird keeper is in the first house\nArnold is the person who loves fantasy books\nThe person who loves science fiction books is not in the second house\nThe British person and Arnold are next to each other\nThe bird keeper is the person who has red hair\nThe person who keeps horses is Peter\nThe person who has black hair is the person who loves romance books\nThe person whose mother's name is Kailyn is Arnold\nThe Swedish person is The person whose mother's name is Janelle\nThe person who has blonde hair is in the third house\nAlice is The person whose mother's name is Aniya\nThe Swedish person is the fish enthusiast\nArnold is directly left of the person who has black hair\nThe Norwegian is not in the first house",
    "queries": "And( And(lives(Alice) == 1, has_mother(Alice) == Aniya, has_nationality(Alice) == dane, has_bookGenre(Alice) == science_fiction, has_animal(Alice) == bird, has_hairColor(Alice) == red), And(lives(Peter) == 2, has_mother(Peter) == Holly, has_nationality(Peter) == brit, has_bookGenre(Peter) == mystery, has_animal(Peter) == horse, has_hairColor(Peter) == brown), And(lives(Arnold) == 3, has_mother(Arnold) == Kailyn, has_nationality(Arnold) == norwegian, has_bookGenre(Arnold) == fantasy, has_animal(Arnold) == cat, has_hairColor(Arnold) == blonde), And(lives(Eric) == 4, has_mother(Eric) == Janelle, has_nationality(Eric) == swede, has_bookGenre(Eric) == romance, has_animal(Eric) == fish, has_hairColor(Eric) == black) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-33",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Alice`, `Eric`, `Bob`\n - Each person has a unique favorite drink: `root beer`, `tea`, `water`, `coffee`, `milk`\n - People have unique favorite music genres: `pop`, `hip hop`, `classical`, `jazz`, `rock`\n - The people are of nationalities: `dane`, `norwegian`, `swede`, `german`, `brit`\n - Everyone has a unique favorite cigar: `dunhill`, `prince`, `blue master`, `pall mall`, `blends`\n\nClues:\n1. The Dunhill smoker is not in the second house.\n2. The person who loves rock music is directly left of the person who loves classical music.\n3. Peter is the person who loves jazz music.\n4. Arnold is directly left of the Dane.\n5. The root beer lover is the German.\n6. The tea drinker is the Swedish person.\n7. The Swedish person is the person who loves classical music.\n8. The Dunhill smoker is not in the fourth house.\n9. The person who loves jazz music is the Prince smoker.\n10. Eric and the person who loves hip-hop music are next to each other.\n11. There are two houses between the person partial to Pall Mall and the Swedish person.\n12. Arnold is somewhere to the right of Eric.\n13. The coffee drinker is somewhere to the right of the Dunhill smoker.\n14. The Norwegian is somewhere to the right of the person who smokes Blue Master.\n15. There is one house between the one who only drinks water and the person who smokes many unique blends.\n16. Alice is the tea drinker.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "MusicGenre",
        "Nationality",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "root beer",
          "pop",
          "german",
          "pall mall"
        ],
        [
          "2",
          "Arnold",
          "water",
          "hip hop",
          "brit",
          "blue master"
        ],
        [
          "3",
          "Bob",
          "milk",
          "rock",
          "dane",
          "dunhill"
        ],
        [
          "4",
          "Alice",
          "tea",
          "classical",
          "swede",
          "blends"
        ],
        [
          "5",
          "Peter",
          "coffee",
          "jazz",
          "norwegian",
          "prince"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Alice, Eric, Bob])\ndrinks = EnumSort([root_beer, tea, water, coffee, milk])\nmusicGenres = EnumSort([pop, hip_hop, classical, jazz, rock])\nnationalities = EnumSort([dane, norwegian, swede, german, brit])\ncigars = EnumSort([dunhill, prince, blue_master, pall_mall, blends])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_nationality = Function([people] -> [nationalities])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The Dunhill smoker is not in the second house\nThe person who loves rock music is directly left of the person who loves classical music\nPeter is the person who loves jazz music\nArnold is directly left of the Dane\nThe root beer lover is the German\nThe tea drinker is the Swedish person\nThe Swedish person is the person who loves classical music\nThe Dunhill smoker is not in the fourth house\nThe person who loves jazz music is the Prince smoker\nEric and the person who loves hip-hop music are next to each other\nThere are two houses between the person partial to Pall Mall and the Swedish person\nArnold is somewhere to the right of Eric\nThe coffee drinker is somewhere to the right of the Dunhill smoker\nThe Norwegian is somewhere to the right of the person who smokes Blue Master\nThere is one house between the one who only drinks water and the person who smokes many unique blends\nAlice is the tea drinker",
    "queries": "And( And(lives(Eric) == 1, has_drink(Eric) == root_beer, has_musicGenre(Eric) == pop, has_nationality(Eric) == german, has_cigar(Eric) == pall_mall), And(lives(Arnold) == 2, has_drink(Arnold) == water, has_musicGenre(Arnold) == hip_hop, has_nationality(Arnold) == brit, has_cigar(Arnold) == blue_master), And(lives(Bob) == 3, has_drink(Bob) == milk, has_musicGenre(Bob) == rock, has_nationality(Bob) == dane, has_cigar(Bob) == dunhill), And(lives(Alice) == 4, has_drink(Alice) == tea, has_musicGenre(Alice) == classical, has_nationality(Alice) == swede, has_cigar(Alice) == blends), And(lives(Peter) == 5, has_drink(Peter) == coffee, has_musicGenre(Peter) == jazz, has_nationality(Peter) == norwegian, has_cigar(Peter) == prince) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-7",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Peter`, `Eric`\n - Each person prefers a unique type of vacation: `camping`, `city`, `beach`, `cruise`, `mountain`\n - People have unique heights: `very tall`, `average`, `very short`, `short`, `tall`\n - They all have a unique favorite flower: `tulips`, `roses`, `carnations`, `lilies`, `daffodils`\n - Each person has a unique level of education: `bachelor`, `master`, `associate`, `high school`, `doctorate`\n - People own unique car models: `bmw 3 series`, `tesla model 3`, `toyota camry`, `ford f150`, `honda civic`\n\nClues:\n1. Eric is the person who prefers city breaks.\n2. Arnold is the person who is tall.\n3. The person who loves beach vacations is the person who loves the boquet of lilies.\n4. The person who owns a BMW 3 Series is the person who is tall.\n5. The person with an associate's degree is the person who loves the boquet of lilies.\n6. The person who has an average height is Eric.\n7. Peter is the person who owns a Toyota Camry.\n8. The person who has an average height is somewhere to the right of the person who loves a bouquet of daffodils.\n9. The person who owns a Honda Civic is somewhere to the left of the person who loves the boquet of lilies.\n10. Eric is the person who owns a Ford F-150.\n11. The person who loves the vase of tulips is in the fourth house.\n12. The person who is very short is not in the fourth house.\n13. Eric is the person with a high school diploma.\n14. The person who enjoys mountain retreats is somewhere to the right of the person with a master's degree.\n15. The person who likes going on cruises is not in the third house.\n16. Bob is the person who is short.\n17. The person with an associate's degree is directly left of Arnold.\n18. The person with a bachelor's degree is the person who is very tall.\n19. The person who loves a carnations arrangement is directly left of the person with a doctorate.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Height",
        "Flower",
        "Education",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "cruise",
          "very tall",
          "daffodils",
          "bachelor",
          "honda civic"
        ],
        [
          "2",
          "Peter",
          "beach",
          "very short",
          "lilies",
          "associate",
          "toyota camry"
        ],
        [
          "3",
          "Arnold",
          "camping",
          "tall",
          "carnations",
          "master",
          "bmw 3 series"
        ],
        [
          "4",
          "Bob",
          "mountain",
          "short",
          "tulips",
          "doctorate",
          "tesla model 3"
        ],
        [
          "5",
          "Eric",
          "city",
          "average",
          "roses",
          "high school",
          "ford f150"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Peter, Eric])\nvacations = EnumSort([camping, city, beach, cruise, mountain])\nheights = EnumSort([very_tall, average, very_short, short, tall])\nflowers = EnumSort([tulips, roses, carnations, lilies, daffodils])\neducation = EnumSort([bachelor, master, associate, high_school, doctorate])\ncars = EnumSort([bmw_3_series, tesla_model_3, toyota_camry, ford_f150, honda_civic])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nhas_height = Function([people] -> [heights])\nlikes_flower = Function([people] -> [flowers])\nhas_education = Function([people] -> [education])\nowns_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Eric is the person who prefers city breaks\nArnold is the person who is tall\nThe person who loves beach vacations is the person who loves the boquet of lilies\nThe person who owns a BMW 3 Series is the person who is tall\nThe person with an associate's degree is the person who loves the boquet of lilies\nThe person who has an average height is Eric\nPeter is the person who owns a Toyota Camry\nThe person who has an average height is somewhere to the right of the person who loves a bouquet of daffodils\nThe person who owns a Honda Civic is somewhere to the left of the person who loves the boquet of lilies\nEric is the person who owns a Ford F-150\nThe person who loves the vase of tulips is in the fourth house\nThe person who is very short is not in the fourth house\nEric is the person with a high school diploma\nThe person who enjoys mountain retreats is somewhere to the right of the person with a master's degree\nThe person who likes going on cruises is not in the third house\nBob is the person who is short\nThe person with an associate's degree is directly left of Arnold\nThe person with a bachelor's degree is the person who is very tall\nThe person who loves a carnations arrangement is directly left of the person with a doctorate",
    "queries": "And( And(lives(Alice) == 1, prefers_vacation(Alice) == cruise, has_height(Alice) == very_tall, likes_flower(Alice) == daffodils, has_education(Alice) == bachelor, owns_car(Alice) == honda_civic), And(lives(Peter) == 2, prefers_vacation(Peter) == beach, has_height(Peter) == very_short, likes_flower(Peter) == lilies, has_education(Peter) == associate, owns_car(Peter) == toyota_camry), And(lives(Arnold) == 3, prefers_vacation(Arnold) == camping, has_height(Arnold) == tall, likes_flower(Arnold) == carnations, has_education(Arnold) == master, owns_car(Arnold) == bmw_3_series), And(lives(Bob) == 4, prefers_vacation(Bob) == mountain, has_height(Bob) == short, likes_flower(Bob) == tulips, has_education(Bob) == doctorate, owns_car(Bob) == tesla_model_3), And(lives(Eric) == 5, prefers_vacation(Eric) == city, has_height(Eric) == average, likes_flower(Eric) == roses, has_education(Eric) == high_school, owns_car(Eric) == ford_f150) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-8",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Bob`, `Eric`, `Peter`\n - Each person has a favorite color: `green`, `red`, `white`, `yellow`, `blue`\n - Everyone has something unique for lunch: `grilled cheese`, `stew`, `pizza`, `spaghetti`, `stir fry`\n - People use unique phone models: `google pixel 6`, `huawei p50`, `oneplus 9`, `samsung galaxy s21`, `iphone 13`\n - Each person has a unique level of education: `master`, `associate`, `doctorate`, `bachelor`, `high school`\n\nClues:\n1. The person who uses a Samsung Galaxy S21 is somewhere to the left of the person whose favorite color is green.\n2. The person whose favorite color is red is Alice.\n3. Bob is directly left of the person whose favorite color is red.\n4. Alice is the person with an associate's degree.\n5. The person with a high school diploma is the person who loves eating grilled cheese.\n6. The person who uses a Google Pixel 6 is the person who loves yellow.\n7. The person who loves stir fry is the person with a bachelor's degree.\n8. The person who is a pizza lover is not in the first house.\n9. The person who loves white is the person with a master's degree.\n10. The person who loves blue is Eric.\n11. The person who uses a Huawei P50 is the person who loves the stew.\n12. The person who uses an iPhone 13 is the person with a high school diploma.\n13. The person whose favorite color is green is the person who loves stir fry.\n14. The person with a doctorate and the person who loves white are next to each other.\n15. The person who loves the stew is not in the second house.\n16. Arnold is somewhere to the right of the person who loves eating grilled cheese.\n17. The person who loves yellow is in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Food",
        "PhoneModel",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "yellow",
          "spaghetti",
          "google pixel 6",
          "doctorate"
        ],
        [
          "2",
          "Bob",
          "white",
          "pizza",
          "samsung galaxy s21",
          "master"
        ],
        [
          "3",
          "Alice",
          "red",
          "stew",
          "huawei p50",
          "associate"
        ],
        [
          "4",
          "Eric",
          "blue",
          "grilled cheese",
          "iphone 13",
          "high school"
        ],
        [
          "5",
          "Arnold",
          "green",
          "stir fry",
          "oneplus 9",
          "bachelor"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Bob, Eric, Peter])\ncolors = EnumSort([green, red, white, yellow, blue])\nfoods = EnumSort([grilled_cheese, stew, pizza, spaghetti, stir_fry])\nphones = EnumSort([google_pixel_6, huawei_p50, oneplus_9, samsung_galaxy_s21, iphone_13])\neducation = EnumSort([master, associate, doctorate, bachelor, high_school])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_food = Function([people] -> [foods])\nhas_phone = Function([people] -> [phones])\nhas_education = Function([people] -> [education])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who uses a Samsung Galaxy S21 is somewhere to the left of the person whose favorite color is green\nThe person whose favorite color is red is Alice\nBob is directly left of the person whose favorite color is red\nAlice is the person with an associate's degree\nThe person with a high school diploma is the person who loves eating grilled cheese\nThe person who uses a Google Pixel 6 is the person who loves yellow\nThe person who loves stir fry is the person with a bachelor's degree\nThe person who is a pizza lover is not in the first house\nThe person who loves white is the person with a master's degree\nThe person who loves blue is Eric\nThe person who uses a Huawei P50 is the person who loves the stew\nThe person who uses an iPhone 13 is the person with a high school diploma\nThe person whose favorite color is green is the person who loves stir fry\nThe person with a doctorate and the person who loves white are next to each other\nThe person who loves the stew is not in the second house\nArnold is somewhere to the right of the person who loves eating grilled cheese\nThe person who loves yellow is in the first house",
    "queries": "And( And(lives(Peter) == 1, has_color(Peter) == yellow, has_food(Peter) == spaghetti, has_phone(Peter) == google_pixel_6, has_education(Peter) == doctorate), And(lives(Bob) == 2, has_color(Bob) == white, has_food(Bob) == pizza, has_phone(Bob) == samsung_galaxy_s21, has_education(Bob) == master), And(lives(Alice) == 3, has_color(Alice) == red, has_food(Alice) == stew, has_phone(Alice) == huawei_p50, has_education(Alice) == associate), And(lives(Eric) == 4, has_color(Eric) == blue, has_food(Eric) == grilled_cheese, has_phone(Eric) == iphone_13, has_education(Eric) == high_school), And(lives(Arnold) == 5, has_color(Arnold) == green, has_food(Arnold) == stir_fry, has_phone(Arnold) == oneplus_9, has_education(Arnold) == bachelor) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-4",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Arnold`, `Alice`, `Eric`\n - Each person has an occupation: `lawyer`, `teacher`, `artist`, `engineer`, `doctor`\n - Each person lives in a unique style of house: `victorian`, `craftsman`, `modern`, `ranch`, `colonial`\n - People have unique hair colors: `blonde`, `gray`, `red`, `brown`, `black`\n - People have unique favorite book genres: `romance`, `biography`, `science fiction`, `mystery`, `fantasy`\n\nClues:\n1. Alice is not in the fifth house.\n2. Peter is not in the second house.\n3. Peter is directly left of Eric.\n4. The person living in a colonial-style house is somewhere to the left of the person who loves fantasy books.\n5. Arnold is the person who is a doctor.\n6. The person who has gray hair is the person who loves fantasy books.\n7. The person who loves science fiction books is not in the fifth house.\n8. Peter is the person who has red hair.\n9. The person who loves romance books is the person who has black hair.\n10. Eric is the person who has black hair.\n11. The person who is a doctor is somewhere to the right of Peter.\n12. The person who has blonde hair is the person who is a teacher.\n13. Peter is the person who loves mystery books.\n14. The person who is a lawyer is Eric.\n15. The person living in a colonial-style house is the person who is an engineer.\n16. The person residing in a Victorian house is the person who loves mystery books.\n17. The person who is a teacher is not in the fourth house.\n18. The person who is an artist is somewhere to the left of the person in a modern-style house.\n19. The person who is a teacher is not in the third house.\n20. The person in a ranch-style home is directly left of the person in a Craftsman-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Occupation",
        "HouseStyle",
        "HairColor",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "artist",
          "victorian",
          "red",
          "mystery"
        ],
        [
          "2",
          "Eric",
          "lawyer",
          "modern",
          "black",
          "romance"
        ],
        [
          "3",
          "Alice",
          "engineer",
          "colonial",
          "brown",
          "science fiction"
        ],
        [
          "4",
          "Arnold",
          "doctor",
          "ranch",
          "gray",
          "fantasy"
        ],
        [
          "5",
          "Bob",
          "teacher",
          "craftsman",
          "blonde",
          "biography"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Arnold, Alice, Eric])\noccupations = EnumSort([lawyer, teacher, artist, engineer, doctor])\nhouseStyles = EnumSort([victorian, craftsman, modern, ranch, colonial])\nhairColors = EnumSort([blonde, gray, red, brown, black])\nbookGenres = EnumSort([romance, biography, science_fiction, mystery, fantasy])\nlives = Function([people] -> [int])\nhas_occupation = Function([people] -> [occupations])\nlives_in_houseStyle = Function([people] -> [houseStyles])\nhas_hairColor = Function([people] -> [hairColors])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Alice is not in the fifth house\nPeter is not in the second house\nPeter is directly left of Eric\nThe person living in a colonial-style house is somewhere to the left of the person who loves fantasy books\nArnold is the person who is a doctor\nThe person who has gray hair is the person who loves fantasy books\nThe person who loves science fiction books is not in the fifth house\nPeter is the person who has red hair\nThe person who loves romance books is the person who has black hair\nEric is the person who has black hair\nThe person who is a doctor is somewhere to the right of Peter\nThe person who has blonde hair is the person who is a teacher\nPeter is the person who loves mystery books\nThe person who is a lawyer is Eric\nThe person living in a colonial-style house is the person who is an engineer\nThe person residing in a Victorian house is the person who loves mystery books\nThe person who is a teacher is not in the fourth house\nThe person who is an artist is somewhere to the left of the person in a modern-style house\nThe person who is a teacher is not in the third house\nThe person in a ranch-style home is directly left of the person in a Craftsman-style house",
    "queries": "And( And(lives(Peter) == 1, has_occupation(Peter) == artist, lives_in_houseStyle(Peter) == victorian, has_hairColor(Peter) == red, has_bookGenre(Peter) == mystery), And(lives(Eric) == 2, has_occupation(Eric) == lawyer, lives_in_houseStyle(Eric) == modern, has_hairColor(Eric) == black, has_bookGenre(Eric) == romance), And(lives(Alice) == 3, has_occupation(Alice) == engineer, lives_in_houseStyle(Alice) == colonial, has_hairColor(Alice) == brown, has_bookGenre(Alice) == science_fiction), And(lives(Arnold) == 4, has_occupation(Arnold) == doctor, lives_in_houseStyle(Arnold) == ranch, has_hairColor(Arnold) == gray, has_bookGenre(Arnold) == fantasy), And(lives(Bob) == 5, has_occupation(Bob) == teacher, lives_in_houseStyle(Bob) == craftsman, has_hairColor(Bob) == blonde, has_bookGenre(Bob) == biography) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-7",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Peter`, `Carol`, `Bob`, `Arnold`\n - Everyone has a favorite smoothie: `watermelon`, `blueberry`, `desert`, `cherry`, `dragonfruit`, `lime`\n - Everyone has something unique for lunch: `stew`, `pizza`, `grilled cheese`, `stir fry`, `soup`, `spaghetti`\n - People use unique phone models: `google pixel 6`, `iphone 13`, `xiaomi mi 11`, `huawei p50`, `samsung galaxy s21`, `oneplus 9`\n - People own unique car models: `tesla model 3`, `honda civic`, `toyota camry`, `ford f150`, `chevrolet silverado`, `bmw 3 series`\n - Each person lives in a unique style of house: `craftsman`, `ranch`, `modern`, `victorian`, `mediterranean`, `colonial`\n\nClues:\n1. Bob is the person who uses a Xiaomi Mi 11.\n2. The person who loves the soup is in the fourth house.\n3. The Dragonfruit smoothie lover is somewhere to the left of the person in a ranch-style home.\n4. There is one house between the person who owns a Chevrolet Silverado and the person residing in a Victorian house.\n5. The person in a Mediterranean-style villa is the person who drinks Lime smoothies.\n6. Eric is in the sixth house.\n7. The Desert smoothie lover is the person who is a pizza lover.\n8. The person living in a colonial-style house is the person who drinks Blueberry smoothies.\n9. The Dragonfruit smoothie lover and the person who uses a Google Pixel 6 are next to each other.\n10. The person who loves the soup is Peter.\n11. Alice is somewhere to the right of the person who owns a BMW 3 Series.\n12. The person who loves stir fry is the person in a ranch-style home.\n13. The person who owns a Ford F-150 is the person living in a colonial-style house.\n14. The person in a Craftsman-style house is somewhere to the right of the person in a modern-style house.\n15. The person who loves the stew is directly left of the person in a ranch-style home.\n16. The person who owns a Tesla Model 3 is directly left of the person who loves stir fry.\n17. The person who loves eating grilled cheese is the person who owns a Honda Civic.\n18. The person in a Mediterranean-style villa is the person who uses a Google Pixel 6.\n19. The person in a Craftsman-style house is the Watermelon smoothie lover.\n20. The person in a modern-style house is Carol.\n21. The person who uses an iPhone 13 is in the first house.\n22. The person who owns a Honda Civic is somewhere to the left of the person who owns a BMW 3 Series.\n23. The person who uses a Xiaomi Mi 11 is the person who is a pizza lover.\n24. The person who uses a Samsung Galaxy S21 is the person who loves stir fry.\n25. The person residing in a Victorian house is directly left of the person who uses a OnePlus 9.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Food",
        "PhoneModel",
        "CarModel",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "dragonfruit",
          "spaghetti",
          "iphone 13",
          "chevrolet silverado",
          "modern"
        ],
        [
          "2",
          "Arnold",
          "lime",
          "grilled cheese",
          "google pixel 6",
          "honda civic",
          "mediterranean"
        ],
        [
          "3",
          "Bob",
          "desert",
          "pizza",
          "xiaomi mi 11",
          "bmw 3 series",
          "victorian"
        ],
        [
          "4",
          "Peter",
          "blueberry",
          "soup",
          "oneplus 9",
          "ford f150",
          "colonial"
        ],
        [
          "5",
          "Alice",
          "watermelon",
          "stew",
          "huawei p50",
          "tesla model 3",
          "craftsman"
        ],
        [
          "6",
          "Eric",
          "cherry",
          "stir fry",
          "samsung galaxy s21",
          "toyota camry",
          "ranch"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Peter, Carol, Bob, Arnold])\nsmoothies = EnumSort([watermelon, blueberry, desert, cherry, dragonfruit, lime])\nfoods = EnumSort([stew, pizza, grilled_cheese, stir_fry, soup, spaghetti])\nphones = EnumSort([google_pixel_6, iphone_13, xiaomi_mi_11, huawei_p50, samsung_galaxy_s21, oneplus_9])\ncars = EnumSort([tesla_model_3, honda_civic, toyota_camry, ford_f150, chevrolet_silverado, bmw_3_series])\nhouses = EnumSort([craftsman, ranch, modern, victorian, mediterranean, colonial])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_food = Function([people] -> [foods])\nuses_phone = Function([people] -> [phones])\nowns_car = Function([people] -> [cars])\nlives_in_house = Function([people] -> [houses])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Bob is the person who uses a Xiaomi Mi 11\nThe person who loves the soup is in the fourth house\nThe Dragonfruit smoothie lover is somewhere to the left of the person in a ranch-style home\nThere is one house between the person who owns a Chevrolet Silverado and the person residing in a Victorian house\nThe person in a Mediterranean-style villa is the person who drinks Lime smoothies\nEric is in the sixth house\nThe Desert smoothie lover is the person who is a pizza lover\nThe person living in a colonial-style house is the person who drinks Blueberry smoothies\nThe Dragonfruit smoothie lover and the person who uses a Google Pixel 6 are next to each other\nThe person who loves the soup is Peter\nAlice is somewhere to the right of the person who owns a BMW 3 Series\nThe person who loves stir fry is the person in a ranch-style home\nThe person who owns a Ford F-150 is the person living in a colonial-style house\nThe person in a Craftsman-style house is somewhere to the right of the person in a modern-style house\nThe person who loves the stew is directly left of the person in a ranch-style home\nThe person who owns a Tesla Model 3 is directly left of the person who loves stir fry\nThe person who loves eating grilled cheese is the person who owns a Honda Civic\nThe person in a Mediterranean-style villa is the person who uses a Google Pixel 6\nThe person in a Craftsman-style house is the Watermelon smoothie lover\nThe person in a modern-style house is Carol\nThe person who uses an iPhone 13 is in the first house\nThe person who owns a Honda Civic is somewhere to the left of the person who owns a BMW 3 Series\nThe person who uses a Xiaomi Mi 11 is the person who is a pizza lover\nThe person who uses a Samsung Galaxy S21 is the person who loves stir fry\nThe person residing in a Victorian house is directly left of the person who uses a OnePlus 9",
    "queries": "And( And( lives(Carol) == 1, has_smoothie(Carol) == dragonfruit, has_food(Carol) == spaghetti, uses_phone(Carol) == iphone_13, owns_car(Carol) == chevrolet_silverado, lives_in_house(Carol) == modern ), And( lives(Arnold) == 2, has_smoothie(Arnold) == lime, has_food(Arnold) == grilled_cheese, uses_phone(Arnold) == google_pixel_6, owns_car(Arnold) == honda_civic, lives_in_house(Arnold) == mediterranean ), And( lives(Bob) == 3, has_smoothie(Bob) == desert, has_food(Bob) == pizza, uses_phone(Bob) == xiaomi_mi_11, owns_car(Bob) == bmw_3_series, lives_in_house(Bob) == victorian ), And( lives(Peter) == 4, has_smoothie(Peter) == blueberry, has_food(Peter) == soup, uses_phone(Peter) == oneplus_9, owns_car(Peter) == ford_f150, lives_in_house(Peter) == colonial ), And( lives(Alice) == 5, has_smoothie(Alice) == watermelon, has_food(Alice) == stew, uses_phone(Alice) == huawei_p50, owns_car(Alice) == tesla_model_3, lives_in_house(Alice) == craftsman ), And( lives(Eric) == 6, has_smoothie(Eric) == cherry, has_food(Eric) == stir_fry, uses_phone(Eric) == samsung_galaxy_s21, owns_car(Eric) == toyota_camry, lives_in_house(Eric) == ranch ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-14",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Eric`, `Bob`, `Peter`\n - Each person has a unique birthday month: `mar`, `feb`, `jan`, `sept`, `april`\n - They all have a unique favorite flower: `tulips`, `lilies`, `carnations`, `daffodils`, `roses`\n - Each person has a unique level of education: `high school`, `bachelor`, `doctorate`, `associate`, `master`\n - Everyone has a favorite smoothie: `desert`, `cherry`, `watermelon`, `dragonfruit`, `lime`\n\nClues:\n1. There is one house between the Desert smoothie lover and the person whose birthday is in April.\n2. The person with a bachelor's degree is Peter.\n3. The person who loves a bouquet of daffodils is the person with a high school diploma.\n4. Eric is not in the second house.\n5. The person who drinks Lime smoothies and the person who loves the rose bouquet are next to each other.\n6. Alice is in the third house.\n7. The person whose birthday is in February is Peter.\n8. The person with a master's degree is the person whose birthday is in March.\n9. The person whose birthday is in February is in the fourth house.\n10. The person whose birthday is in March is the person who drinks Lime smoothies.\n11. Peter is the Dragonfruit smoothie lover.\n12. The person with an associate's degree is not in the second house.\n13. The person who loves a carnations arrangement is not in the second house.\n14. The Watermelon smoothie lover is Arnold.\n15. Alice is the person whose birthday is in September.\n16. The person who loves the boquet of lilies is not in the second house.\n17. The person with an associate's degree is Arnold.\n18. The person who loves the vase of tulips is Peter.\n19. The person who loves the boquet of lilies is not in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Flower",
        "Education",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "mar",
          "carnations",
          "master",
          "lime"
        ],
        [
          "2",
          "Bob",
          "jan",
          "roses",
          "doctorate",
          "cherry"
        ],
        [
          "3",
          "Alice",
          "sept",
          "daffodils",
          "high school",
          "desert"
        ],
        [
          "4",
          "Peter",
          "feb",
          "tulips",
          "bachelor",
          "dragonfruit"
        ],
        [
          "5",
          "Arnold",
          "april",
          "lilies",
          "associate",
          "watermelon"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Eric, Bob, Peter])\nmonths = EnumSort([mar, feb, jan, sept, april])\nflowers = EnumSort([tulips, lilies, carnations, daffodils, roses])\neducation = EnumSort([high_school, bachelor, doctorate, associate, master])\nsmoothies = EnumSort([desert, cherry, watermelon, dragonfruit, lime])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nhas_flower = Function([people] -> [flowers])\nhas_education = Function([people] -> [education])\nhas_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There is one house between the Desert smoothie lover and the person whose birthday is in April\nThe person with a bachelor's degree is Peter\nThe person who loves a bouquet of daffodils is the person with a high school diploma\nEric is not in the second house\nThe person who drinks Lime smoothies and the person who loves the rose bouquet are next to each other\nAlice is in the third house\nThe person whose birthday is in February is Peter\nThe person with a master's degree is the person whose birthday is in March\nThe person whose birthday is in February is in the fourth house\nThe person whose birthday is in March is the person who drinks Lime smoothies\nPeter is the Dragonfruit smoothie lover\nThe person with an associate's degree is not in the second house\nThe person who loves a carnations arrangement is not in the second house\nThe Watermelon smoothie lover is Arnold\nAlice is the person whose birthday is in September\nThe person who loves the boquet of lilies is not in the second house\nThe person with an associate's degree is Arnold\nThe person who loves the vase of tulips is Peter\nThe person who loves the boquet of lilies is not in the first house",
    "queries": "And( And(lives(Eric) == 1, has_birthday(Eric) == mar, has_flower(Eric) == carnations, has_education(Eric) == master, has_smoothie(Eric) == lime), And(lives(Bob) == 2, has_birthday(Bob) == jan, has_flower(Bob) == roses, has_education(Bob) == doctorate, has_smoothie(Bob) == cherry), And(lives(Alice) == 3, has_birthday(Alice) == sept, has_flower(Alice) == daffodils, has_education(Alice) == high_school, has_smoothie(Alice) == desert), And(lives(Peter) == 4, has_birthday(Peter) == feb, has_flower(Peter) == tulips, has_education(Peter) == bachelor, has_smoothie(Peter) == dragonfruit), And(lives(Arnold) == 5, has_birthday(Arnold) == april, has_flower(Arnold) == lilies, has_education(Arnold) == associate, has_smoothie(Arnold) == watermelon) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-7",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Alice`, `Arnold`\n - People have unique hair colors: `brown`, `black`, `blonde`, `red`\n - People have unique favorite sports: `tennis`, `basketball`, `soccer`, `swimming`\n - Everyone has a favorite smoothie: `watermelon`, `cherry`, `dragonfruit`, `desert`\n - Each person has a unique birthday month: `april`, `sept`, `feb`, `jan`\n - People use unique phone models: `oneplus 9`, `samsung galaxy s21`, `iphone 13`, `google pixel 6`\n\nClues:\n1. The person whose birthday is in January is somewhere to the left of the person who loves basketball.\n2. The person whose birthday is in February is directly left of the person who has red hair.\n3. Eric is the person who uses a OnePlus 9.\n4. The person whose birthday is in April is Arnold.\n5. The person who uses a Samsung Galaxy S21 and the person who likes Cherry smoothies are next to each other.\n6. The person who has blonde hair and Peter are next to each other.\n7. The person who has black hair is somewhere to the right of the person who has brown hair.\n8. The person who has black hair is the person whose birthday is in February.\n9. The Dragonfruit smoothie lover is in the second house.\n10. The person who loves soccer is somewhere to the right of the person who uses a OnePlus 9.\n11. There are two houses between the person who loves tennis and the person who loves basketball.\n12. The person who has black hair is the person who uses a Samsung Galaxy S21.\n13. Alice is the person who likes Cherry smoothies.\n14. The Desert smoothie lover is the person who uses a Google Pixel 6.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "FavoriteSport",
        "Smoothie",
        "Birthday",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "brown",
          "tennis",
          "desert",
          "april",
          "google pixel 6"
        ],
        [
          "2",
          "Eric",
          "blonde",
          "swimming",
          "dragonfruit",
          "jan",
          "oneplus 9"
        ],
        [
          "3",
          "Peter",
          "black",
          "soccer",
          "watermelon",
          "feb",
          "samsung galaxy s21"
        ],
        [
          "4",
          "Alice",
          "red",
          "basketball",
          "cherry",
          "sept",
          "iphone 13"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Alice, Arnold])\nhairColors = EnumSort([brown, black, blonde, red])\nsports = EnumSort([tennis, basketball, soccer, swimming])\nsmoothies = EnumSort([watermelon, cherry, dragonfruit, desert])\nmonths = EnumSort([april, sept, feb, jan])\nphones = EnumSort([oneplus_9, samsung_galaxy_s21, iphone_13, google_pixel_6])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_sport = Function([people] -> [sports])\nhas_smoothie = Function([people] -> [smoothies])\nhas_month = Function([people] -> [months])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person whose birthday is in January is somewhere to the left of the person who loves basketball\nThe person whose birthday is in February is directly left of the person who has red hair\nEric is the person who uses a OnePlus 9\nThe person whose birthday is in April is Arnold\nThe person who uses a Samsung Galaxy S21 and the person who likes Cherry smoothies are next to each other\nThe person who has blonde hair and Peter are next to each other\nThe person who has black hair is somewhere to the right of the person who has brown hair\nThe person who has black hair is the person whose birthday is in February\nThe Dragonfruit smoothie lover is in the second house\nThe person who loves soccer is somewhere to the right of the person who uses a OnePlus 9\nThere are two houses between the person who loves tennis and the person who loves basketball\nThe person who has black hair is the person who uses a Samsung Galaxy S21\nAlice is the person who likes Cherry smoothies\nThe Desert smoothie lover is the person who uses a Google Pixel 6",
    "queries": "And( And( lives(Arnold) == 1, has_hairColor(Arnold) == brown, has_sport(Arnold) == tennis, has_smoothie(Arnold) == desert, has_month(Arnold) == april, has_phone(Arnold) == google_pixel_6 ), And( lives(Eric) == 2, has_hairColor(Eric) == blonde, has_sport(Eric) == swimming, has_smoothie(Eric) == dragonfruit, has_month(Eric) == jan, has_phone(Eric) == oneplus_9 ), And( lives(Peter) == 3, has_hairColor(Peter) == black, has_sport(Peter) == soccer, has_smoothie(Peter) == watermelon, has_month(Peter) == feb, has_phone(Peter) == samsung_galaxy_s21 ), And( lives(Alice) == 4, has_hairColor(Alice) == red, has_sport(Alice) == basketball, has_smoothie(Alice) == cherry, has_month(Alice) == sept, has_phone(Alice) == iphone_13 ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-11",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Peter`, `Eric`, `Bob`, `Alice`, `Arnold`\n - Each person prefers a unique type of vacation: `cruise`, `mountain`, `city`, `camping`, `cultural`, `beach`\n - Each person has a unique hobby: `knitting`, `photography`, `cooking`, `painting`, `gardening`, `woodworking`\n - Everyone has something unique for lunch: `stew`, `pizza`, `spaghetti`, `grilled cheese`, `stir fry`, `soup`\n - People own unique car models: `chevrolet silverado`, `honda civic`, `toyota camry`, `ford f150`, `tesla model 3`, `bmw 3 series`\n - They all have a unique favorite flower: `tulips`, `daffodils`, `carnations`, `lilies`, `iris`, `roses`\n\nClues:\n1. Arnold is the person who enjoys camping trips.\n2. The photography enthusiast is the person who loves the soup.\n3. Carol is the person who loves eating grilled cheese.\n4. The person who owns a Honda Civic is the person who loves a carnations arrangement.\n5. The person who loves beach vacations is not in the first house.\n6. The person who enjoys gardening is the person who owns a Toyota Camry.\n7. There is one house between the person who loves the boquet of iris and the person who loves the vase of tulips.\n8. The person who prefers city breaks is the person who loves the stew.\n9. The person who loves a bouquet of daffodils is Carol.\n10. The person who prefers city breaks is Eric.\n11. Carol is the person who loves cooking.\n12. Eric is directly left of the photography enthusiast.\n13. The person who loves the rose bouquet is Bob.\n14. There is one house between Arnold and the person who likes going on cruises.\n15. The person who owns a Tesla Model 3 and the person who enjoys mountain retreats are next to each other.\n16. The person who loves the rose bouquet is the person who owns a Toyota Camry.\n17. The person who owns a BMW 3 Series is somewhere to the right of the person who loves cooking.\n18. The woodworking hobbyist is not in the third house.\n19. The person who owns a Ford F-150 is the person who enjoys mountain retreats.\n20. The person who is a pizza lover is not in the second house.\n21. The person who loves the vase of tulips is not in the fourth house.\n22. The person who loves the spaghetti eater is somewhere to the left of the person who enjoys knitting.\n23. Peter is somewhere to the right of the photography enthusiast.\n24. The person who owns a Honda Civic is the person who is a pizza lover.\n25. The person who loves cooking is in the fifth house.\n26. The person who likes going on cruises is the person who enjoys knitting.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Hobby",
        "Food",
        "CarModel",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "cultural",
          "woodworking",
          "pizza",
          "honda civic",
          "carnations"
        ],
        [
          "2",
          "Bob",
          "beach",
          "gardening",
          "spaghetti",
          "toyota camry",
          "roses"
        ],
        [
          "3",
          "Eric",
          "city",
          "painting",
          "stew",
          "chevrolet silverado",
          "lilies"
        ],
        [
          "4",
          "Arnold",
          "camping",
          "photography",
          "soup",
          "tesla model 3",
          "iris"
        ],
        [
          "5",
          "Carol",
          "mountain",
          "cooking",
          "grilled cheese",
          "ford f150",
          "daffodils"
        ],
        [
          "6",
          "Peter",
          "cruise",
          "knitting",
          "stir fry",
          "bmw 3 series",
          "tulips"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Peter, Eric, Bob, Alice, Arnold])\nvacations = EnumSort([cruise, mountain, city, camping, cultural, beach])\nhobbies = EnumSort([knitting, photography, cooking, painting, gardening, woodworking])\nfoods = EnumSort([stew, pizza, spaghetti, grilled_cheese, stir_fry, soup])\ncars = EnumSort([chevrolet_silverado, honda_civic, toyota_camry, ford_f150, tesla_model_3, bmw_3_series])\nflowers = EnumSort([tulips, daffodils, carnations, lilies, iris, roses])\nlives = Function([people] -> [int])\nhas_vacation = Function([people] -> [vacations])\nhas_hobby = Function([people] -> [hobbies])\nhas_food = Function([people] -> [foods])\nhas_car = Function([people] -> [cars])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is the person who enjoys camping trips\nThe photography enthusiast is the person who loves the soup\nCarol is the person who loves eating grilled cheese\nThe person who owns a Honda Civic is the person who loves a carnations arrangement\nThe person who loves beach vacations is not in the first house\nThe person who enjoys gardening is the person who owns a Toyota Camry\nThere is one house between the person who loves the boquet of iris and the person who loves the vase of tulips\nThe person who prefers city breaks is the person who loves the stew\nThe person who loves a bouquet of daffodils is Carol\nThe person who prefers city breaks is Eric\nCarol is the person who loves cooking\nEric is directly left of the photography enthusiast\nThe person who loves the rose bouquet is Bob\nThere is one house between Arnold and the person who likes going on cruises\nThe person who owns a Tesla Model 3 and the person who enjoys mountain retreats are next to each other\nThe person who loves the rose bouquet is the person who owns a Toyota Camry\nThe person who owns a BMW 3 Series is somewhere to the right of the person who loves cooking\nThe woodworking hobbyist is not in the third house\nThe person who owns a Ford F-150 is the person who enjoys mountain retreats\nThe person who is a pizza lover is not in the second house\nThe person who loves the vase of tulips is not in the fourth house\nThe person who loves the spaghetti eater is somewhere to the left of the person who enjoys knitting\nPeter is somewhere to the right of the photography enthusiast\nThe person who owns a Honda Civic is the person who is a pizza lover\nThe person who loves cooking is in the fifth house\nThe person who likes going on cruises is the person who enjoys knitting",
    "queries": "And( And(lives(Alice) == 1, has_vacation(Alice) == cultural, has_hobby(Alice) == woodworking, has_food(Alice) == pizza, has_car(Alice) == honda_civic, has_flower(Alice) == carnations), And(lives(Bob) == 2, has_vacation(Bob) == beach, has_hobby(Bob) == gardening, has_food(Bob) == spaghetti, has_car(Bob) == toyota_camry, has_flower(Bob) == roses), And(lives(Eric) == 3, has_vacation(Eric) == city, has_hobby(Eric) == painting, has_food(Eric) == stew, has_car(Eric) == chevrolet_silverado, has_flower(Eric) == lilies), And(lives(Arnold) == 4, has_vacation(Arnold) == camping, has_hobby(Arnold) == photography, has_food(Arnold) == soup, has_car(Arnold) == tesla_model_3, has_flower(Arnold) == iris), And(lives(Carol) == 5, has_vacation(Carol) == mountain, has_hobby(Carol) == cooking, has_food(Carol) == grilled_cheese, has_car(Carol) == ford_f150, has_flower(Carol) == daffodils), And(lives(Peter) == 6, has_vacation(Peter) == cruise, has_hobby(Peter) == knitting, has_food(Peter) == stir_fry, has_car(Peter) == bmw_3_series, has_flower(Peter) == tulips) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-10",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Eric`, `Arnold`\n - The mothers' names in different houses are unique: `Penny`, `Kailyn`, `Aniya`, `Janelle`, `Holly`\n - Everyone has a unique favorite cigar: `blue master`, `pall mall`, `prince`, `dunhill`, `blends`\n - The people keep unique animals: `bird`, `cat`, `horse`, `fish`, `dog`\n - Everyone has something unique for lunch: `grilled cheese`, `stir fry`, `pizza`, `spaghetti`, `stew`\n\nClues:\n1. The person who loves the stew is somewhere to the left of the fish enthusiast.\n2. The person who is a pizza lover is somewhere to the right of the Dunhill smoker.\n3. Peter is the cat lover.\n4. The dog owner is directly left of the person who loves the spaghetti eater.\n5. The person who loves stir fry is The person whose mother's name is Aniya.\n6. There are two houses between the fish enthusiast and Eric.\n7. The person who smokes many unique blends is The person whose mother's name is Kailyn.\n8. The fish enthusiast is the person who loves the spaghetti eater.\n9. The fish enthusiast is in the second house.\n10. The person whose mother's name is Kailyn is the person who loves the stew.\n11. The person whose mother's name is Janelle is not in the fifth house.\n12. The person whose mother's name is Holly is the person who smokes Blue Master.\n13. Arnold is The person whose mother's name is Aniya.\n14. The person who loves the spaghetti eater and the person partial to Pall Mall are next to each other.\n15. Peter is not in the third house.\n16. Arnold is the person who keeps horses.\n17. The person whose mother's name is Holly is Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Cigar",
        "Animal",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "Kailyn",
          "blends",
          "dog",
          "stew"
        ],
        [
          "2",
          "Bob",
          "Holly",
          "blue master",
          "fish",
          "spaghetti"
        ],
        [
          "3",
          "Arnold",
          "Aniya",
          "pall mall",
          "horse",
          "stir fry"
        ],
        [
          "4",
          "Peter",
          "Janelle",
          "dunhill",
          "cat",
          "grilled cheese"
        ],
        [
          "5",
          "Eric",
          "Penny",
          "prince",
          "bird",
          "pizza"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Eric, Arnold])\nmothers = EnumSort([Penny, Kailyn, Aniya, Janelle, Holly])\ncigars = EnumSort([blue_master, pall_mall, prince, dunhill, blends])\nanimals = EnumSort([bird, cat, horse, fish, dog])\nfoods = EnumSort([grilled_cheese, stir_fry, pizza, spaghetti, stew])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nhas_cigar = Function([people] -> [cigars])\nhas_animal = Function([people] -> [animals])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves the stew is somewhere to the left of the fish enthusiast\nThe person who is a pizza lover is somewhere to the right of the Dunhill smoker\nPeter is the cat lover\nThe dog owner is directly left of the person who loves the spaghetti eater\nThe person who loves stir fry is The person whose mother's name is Aniya\nThere are two houses between the fish enthusiast and Eric\nThe person who smokes many unique blends is The person whose mother's name is Kailyn\nThe fish enthusiast is the person who loves the spaghetti eater\nThe fish enthusiast is in the second house\nThe person whose mother's name is Kailyn is the person who loves the stew\nThe person whose mother's name is Janelle is not in the fifth house\nThe person whose mother's name is Holly is the person who smokes Blue Master\nArnold is The person whose mother's name is Aniya\nThe person who loves the spaghetti eater and the person partial to Pall Mall are next to each other\nPeter is not in the third house\nArnold is the person who keeps horses\nThe person whose mother's name is Holly is Bob",
    "queries": "And( And(lives(Alice) == 1, has_mother(Alice) == Kailyn, has_cigar(Alice) == blends, has_animal(Alice) == dog, has_food(Alice) == stew), And(lives(Bob) == 2, has_mother(Bob) == Holly, has_cigar(Bob) == blue_master, has_animal(Bob) == fish, has_food(Bob) == spaghetti), And(lives(Arnold) == 3, has_mother(Arnold) == Aniya, has_cigar(Arnold) == pall_mall, has_animal(Arnold) == horse, has_food(Arnold) == stir_fry), And(lives(Peter) == 4, has_mother(Peter) == Janelle, has_cigar(Peter) == dunhill, has_animal(Peter) == cat, has_food(Peter) == grilled_cheese), And(lives(Eric) == 5, has_mother(Eric) == Penny, has_cigar(Eric) == prince, has_animal(Eric) == bird, has_food(Eric) == pizza) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-18",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Eric`, `Carol`, `Alice`, `Bob`\n - The people are of nationalities: `swede`, `brit`, `chinese`, `dane`, `german`, `norwegian`\n - People have unique favorite book genres: `science fiction`, `mystery`, `fantasy`, `biography`, `historical fiction`, `romance`\n - Everyone has a favorite smoothie: `blueberry`, `dragonfruit`, `desert`, `watermelon`, `cherry`, `lime`\n - People use unique phone models: `oneplus 9`, `samsung galaxy s21`, `huawei p50`, `xiaomi mi 11`, `iphone 13`, `google pixel 6`\n\nClues:\n1. Alice is the British person.\n2. There is one house between Eric and the Dragonfruit smoothie lover.\n3. The Chinese is somewhere to the left of Alice.\n4. The person who loves historical fiction books is directly left of the person who loves biography books.\n5. The person who loves biography books is somewhere to the right of Carol.\n6. The person who uses an iPhone 13 is somewhere to the right of the Desert smoothie lover.\n7. The person who loves mystery books is the British person.\n8. Bob is somewhere to the right of the person who uses a OnePlus 9.\n9. Carol is the person who drinks Blueberry smoothies.\n10. There are two houses between the person who loves romance books and the Watermelon smoothie lover.\n11. The person who likes Cherry smoothies is the Swedish person.\n12. The person who loves science fiction books is the person who uses a Google Pixel 6.\n13. The person who drinks Lime smoothies is Eric.\n14. Bob is in the fifth house.\n15. Carol is in the second house.\n16. The Norwegian and Alice are next to each other.\n17. The Swedish person is not in the fifth house.\n18. The German and the Norwegian are next to each other.\n19. The person who loves fantasy books is the Dragonfruit smoothie lover.\n20. The British person is somewhere to the left of Peter.\n21. The person who loves romance books is the person who uses a Samsung Galaxy S21.\n22. Alice is the person who uses a Xiaomi Mi 11.\n23. The person who loves romance books is Eric.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "BookGenre",
        "Smoothie",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "chinese",
          "romance",
          "lime",
          "samsung galaxy s21"
        ],
        [
          "2",
          "Carol",
          "german",
          "science fiction",
          "blueberry",
          "google pixel 6"
        ],
        [
          "3",
          "Arnold",
          "norwegian",
          "fantasy",
          "dragonfruit",
          "oneplus 9"
        ],
        [
          "4",
          "Alice",
          "brit",
          "mystery",
          "watermelon",
          "xiaomi mi 11"
        ],
        [
          "5",
          "Bob",
          "dane",
          "historical fiction",
          "desert",
          "huawei p50"
        ],
        [
          "6",
          "Peter",
          "swede",
          "biography",
          "cherry",
          "iphone 13"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Eric, Carol, Alice, Bob])\nnationalities = EnumSort([swede, brit, chinese, dane, german, norwegian])\nbookGenres = EnumSort([science_fiction, mystery, fantasy, biography, historical_fiction, romance])\nsmoothies = EnumSort([blueberry, dragonfruit, desert, watermelon, cherry, lime])\nphones = EnumSort([oneplus_9, samsung_galaxy_s21, huawei_p50, xiaomi_mi_11, iphone_13, google_pixel_6])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_smoothie = Function([people] -> [smoothies])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is the British person\nThere is one house between Eric and the Dragonfruit smoothie lover\nThe Chinese is somewhere to the left of Alice\nThe person who loves historical fiction books is directly left of the person who loves biography books\nThe person who loves biography books is somewhere to the right of Carol\nThe person who uses an iPhone 13 is somewhere to the right of the Desert smoothie lover\nThe person who loves mystery books is the British person\nBob is somewhere to the right of the person who uses a OnePlus 9\nCarol is the person who drinks Blueberry smoothies\nThere are two houses between the person who loves romance books and the Watermelon smoothie lover\nThe person who likes Cherry smoothies is the Swedish person\nThe person who loves science fiction books is the person who uses a Google Pixel 6\nThe person who drinks Lime smoothies is Eric\nBob is in the fifth house\nCarol is in the second house\nThe Norwegian and Alice are next to each other\nThe Swedish person is not in the fifth house\nThe German and the Norwegian are next to each other\nThe person who loves fantasy books is the Dragonfruit smoothie lover\nThe British person is somewhere to the left of Peter\nThe person who loves romance books is the person who uses a Samsung Galaxy S21\nAlice is the person who uses a Xiaomi Mi 11\nThe person who loves romance books is Eric",
    "queries": "And( And(lives(Eric) == 1, has_nationality(Eric) == chinese, has_bookGenre(Eric) == romance, has_smoothie(Eric) == lime, has_phone(Eric) == samsung_galaxy_s21), And(lives(Carol) == 2, has_nationality(Carol) == german, has_bookGenre(Carol) == science_fiction, has_smoothie(Carol) == blueberry, has_phone(Carol) == google_pixel_6), And(lives(Arnold) == 3, has_nationality(Arnold) == norwegian, has_bookGenre(Arnold) == fantasy, has_smoothie(Arnold) == dragonfruit, has_phone(Arnold) == oneplus_9), And(lives(Alice) == 4, has_nationality(Alice) == brit, has_bookGenre(Alice) == mystery, has_smoothie(Alice) == watermelon, has_phone(Alice) == xiaomi_mi_11), And(lives(Bob) == 5, has_nationality(Bob) == dane, has_bookGenre(Bob) == historical_fiction, has_smoothie(Bob) == desert, has_phone(Bob) == huawei_p50), And(lives(Peter) == 6, has_nationality(Peter) == swede, has_bookGenre(Peter) == biography, has_smoothie(Peter) == cherry, has_phone(Peter) == iphone_13) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-24",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Eric`, `Arnold`, `Peter`, `Alice`\n - Everyone has a unique favorite cigar: `blends`, `prince`, `pall mall`, `blue master`, `dunhill`\n - Everyone has something unique for lunch: `grilled cheese`, `spaghetti`, `stew`, `pizza`, `stir fry`\n - The people are of nationalities: `norwegian`, `swede`, `brit`, `dane`, `german`\n - Each person has an occupation: `teacher`, `lawyer`, `doctor`, `artist`, `engineer`\n - People have unique heights: `average`, `very tall`, `short`, `very short`, `tall`\n\nClues:\n1. The person who smokes Blue Master is the person who is a lawyer.\n2. Alice is the person partial to Pall Mall.\n3. The person partial to Pall Mall is somewhere to the left of the Dunhill smoker.\n4. The German is the person who loves stir fry.\n5. The person who is tall is the person who smokes many unique blends.\n6. The person who is an artist is the person who loves the spaghetti eater.\n7. Peter is the person who is short.\n8. The Dunhill smoker is not in the fourth house.\n9. The person who is very short is the person who smokes Blue Master.\n10. There are two houses between the person who loves the spaghetti eater and the person who loves stir fry.\n11. The person who has an average height is in the second house.\n12. The Prince smoker is the person who is a doctor.\n13. The Swedish person is the person who is an engineer.\n14. Eric is the person who loves stir fry.\n15. There is one house between the British person and the person who loves the stew.\n16. The person who is very tall is the Norwegian.\n17. The Dane is the person who is short.\n18. The person who is very tall is Arnold.\n19. There are two houses between the person who is a pizza lover and the person who is very tall.\n20. The person who is a teacher is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "Food",
        "Nationality",
        "Occupation",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "blends",
          "spaghetti",
          "brit",
          "artist",
          "tall"
        ],
        [
          "2",
          "Alice",
          "pall mall",
          "pizza",
          "swede",
          "engineer",
          "average"
        ],
        [
          "3",
          "Peter",
          "prince",
          "stew",
          "dane",
          "doctor",
          "short"
        ],
        [
          "4",
          "Eric",
          "blue master",
          "stir fry",
          "german",
          "lawyer",
          "very short"
        ],
        [
          "5",
          "Arnold",
          "dunhill",
          "grilled cheese",
          "norwegian",
          "teacher",
          "very tall"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Eric, Arnold, Peter, Alice])\ncigars = EnumSort([blends, prince, pall_mall, blue_master, dunhill])\nfoods = EnumSort([grilled_cheese, spaghetti, stew, pizza, stir_fry])\nnationalities = EnumSort([norwegian, swede, brit, dane, german])\noccupations = EnumSort([teacher, lawyer, doctor, artist, engineer])\nheights = EnumSort([average, very_tall, short, very_short, tall])\nlives = Function([people] -> [int])\nsmokes = Function([people] -> [cigars])\neats = Function([people] -> [foods])\nhas_nationality = Function([people] -> [nationalities])\nhas_occupation = Function([people] -> [occupations])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who smokes Blue Master is the person who is a lawyer\nAlice is the person partial to Pall Mall\nThe person partial to Pall Mall is somewhere to the left of the Dunhill smoker\nThe German is the person who loves stir fry\nThe person who is tall is the person who smokes many unique blends\nThe person who is an artist is the person who loves the spaghetti eater\nPeter is the person who is short\nThe Dunhill smoker is not in the fourth house\nThe person who is very short is the person who smokes Blue Master\nThere are two houses between the person who loves the spaghetti eater and the person who loves stir fry\nThe person who has an average height is in the second house\nThe Prince smoker is the person who is a doctor\nThe Swedish person is the person who is an engineer\nEric is the person who loves stir fry\nThere is one house between the British person and the person who loves the stew\nThe person who is very tall is the Norwegian\nThe Dane is the person who is short\nThe person who is very tall is Arnold\nThere are two houses between the person who is a pizza lover and the person who is very tall\nThe person who is a teacher is not in the third house",
    "queries": "And( And(lives(Bob) == 1, smokes(Bob) == blends, eats(Bob) == spaghetti, has_nationality(Bob) == brit, has_occupation(Bob) == artist, has_height(Bob) == tall), And(lives(Alice) == 2, smokes(Alice) == pall_mall, eats(Alice) == pizza, has_nationality(Alice) == swede, has_occupation(Alice) == engineer, has_height(Alice) == average), And(lives(Peter) == 3, smokes(Peter) == prince, eats(Peter) == stew, has_nationality(Peter) == dane, has_occupation(Peter) == doctor, has_height(Peter) == short), And(lives(Eric) == 4, smokes(Eric) == blue_master, eats(Eric) == stir_fry, has_nationality(Eric) == german, has_occupation(Eric) == lawyer, has_height(Eric) == very_short), And(lives(Arnold) == 5, smokes(Arnold) == dunhill, eats(Arnold) == grilled_cheese, has_nationality(Arnold) == norwegian, has_occupation(Arnold) == teacher, has_height(Arnold) == very_tall) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-2",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Arnold`, `Eric`\n - People own unique car models: `toyota camry`, `tesla model 3`, `honda civic`, `ford f150`\n - People have unique heights: `average`, `very short`, `short`, `tall`\n - The mothers' names in different houses are unique: `Aniya`, `Kailyn`, `Holly`, `Janelle`\n - Each person has a unique level of education: `bachelor`, `high school`, `master`, `associate`\n - The people keep unique animals: `cat`, `fish`, `horse`, `bird`\n\nClues:\n1. The bird keeper is The person whose mother's name is Kailyn.\n2. The person who owns a Ford F-150 is the person who is tall.\n3. The person whose mother's name is Kailyn is not in the third house.\n4. The person with a master's degree is the fish enthusiast.\n5. The person who is very short is somewhere to the left of the cat lover.\n6. The fish enthusiast is the person who is short.\n7. The person whose mother's name is Janelle is directly left of the person who owns a Toyota Camry.\n8. The person whose mother's name is Kailyn is not in the first house.\n9. The person who is short is somewhere to the right of Alice.\n10. The person with a high school diploma is the person who has an average height.\n11. There is one house between the person who is very short and The person whose mother's name is Holly.\n12. The person with a master's degree is somewhere to the right of the person with a bachelor's degree.\n13. The person with a master's degree and Peter are next to each other.\n14. The person who owns a Tesla Model 3 is Eric.\n15. The person who has an average height is somewhere to the right of Arnold.\n16. The person who keeps horses is directly left of the person with a master's degree.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Height",
        "Mother",
        "Education",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "honda civic",
          "very short",
          "Janelle",
          "bachelor",
          "horse"
        ],
        [
          "2",
          "Arnold",
          "toyota camry",
          "short",
          "Aniya",
          "master",
          "fish"
        ],
        [
          "3",
          "Peter",
          "ford f150",
          "tall",
          "Holly",
          "associate",
          "cat"
        ],
        [
          "4",
          "Eric",
          "tesla model 3",
          "average",
          "Kailyn",
          "high school",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Arnold, Eric])\ncarModels = EnumSort([toyota_camry, tesla_model_3, honda_civic, ford_f150])\nheights = EnumSort([average, very_short, short, tall])\nmothersNames = EnumSort([Aniya, Kailyn, Holly, Janelle])\neducationLevels = EnumSort([bachelor, high_school, master, associate])\nanimals = EnumSort([cat, fish, horse, bird])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nhas_height = Function([people] -> [heights])\nmothers_name = Function([people] -> [mothersNames])\nhas_education = Function([people] -> [educationLevels])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The bird keeper is The person whose mother's name is Kailyn\nThe person who owns a Ford F-150 is the person who is tall\nThe person whose mother's name is Kailyn is not in the third house\nThe person with a master's degree is the fish enthusiast\nThe person who is very short is somewhere to the left of the cat lover\nThe fish enthusiast is the person who is short\nThe person whose mother's name is Janelle is directly left of the person who owns a Toyota Camry\nThe person whose mother's name is Kailyn is not in the first house\nThe person who is short is somewhere to the right of Alice\nThe person with a high school diploma is the person who has an average height\nThere is one house between the person who is very short and The person whose mother's name is Holly\nThe person with a master's degree is somewhere to the right of the person with a bachelor's degree\nThe person with a master's degree and Peter are next to each other\nThe person who owns a Tesla Model 3 is Eric\nThe person who has an average height is somewhere to the right of Arnold\nThe person who keeps horses is directly left of the person with a master's degree",
    "queries": "And( And(lives(Alice) == 1, owns_car(Alice) == honda_civic, has_height(Alice) == very_short, mothers_name(Alice) == Janelle, has_education(Alice) == bachelor, has_animal(Alice) == horse), And(lives(Arnold) == 2, owns_car(Arnold) == toyota_camry, has_height(Arnold) == short, mothers_name(Arnold) == Aniya, has_education(Arnold) == master, has_animal(Arnold) == fish), And(lives(Peter) == 3, owns_car(Peter) == ford_f150, has_height(Peter) == tall, mothers_name(Peter) == Holly, has_education(Peter) == associate, has_animal(Peter) == cat), And(lives(Eric) == 4, owns_car(Eric) == tesla_model_3, has_height(Eric) == average, mothers_name(Eric) == Kailyn, has_education(Eric) == high_school, has_animal(Eric) == bird) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-29",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Alice`, `Bob`, `Arnold`\n - The people are of nationalities: `norwegian`, `brit`, `swede`, `dane`, `german`\n - Each person prefers a unique type of vacation: `cruise`, `mountain`, `camping`, `beach`, `city`\n - Each person has a unique level of education: `bachelor`, `master`, `associate`, `doctorate`, `high school`\n - Each person has an occupation: `artist`, `doctor`, `engineer`, `teacher`, `lawyer`\n\nClues:\n1. The person who likes going on cruises is the person who is a lawyer.\n2. The person who loves beach vacations is directly left of Arnold.\n3. The person with a doctorate is somewhere to the left of Bob.\n4. The person with an associate's degree is the person who likes going on cruises.\n5. Peter is not in the first house.\n6. The person who is an artist is Peter.\n7. The person who enjoys camping trips is the person with a master's degree.\n8. The Dane is somewhere to the right of the person who is a doctor.\n9. The person with an associate's degree is directly left of the person who is an engineer.\n10. The person who enjoys camping trips is the British person.\n11. The Norwegian and the person with a bachelor's degree are next to each other.\n12. The person who is an artist is the Swedish person.\n13. Bob is not in the fourth house.\n14. The person who enjoys camping trips is Eric.\n15. Alice is the German.\n16. The person who loves beach vacations is somewhere to the left of the person who prefers city breaks.\n17. The person who enjoys mountain retreats is in the fifth house.\n18. The person who likes going on cruises is somewhere to the right of the person who loves beach vacations.\n19. The person with a bachelor's degree is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Vacation",
        "Education",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "german",
          "beach",
          "doctorate",
          "doctor"
        ],
        [
          "2",
          "Arnold",
          "norwegian",
          "cruise",
          "associate",
          "lawyer"
        ],
        [
          "3",
          "Bob",
          "dane",
          "city",
          "bachelor",
          "engineer"
        ],
        [
          "4",
          "Eric",
          "brit",
          "camping",
          "master",
          "teacher"
        ],
        [
          "5",
          "Peter",
          "swede",
          "mountain",
          "high school",
          "artist"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Alice, Bob, Arnold])\nnationalities = EnumSort([norwegian, brit, swede, dane, german])\nvacations = EnumSort([cruise, mountain, camping, beach, city])\neducation = EnumSort([bachelor, master, associate, doctorate, high_school])\noccupations = EnumSort([artist, doctor, engineer, teacher, lawyer])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_vacation = Function([people] -> [vacations])\nhas_education = Function([people] -> [education])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who likes going on cruises is the person who is a lawyer\nThe person who loves beach vacations is directly left of Arnold\nThe person with a doctorate is somewhere to the left of Bob\nThe person with an associate's degree is the person who likes going on cruises\nPeter is not in the first house\nThe person who is an artist is Peter\nThe person who enjoys camping trips is the person with a master's degree\nThe Dane is somewhere to the right of the person who is a doctor\nThe person with an associate's degree is directly left of the person who is an engineer\nThe person who enjoys camping trips is the British person\nThe Norwegian and the person with a bachelor's degree are next to each other\nThe person who is an artist is the Swedish person\nBob is not in the fourth house\nThe person who enjoys camping trips is Eric\nAlice is the German\nThe person who loves beach vacations is somewhere to the left of the person who prefers city breaks\nThe person who enjoys mountain retreats is in the fifth house\nThe person who likes going on cruises is somewhere to the right of the person who loves beach vacations\nThe person with a bachelor's degree is in the third house",
    "queries": "And( And(lives(Alice) == 1, has_nationality(Alice) == german, has_vacation(Alice) == beach, has_education(Alice) == doctorate, has_occupation(Alice) == doctor), And(lives(Arnold) == 2, has_nationality(Arnold) == norwegian, has_vacation(Arnold) == cruise, has_education(Arnold) == associate, has_occupation(Arnold) == lawyer), And(lives(Bob) == 3, has_nationality(Bob) == dane, has_vacation(Bob) == city, has_education(Bob) == bachelor, has_occupation(Bob) == engineer), And(lives(Eric) == 4, has_nationality(Eric) == brit, has_vacation(Eric) == camping, has_education(Eric) == master, has_occupation(Eric) == teacher), And(lives(Peter) == 5, has_nationality(Peter) == swede, has_vacation(Peter) == mountain, has_education(Peter) == high_school, has_occupation(Peter) == artist) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-13",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Bob`, `Carol`, `Alice`\n - Each person prefers a unique type of vacation: `cruise`, `beach`, `cultural`, `mountain`, `city`, `camping`\n - People have unique hair colors: `gray`, `black`, `brown`, `blonde`, `auburn`, `red`\n - People use unique phone models: `oneplus 9`, `huawei p50`, `xiaomi mi 11`, `iphone 13`, `google pixel 6`, `samsung galaxy s21`\n - Each person has a unique favorite drink: `root beer`, `boba tea`, `milk`, `coffee`, `tea`, `water`\n\nClues:\n1. There is one house between the boba tea drinker and Bob.\n2. There are two houses between the person who uses a Google Pixel 6 and the person who enjoys camping trips.\n3. The person who goes on cultural tours is Carol.\n4. The person who enjoys camping trips is Eric.\n5. The person who uses a Google Pixel 6 is not in the fifth house.\n6. The person who uses a OnePlus 9 and the person who goes on cultural tours are next to each other.\n7. The person who has gray hair and the person who goes on cultural tours are next to each other.\n8. The person who uses a Samsung Galaxy S21 is somewhere to the right of the person who has red hair.\n9. The person who enjoys mountain retreats is somewhere to the right of the person who uses a Xiaomi Mi 11.\n10. The person who uses a OnePlus 9 is Peter.\n11. The person who likes going on cruises is the person who has brown hair.\n12. The coffee drinker is the person who goes on cultural tours.\n13. The person who likes milk is directly left of the person who has black hair.\n14. The person who uses a Xiaomi Mi 11 is directly left of the person who uses a Samsung Galaxy S21.\n15. The person who prefers city breaks is not in the sixth house.\n16. The person who has blonde hair is Arnold.\n17. The person who goes on cultural tours is not in the sixth house.\n18. The one who only drinks water and the person who goes on cultural tours are next to each other.\n19. The tea drinker is somewhere to the left of the person who enjoys mountain retreats.\n20. The person who likes milk is the person who uses a Huawei P50.\n21. The person who has blonde hair is directly left of the person who has gray hair.\n22. Bob is not in the third house.\n23. Peter is the person who prefers city breaks.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "HairColor",
        "PhoneModel",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "beach",
          "blonde",
          "google pixel 6",
          "tea"
        ],
        [
          "2",
          "Peter",
          "city",
          "gray",
          "oneplus 9",
          "water"
        ],
        [
          "3",
          "Carol",
          "cultural",
          "red",
          "xiaomi mi 11",
          "coffee"
        ],
        [
          "4",
          "Eric",
          "camping",
          "auburn",
          "samsung galaxy s21",
          "boba tea"
        ],
        [
          "5",
          "Alice",
          "cruise",
          "brown",
          "huawei p50",
          "milk"
        ],
        [
          "6",
          "Bob",
          "mountain",
          "black",
          "iphone 13",
          "root beer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Bob, Carol, Alice])\nvacations = EnumSort([cruise, beach, cultural, mountain, city, camping])\nhairColors = EnumSort([gray, black, brown, blonde, auburn, red])\nphoneModels = EnumSort([oneplus_9, huawei_p50, xiaomi_mi_11, iphone_13, google_pixel_6, samsung_galaxy_s21])\ndrinks = EnumSort([root_beer, boba_tea, milk, coffee, tea, water])\nlives = Function([people] -> [int])\nprefers_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\nuses_phone = Function([people] -> [phoneModels])\nlikes_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the boba tea drinker and Bob\nThere are two houses between the person who uses a Google Pixel 6 and the person who enjoys camping trips\nThe person who goes on cultural tours is Carol\nThe person who enjoys camping trips is Eric\nThe person who uses a Google Pixel 6 is not in the fifth house\nThe person who uses a OnePlus 9 and the person who goes on cultural tours are next to each other\nThe person who has gray hair and the person who goes on cultural tours are next to each other\nThe person who uses a Samsung Galaxy S21 is somewhere to the right of the person who has red hair\nThe person who enjoys mountain retreats is somewhere to the right of the person who uses a Xiaomi Mi 11\nThe person who uses a OnePlus 9 is Peter\nThe person who likes going on cruises is the person who has brown hair\nThe coffee drinker is the person who goes on cultural tours\nThe person who likes milk is directly left of the person who has black hair\nThe person who uses a Xiaomi Mi 11 is directly left of the person who uses a Samsung Galaxy S21\nThe person who prefers city breaks is not in the sixth house\nThe person who has blonde hair is Arnold\nThe person who goes on cultural tours is not in the sixth house\nThe one who only drinks water and the person who goes on cultural tours are next to each other\nThe tea drinker is somewhere to the left of the person who enjoys mountain retreats\nThe person who likes milk is the person who uses a Huawei P50\nThe person who has blonde hair is directly left of the person who has gray hair\nBob is not in the third house\nPeter is the person who prefers city breaks",
    "queries": "And( And(lives(Arnold) == 1, prefers_vacation(Arnold) == beach, has_hairColor(Arnold) == blonde, uses_phone(Arnold) == google_pixel_6, likes_drink(Arnold) == tea), And(lives(Peter) == 2, prefers_vacation(Peter) == city, has_hairColor(Peter) == gray, uses_phone(Peter) == oneplus_9, likes_drink(Peter) == water), And(lives(Carol) == 3, prefers_vacation(Carol) == cultural, has_hairColor(Carol) == red, uses_phone(Carol) == xiaomi_mi_11, likes_drink(Carol) == coffee), And(lives(Eric) == 4, prefers_vacation(Eric) == camping, has_hairColor(Eric) == auburn, uses_phone(Eric) == samsung_galaxy_s21, likes_drink(Eric) == boba_tea), And(lives(Alice) == 5, prefers_vacation(Alice) == cruise, has_hairColor(Alice) == brown, uses_phone(Alice) == huawei_p50, likes_drink(Alice) == milk), And(lives(Bob) == 6, prefers_vacation(Bob) == mountain, has_hairColor(Bob) == black, uses_phone(Bob) == iphone_13, likes_drink(Bob) == root_beer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-38",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Peter`, `Bob`\n - People have unique hair colors: `black`, `red`, `gray`, `blonde`, `brown`\n - The people are of nationalities: `dane`, `norwegian`, `swede`, `brit`, `german`\n - Each person lives in a unique style of house: `ranch`, `colonial`, `modern`, `craftsman`, `victorian`\n - Each person has a unique birthday month: `sept`, `jan`, `mar`, `april`, `feb`\n - Each person has an occupation: `engineer`, `doctor`, `lawyer`, `teacher`, `artist`\n\nClues:\n1. The person who has brown hair is the person whose birthday is in March.\n2. The person who is a doctor is the Dane.\n3. Eric is the person whose birthday is in March.\n4. The person whose birthday is in February is directly left of the person who is an engineer.\n5. There is one house between the person in a ranch-style home and the German.\n6. Bob is the person whose birthday is in January.\n7. The person who is an artist is the Swedish person.\n8. The Swedish person is in the second house.\n9. Peter is not in the fourth house.\n10. The person who is an artist is somewhere to the left of the person who is a teacher.\n11. The person who is an artist is directly left of the person who has gray hair.\n12. Alice is the person who has red hair.\n13. The person whose birthday is in September is not in the third house.\n14. Arnold is somewhere to the left of the person living in a colonial-style house.\n15. The person in a modern-style house is in the fifth house.\n16. The person who has black hair is the Norwegian.\n17. There are two houses between the person whose birthday is in January and the British person.\n18. The person who has red hair is the person in a Craftsman-style house.\n19. The person who is an engineer and the British person are next to each other.\n20. There is one house between Arnold and the person who has red hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "Nationality",
        "HouseStyle",
        "Birthday",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "black",
          "norwegian",
          "ranch",
          "jan",
          "lawyer"
        ],
        [
          "2",
          "Arnold",
          "blonde",
          "swede",
          "victorian",
          "feb",
          "artist"
        ],
        [
          "3",
          "Peter",
          "gray",
          "german",
          "colonial",
          "april",
          "engineer"
        ],
        [
          "4",
          "Alice",
          "red",
          "brit",
          "craftsman",
          "sept",
          "teacher"
        ],
        [
          "5",
          "Eric",
          "brown",
          "dane",
          "modern",
          "mar",
          "doctor"
        ]
      ]
    },
    "declarations": "people = EnumSort([alice, arnold, eric, peter, bob])\nhairColors = EnumSort([black, red, gray, blonde, brown])\nnationalities = EnumSort([dane, norwegian, swede, brit, german])\nhouseStyles = EnumSort([ranch, colonial, modern, craftsman, victorian])\nmonths = EnumSort([sept, jan, mar, april, feb])\noccupations = EnumSort([engineer, doctor, lawyer, teacher, artist])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_nationality = Function([people] -> [nationalities])\nlives_in_houseStyle = Function([people] -> [houseStyles])\nhas_birthday = Function([people] -> [months])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has brown hair is the person whose birthday is in March\nThe person who is a doctor is the Dane\nEric is the person whose birthday is in March\nThe person whose birthday is in February is directly left of the person who is an engineer\nThere is one house between the person in a ranch-style home and the German\nBob is the person whose birthday is in January\nThe person who is an artist is the Swedish person\nThe Swedish person is in the second house\nPeter is not in the fourth house\nThe person who is an artist is somewhere to the left of the person who is a teacher\nThe person who is an artist is directly left of the person who has gray hair\nAlice is the person who has red hair\nThe person whose birthday is in September is not in the third house\nArnold is somewhere to the left of the person living in a colonial-style house\nThe person in a modern-style house is in the fifth house\nThe person who has black hair is the Norwegian\nThere are two houses between the person whose birthday is in January and the British person\nThe person who has red hair is the person in a Craftsman-style house\nThe person who is an engineer and the British person are next to each other\nThere is one house between Arnold and the person who has red hair",
    "queries": "And( And(lives(bob) == 1, has_hairColor(bob) == black, has_nationality(bob) == norwegian, lives_in_houseStyle(bob) == ranch, has_birthday(bob) == jan, has_occupation(bob) == lawyer), And(lives(arnold) == 2, has_hairColor(arnold) == blonde, has_nationality(arnold) == swede, lives_in_houseStyle(arnold) == victorian, has_birthday(arnold) == feb, has_occupation(arnold) == artist), And(lives(peter) == 3, has_hairColor(peter) == gray, has_nationality(peter) == german, lives_in_houseStyle(peter) == colonial, has_birthday(peter) == april, has_occupation(peter) == engineer), And(lives(alice) == 4, has_hairColor(alice) == red, has_nationality(alice) == brit, lives_in_houseStyle(alice) == craftsman, has_birthday(alice) == sept, has_occupation(alice) == teacher), And(lives(eric) == 5, has_hairColor(eric) == brown, has_nationality(eric) == dane, lives_in_houseStyle(eric) == modern, has_birthday(eric) == mar, has_occupation(eric) == doctor) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-13",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Carol`, `Peter`, `Alice`, `Eric`, `Arnold`\n - They all have a unique favorite flower: `daffodils`, `iris`, `lilies`, `roses`, `tulips`, `carnations`\n - People have unique hair colors: `gray`, `red`, `blonde`, `auburn`, `brown`, `black`\n - Each person has a favorite color: `white`, `blue`, `green`, `purple`, `red`, `yellow`\n - People own unique car models: `tesla model 3`, `ford f150`, `honda civic`, `toyota camry`, `chevrolet silverado`, `bmw 3 series`\n - The mothers' names in different houses are unique: `Janelle`, `Holly`, `Kailyn`, `Sarah`, `Penny`, `Aniya`\n\nClues:\n1. There is one house between Arnold and the person who loves blue.\n2. The person whose mother's name is Janelle is directly left of the person who has auburn hair.\n3. The person who owns a Chevrolet Silverado and the person who owns a BMW 3 Series are next to each other.\n4. Carol is the person who loves a carnations arrangement.\n5. The person who loves the boquet of iris is the person who has gray hair.\n6. The person who loves the rose bouquet is The person whose mother's name is Kailyn.\n7. Bob is the person who loves the boquet of lilies.\n8. The person who loves a bouquet of daffodils is somewhere to the left of the person who owns a Chevrolet Silverado.\n9. Bob is in the third house.\n10. The person who owns a Honda Civic is in the sixth house.\n11. The person who loves the vase of tulips is somewhere to the left of The person whose mother's name is Penny.\n12. The person who has brown hair is in the fourth house.\n13. The person who has brown hair is somewhere to the left of the person who has blonde hair.\n14. The person whose mother's name is Holly is Bob.\n15. The person who owns a Ford F-150 is in the third house.\n16. Eric is directly left of the person who has auburn hair.\n17. The person who owns a Tesla Model 3 is the person who loves yellow.\n18. There are two houses between the person who loves purple and The person whose mother's name is Aniya.\n19. The person who loves purple is in the first house.\n20. The person whose favorite color is green is not in the fourth house.\n21. The person who has gray hair is the person who owns a BMW 3 Series.\n22. The person who has gray hair is somewhere to the left of Alice.\n23. The person whose mother's name is Holly is somewhere to the left of the person who loves the vase of tulips.\n24. The person who has red hair is the person who loves white.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "HairColor",
        "Color",
        "CarModel",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "daffodils",
          "black",
          "purple",
          "toyota camry",
          "Janelle"
        ],
        [
          "2",
          "Carol",
          "carnations",
          "auburn",
          "yellow",
          "tesla model 3",
          "Sarah"
        ],
        [
          "3",
          "Bob",
          "lilies",
          "red",
          "white",
          "ford f150",
          "Holly"
        ],
        [
          "4",
          "Arnold",
          "tulips",
          "brown",
          "red",
          "chevrolet silverado",
          "Aniya"
        ],
        [
          "5",
          "Peter",
          "iris",
          "gray",
          "green",
          "bmw 3 series",
          "Penny"
        ],
        [
          "6",
          "Alice",
          "roses",
          "blonde",
          "blue",
          "honda civic",
          "Kailyn"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Carol, Peter, Alice, Eric, Arnold])\nflowers = EnumSort([daffodils, iris, lilies, roses, tulips, carnations])\nhairColors = EnumSort([gray, red, blonde, auburn, brown, black])\ncolors = EnumSort([white, blue, green, purple, red, yellow])\ncars = EnumSort([tesla_model_3, ford_f150, honda_civic, toyota_camry, chevrolet_silverado, bmw_3_series])\nmothers = EnumSort([Janelle, Holly, Kailyn, Sarah, Penny, Aniya])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_hairColor = Function([people] -> [hairColors])\nhas_color = Function([people] -> [colors])\nowns_car = Function([people] -> [cars])\nmother_name = Function([people] -> [mothers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between Arnold and the person who loves blue\nThe person whose mother's name is Janelle is directly left of the person who has auburn hair\nThe person who owns a Chevrolet Silverado and the person who owns a BMW 3 Series are next to each other\nCarol is the person who loves a carnations arrangement\nThe person who loves the boquet of iris is the person who has gray hair\nThe person who loves the rose bouquet is The person whose mother's name is Kailyn\nBob is the person who loves the boquet of lilies\nThe person who loves a bouquet of daffodils is somewhere to the left of the person who owns a Chevrolet Silverado\nBob is in the third house\nThe person who owns a Honda Civic is in the sixth house\nThe person who loves the vase of tulips is somewhere to the left of The person whose mother's name is Penny\nThe person who has brown hair is in the fourth house\nThe person who has brown hair is somewhere to the left of the person who has blonde hair\nThe person whose mother's name is Holly is Bob\nThe person who owns a Ford F-150 is in the third house\nEric is directly left of the person who has auburn hair\nThe person who owns a Tesla Model 3 is the person who loves yellow\nThere are two houses between the person who loves purple and The person whose mother's name is Aniya\nThe person who loves purple is in the first house\nThe person whose favorite color is green is not in the fourth house\nThe person who has gray hair is the person who owns a BMW 3 Series\nThe person who has gray hair is somewhere to the left of Alice\nThe person whose mother's name is Holly is somewhere to the left of the person who loves the vase of tulips\nThe person who has red hair is the person who loves white",
    "queries": "And( And(lives(Eric) == 1, has_flower(Eric) == daffodils, has_hairColor(Eric) == black, has_color(Eric) == purple, owns_car(Eric) == toyota_camry, mother_name(Eric) == Janelle), And(lives(Carol) == 2, has_flower(Carol) == carnations, has_hairColor(Carol) == auburn, has_color(Carol) == yellow, owns_car(Carol) == tesla_model_3, mother_name(Carol) == Sarah), And(lives(Bob) == 3, has_flower(Bob) == lilies, has_hairColor(Bob) == red, has_color(Bob) == white, owns_car(Bob) == ford_f150, mother_name(Bob) == Holly), And(lives(Arnold) == 4, has_flower(Arnold) == tulips, has_hairColor(Arnold) == brown, has_color(Arnold) == red, owns_car(Arnold) == chevrolet_silverado, mother_name(Arnold) == Aniya), And(lives(Peter) == 5, has_flower(Peter) == iris, has_hairColor(Peter) == gray, has_color(Peter) == green, owns_car(Peter) == bmw_3_series, mother_name(Peter) == Penny), And(lives(Alice) == 6, has_flower(Alice) == roses, has_hairColor(Alice) == blonde, has_color(Alice) == blue, owns_car(Alice) == honda_civic, mother_name(Alice) == Kailyn) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-14",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Peter`, `Alice`, `Arnold`, `Carol`\n - People own unique car models: `ford f150`, `honda civic`, `toyota camry`, `tesla model 3`, `chevrolet silverado`, `bmw 3 series`\n - The mothers' names in different houses are unique: `Sarah`, `Penny`, `Holly`, `Aniya`, `Kailyn`, `Janelle`\n - Each person has a unique hobby: `photography`, `cooking`, `knitting`, `gardening`, `woodworking`, `painting`\n\nClues:\n1. The person who owns a Toyota Camry is in the sixth house.\n2. Carol is the photography enthusiast.\n3. The person who owns a Chevrolet Silverado is The person whose mother's name is Aniya.\n4. The person who owns a Chevrolet Silverado is not in the second house.\n5. The person who owns a Ford F-150 is The person whose mother's name is Sarah.\n6. The person who owns a BMW 3 Series is Bob.\n7. The person whose mother's name is Kailyn is in the sixth house.\n8. Eric is directly left of the person who enjoys knitting.\n9. There is one house between The person whose mother's name is Sarah and the person who owns a Toyota Camry.\n10. The person whose mother's name is Penny is somewhere to the right of the person who enjoys knitting.\n11. The person whose mother's name is Aniya is somewhere to the right of the person who owns a Honda Civic.\n12. Alice is somewhere to the right of the person who owns a Ford F-150.\n13. Eric is the person who enjoys gardening.\n14. The woodworking hobbyist is somewhere to the left of the person who enjoys knitting.\n15. There is one house between The person whose mother's name is Sarah and the person who loves cooking.\n16. The person who owns a Honda Civic is Arnold.\n17. The person whose mother's name is Holly is directly left of the person who enjoys knitting.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Mother",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "honda civic",
          "Janelle",
          "woodworking"
        ],
        [
          "2",
          "Eric",
          "tesla model 3",
          "Holly",
          "gardening"
        ],
        [
          "3",
          "Peter",
          "chevrolet silverado",
          "Aniya",
          "knitting"
        ],
        [
          "4",
          "Carol",
          "ford f150",
          "Sarah",
          "photography"
        ],
        [
          "5",
          "Bob",
          "bmw 3 series",
          "Penny",
          "painting"
        ],
        [
          "6",
          "Alice",
          "toyota camry",
          "Kailyn",
          "cooking"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Peter, Alice, Arnold, Carol])\ncarModels = EnumSort([ford_f150, honda_civic, toyota_camry, tesla_model_3, chevrolet_silverado, bmw_3_series])\nmothersNames = EnumSort([Sarah, Penny, Holly, Aniya, Kailyn, Janelle])\nhobbies = EnumSort([photography, cooking, knitting, gardening, woodworking, painting])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nhas_mother = Function([people] -> [mothersNames])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who owns a Toyota Camry is in the sixth house\nCarol is the photography enthusiast\nThe person who owns a Chevrolet Silverado is The person whose mother's name is Aniya\nThe person who owns a Chevrolet Silverado is not in the second house\nThe person who owns a Ford F-150 is The person whose mother's name is Sarah\nThe person who owns a BMW 3 Series is Bob\nThe person whose mother's name is Kailyn is in the sixth house\nEric is directly left of the person who enjoys knitting\nThere is one house between The person whose mother's name is Sarah and the person who owns a Toyota Camry\nThe person whose mother's name is Penny is somewhere to the right of the person who enjoys knitting\nThe person whose mother's name is Aniya is somewhere to the right of the person who owns a Honda Civic\nAlice is somewhere to the right of the person who owns a Ford F-150\nEric is the person who enjoys gardening\nThe woodworking hobbyist is somewhere to the left of the person who enjoys knitting\nThere is one house between The person whose mother's name is Sarah and the person who loves cooking\nThe person who owns a Honda Civic is Arnold\nThe person whose mother's name is Holly is directly left of the person who enjoys knitting",
    "queries": "And( And(lives(Arnold) == 1, owns_car(Arnold) == honda_civic, has_mother(Arnold) == Janelle, has_hobby(Arnold) == woodworking), And(lives(Eric) == 2, owns_car(Eric) == tesla_model_3, has_mother(Eric) == Holly, has_hobby(Eric) == gardening), And(lives(Peter) == 3, owns_car(Peter) == chevrolet_silverado, has_mother(Peter) == Aniya, has_hobby(Peter) == knitting), And(lives(Carol) == 4, owns_car(Carol) == ford_f150, has_mother(Carol) == Sarah, has_hobby(Carol) == photography), And(lives(Bob) == 5, owns_car(Bob) == bmw_3_series, has_mother(Bob) == Penny, has_hobby(Bob) == painting), And(lives(Alice) == 6, owns_car(Alice) == toyota_camry, has_mother(Alice) == Kailyn, has_hobby(Alice) == cooking) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-36",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Peter`, `Bob`, `Eric`, `Alice`\n - People have unique hair colors: `gray`, `brown`, `black`, `red`, `blonde`\n - Each person prefers a unique type of vacation: `city`, `mountain`, `camping`, `cruise`, `beach`\n - They all have a unique favorite flower: `roses`, `tulips`, `carnations`, `lilies`, `daffodils`\n - Everyone has something unique for lunch: `stew`, `stir fry`, `spaghetti`, `pizza`, `grilled cheese`\n - Each person has a unique hobby: `painting`, `photography`, `gardening`, `knitting`, `cooking`\n\nClues:\n1. The person who loves the stew is directly left of the person who loves the vase of tulips.\n2. The person who enjoys camping trips is the person who loves eating grilled cheese.\n3. The person who has black hair is somewhere to the left of Bob.\n4. The photography enthusiast is the person who has gray hair.\n5. The person who is a pizza lover is the person who likes going on cruises.\n6. Alice is the person who prefers city breaks.\n7. The person who loves beach vacations is directly left of the person who paints as a hobby.\n8. The person who loves the spaghetti eater is Arnold.\n9. Bob is in the fifth house.\n10. The person who loves the boquet of lilies is in the third house.\n11. The person who enjoys knitting is in the fourth house.\n12. The person who has brown hair is directly left of the person who paints as a hobby.\n13. There are two houses between the person who likes going on cruises and the person who enjoys knitting.\n14. The person who has red hair is the person who loves the spaghetti eater.\n15. The person who loves a carnations arrangement is not in the second house.\n16. Eric is somewhere to the left of the person who enjoys gardening.\n17. The photography enthusiast is the person who loves the stew.\n18. Eric is the person who loves a bouquet of daffodils.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "Vacation",
        "Flower",
        "Food",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "black",
          "cruise",
          "daffodils",
          "pizza",
          "cooking"
        ],
        [
          "2",
          "Arnold",
          "red",
          "mountain",
          "roses",
          "spaghetti",
          "gardening"
        ],
        [
          "3",
          "Alice",
          "gray",
          "city",
          "lilies",
          "stew",
          "photography"
        ],
        [
          "4",
          "Peter",
          "brown",
          "beach",
          "tulips",
          "stir fry",
          "knitting"
        ],
        [
          "5",
          "Bob",
          "blonde",
          "camping",
          "carnations",
          "grilled cheese",
          "painting"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Peter, Bob, Eric, Alice])\nhairColors = EnumSort([gray, brown, black, red, blonde])\nvacations = EnumSort([city, mountain, camping, cruise, beach])\nflowers = EnumSort([roses, tulips, carnations, lilies, daffodils])\nfoods = EnumSort([stew, stir_fry, spaghetti, pizza, grilled_cheese])\nhobbies = EnumSort([painting, photography, gardening, knitting, cooking])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_vacation = Function([people] -> [vacations])\nhas_flower = Function([people] -> [flowers])\nhas_food = Function([people] -> [foods])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves the stew is directly left of the person who loves the vase of tulips\nThe person who enjoys camping trips is the person who loves eating grilled cheese\nThe person who has black hair is somewhere to the left of Bob\nThe photography enthusiast is the person who has gray hair\nThe person who is a pizza lover is the person who likes going on cruises\nAlice is the person who prefers city breaks\nThe person who loves beach vacations is directly left of the person who paints as a hobby\nThe person who loves the spaghetti eater is Arnold\nBob is in the fifth house\nThe person who loves the boquet of lilies is in the third house\nThe person who enjoys knitting is in the fourth house\nThe person who has brown hair is directly left of the person who paints as a hobby\nThere are two houses between the person who likes going on cruises and the person who enjoys knitting\nThe person who has red hair is the person who loves the spaghetti eater\nThe person who loves a carnations arrangement is not in the second house\nEric is somewhere to the left of the person who enjoys gardening\nThe photography enthusiast is the person who loves the stew\nEric is the person who loves a bouquet of daffodils",
    "queries": "And( And(lives(Eric) == 1, has_hairColor(Eric) == black, has_vacation(Eric) == cruise, has_flower(Eric) == daffodils, has_food(Eric) == pizza, has_hobby(Eric) == cooking), And(lives(Arnold) == 2, has_hairColor(Arnold) == red, has_vacation(Arnold) == mountain, has_flower(Arnold) == roses, has_food(Arnold) == spaghetti, has_hobby(Arnold) == gardening), And(lives(Alice) == 3, has_hairColor(Alice) == gray, has_vacation(Alice) == city, has_flower(Alice) == lilies, has_food(Alice) == stew, has_hobby(Alice) == photography), And(lives(Peter) == 4, has_hairColor(Peter) == brown, has_vacation(Peter) == beach, has_flower(Peter) == tulips, has_food(Peter) == stir_fry, has_hobby(Peter) == knitting), And(lives(Bob) == 5, has_hairColor(Bob) == blonde, has_vacation(Bob) == camping, has_flower(Bob) == carnations, has_food(Bob) == grilled_cheese, has_hobby(Bob) == painting) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-39",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Alice`, `Eric`, `Peter`, `Carol`\n - People have unique favorite sports: `volleyball`, `soccer`, `basketball`, `baseball`, `swimming`, `tennis`\n - Each person has a unique hobby: `gardening`, `cooking`, `painting`, `woodworking`, `knitting`, `photography`\n - Each mother is accompanied by their child: `Bella`, `Meredith`, `Alice`, `Samantha`, `Fred`, `Timothy`\n - Each person has a unique birthday month: `feb`, `jan`, `mar`, `may`, `sept`, `april`\n - Everyone has something unique for lunch: `stir fry`, `grilled cheese`, `pizza`, `spaghetti`, `stew`, `soup`\n\nClues:\n1. The person who loves soccer is somewhere to the right of Eric.\n2. The person who paints as a hobby is somewhere to the left of the woodworking hobbyist.\n3. The person whose birthday is in February is not in the third house.\n4. The person who is the mother of Timothy is directly left of Arnold.\n5. The person who loves cooking is somewhere to the left of the person's child is named Fred.\n6. Alice is the person who paints as a hobby.\n7. The person's child is named Alice is the person who loves cooking.\n8. The person whose birthday is in March is the person's child is named Samantha.\n9. The person who loves the soup is the person whose birthday is in May.\n10. Carol is somewhere to the right of the person whose birthday is in May.\n11. The person whose birthday is in March and the person who is a pizza lover are next to each other.\n12. The person whose birthday is in February is not in the fourth house.\n13. There are two houses between the person who loves baseball and the person who loves the stew.\n14. The person whose birthday is in May is somewhere to the left of the person who loves volleyball.\n15. The person whose birthday is in January is somewhere to the right of Arnold.\n16. The person who loves cooking is not in the third house.\n17. The person who enjoys knitting is the person whose birthday is in September.\n18. The person who enjoys gardening is the person's child is named Meredith.\n19. The person who is a pizza lover is the person who loves swimming.\n20. There is one house between the person who loves basketball and the person whose birthday is in May.\n21. The person who loves the soup is directly left of the person who loves the spaghetti eater.\n22. The person who loves the stew is the person's child is named Bella.\n23. The person who enjoys knitting is somewhere to the left of the person who loves the soup.\n24. Bob is somewhere to the left of the person who loves the stew.\n25. Arnold is the person who loves stir fry.\n26. The woodworking hobbyist is directly left of the person who loves the soup.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Hobby",
        "Children",
        "Birthday",
        "Food"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "baseball",
          "painting",
          "Samantha",
          "mar",
          "grilled cheese"
        ],
        [
          "2",
          "Bob",
          "swimming",
          "knitting",
          "Timothy",
          "sept",
          "pizza"
        ],
        [
          "3",
          "Arnold",
          "basketball",
          "gardening",
          "Meredith",
          "april",
          "stir fry"
        ],
        [
          "4",
          "Eric",
          "tennis",
          "woodworking",
          "Bella",
          "jan",
          "stew"
        ],
        [
          "5",
          "Peter",
          "soccer",
          "cooking",
          "Alice",
          "may",
          "soup"
        ],
        [
          "6",
          "Carol",
          "volleyball",
          "photography",
          "Fred",
          "feb",
          "spaghetti"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Alice, Eric, Peter, Carol])\nsports = EnumSort([volleyball, soccer, basketball, baseball, swimming, tennis])\nhobbies = EnumSort([gardening, cooking, painting, woodworking, knitting, photography])\nchildren = EnumSort([Bella, Meredith, AliceChild, Samantha, Fred, Timothy])\nmonths = EnumSort([feb, jan, mar, may, sept, april])\nfoods = EnumSort([stir_fry, grilled_cheese, pizza, spaghetti, stew, soup])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_hobby = Function([people] -> [hobbies])\nhas_child = Function([people] -> [children])\nhas_month = Function([people] -> [months])\nhas_food = Function([people] -> [foods])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves soccer is somewhere to the right of Eric\nThe person who paints as a hobby is somewhere to the left of the woodworking hobbyist\nThe person whose birthday is in February is not in the third house\nThe person who is the mother of Timothy is directly left of Arnold\nThe person who loves cooking is somewhere to the left of the person's child is named Fred\nAlice is the person who paints as a hobby\nThe person's child is named Alice is the person who loves cooking\nThe person whose birthday is in March is the person's child is named Samantha\nThe person who loves the soup is the person whose birthday is in May\nCarol is somewhere to the right of the person whose birthday is in May\nThe person whose birthday is in March and the person who is a pizza lover are next to each other\nThe person whose birthday is in February is not in the fourth house\nThere are two houses between the person who loves baseball and the person who loves the stew\nThe person whose birthday is in May is somewhere to the left of the person who loves volleyball\nThe person whose birthday is in January is somewhere to the right of Arnold\nThe person who loves cooking is not in the third house\nThe person who enjoys knitting is the person whose birthday is in September\nThe person who enjoys gardening is the person's child is named Meredith\nThe person who is a pizza lover is the person who loves swimming\nThere is one house between the person who loves basketball and the person whose birthday is in May\nThe person who loves the soup is directly left of the person who loves the spaghetti eater\nThe person who loves the stew is the person's child is named Bella\nThe person who enjoys knitting is somewhere to the left of the person who loves the soup\nBob is somewhere to the left of the person who loves the stew\nArnold is the person who loves stir fry\nThe woodworking hobbyist is directly left of the person who loves the soup",
    "queries": "And( And(lives(Alice) == 1, has_sport(Alice) == baseball, has_hobby(Alice) == painting, has_child(Alice) == Samantha, has_month(Alice) == mar, has_food(Alice) == grilled_cheese), And(lives(Bob) == 2, has_sport(Bob) == swimming, has_hobby(Bob) == knitting, has_child(Bob) == Timothy, has_month(Bob) == sept, has_food(Bob) == pizza), And(lives(Arnold) == 3, has_sport(Arnold) == basketball, has_hobby(Arnold) == gardening, has_child(Arnold) == Meredith, has_month(Arnold) == april, has_food(Arnold) == stir_fry), And(lives(Eric) == 4, has_sport(Eric) == tennis, has_hobby(Eric) == woodworking, has_child(Eric) == Bella, has_month(Eric) == jan, has_food(Eric) == stew), And(lives(Peter) == 5, has_sport(Peter) == soccer, has_hobby(Peter) == cooking, has_child(Peter) == AliceChild, has_month(Peter) == may, has_food(Peter) == soup), And(lives(Carol) == 6, has_sport(Carol) == volleyball, has_hobby(Carol) == photography, has_child(Carol) == Fred, has_month(Carol) == feb, has_food(Carol) == spaghetti) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-20",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Eric`, `Peter`, `Arnold`\n - People have unique heights: `average`, `short`, `very tall`, `very short`, `tall`\n - Each person has an occupation: `engineer`, `artist`, `doctor`, `lawyer`, `teacher`\n - The mothers' names in different houses are unique: `Janelle`, `Aniya`, `Holly`, `Penny`, `Kailyn`\n - Each person has a unique birthday month: `mar`, `april`, `jan`, `feb`, `sept`\n - Each person has a unique type of pet: `hamster`, `fish`, `bird`, `dog`, `cat`\n\nClues:\n1. The person who is a doctor is somewhere to the left of the person with a pet hamster.\n2. Arnold is in the first house.\n3. The person who is an engineer is the person who owns a dog.\n4. The person whose birthday is in March is somewhere to the left of Peter.\n5. The person who is an artist is in the third house.\n6. The person who is a lawyer is in the fifth house.\n7. The person who has a cat is The person whose mother's name is Kailyn.\n8. Alice is directly left of Eric.\n9. The person whose birthday is in February is directly left of The person whose mother's name is Holly.\n10. The person whose birthday is in April is somewhere to the right of the person who is a teacher.\n11. The person whose birthday is in February is The person whose mother's name is Kailyn.\n12. Peter is in the fourth house.\n13. The person with an aquarium of fish is the person who is very short.\n14. The person whose mother's name is Kailyn and the person with an aquarium of fish are next to each other.\n15. The person who is short is directly left of the person who is a lawyer.\n16. The person whose mother's name is Aniya and the person who is a lawyer are next to each other.\n17. The person whose birthday is in January is The person whose mother's name is Penny.\n18. The person who has an average height is the person who keeps a pet bird.\n19. The person who is tall is the person who is an engineer.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Occupation",
        "Mother",
        "Birthday",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "tall",
          "engineer",
          "Penny",
          "jan",
          "dog"
        ],
        [
          "2",
          "Alice",
          "very tall",
          "doctor",
          "Kailyn",
          "feb",
          "cat"
        ],
        [
          "3",
          "Eric",
          "very short",
          "artist",
          "Holly",
          "mar",
          "fish"
        ],
        [
          "4",
          "Peter",
          "short",
          "teacher",
          "Aniya",
          "sept",
          "hamster"
        ],
        [
          "5",
          "Bob",
          "average",
          "lawyer",
          "Janelle",
          "april",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Eric, Peter, Arnold])\nheights = EnumSort([average, short, very_tall, very_short, tall])\noccupations = EnumSort([engineer, artist, doctor, lawyer, teacher])\nmothers_names = EnumSort([Janelle, Aniya, Holly, Penny, Kailyn])\nmonths = EnumSort([mar, april, jan, feb, sept])\npets = EnumSort([hamster, fish, bird, dog, cat])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_occupation = Function([people] -> [occupations])\nhas_mother_name = Function([people] -> [mothers_names])\nhas_birthday_month = Function([people] -> [months])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who is a doctor is somewhere to the left of the person with a pet hamster\nArnold is in the first house\nThe person who is an engineer is the person who owns a dog\nThe person whose birthday is in March is somewhere to the left of Peter\nThe person who is an artist is in the third house\nThe person who is a lawyer is in the fifth house\nThe person who has a cat is The person whose mother's name is Kailyn\nAlice is directly left of Eric\nThe person whose birthday is in February is directly left of The person whose mother's name is Holly\nThe person whose birthday is in April is somewhere to the right of the person who is a teacher\nThe person whose birthday is in February is The person whose mother's name is Kailyn\nPeter is in the fourth house\nThe person with an aquarium of fish is the person who is very short\nThe person whose mother's name is Kailyn and the person with an aquarium of fish are next to each other\nThe person who is short is directly left of the person who is a lawyer\nThe person whose mother's name is Aniya and the person who is a lawyer are next to each other\nThe person whose birthday is in January is The person whose mother's name is Penny\nThe person who has an average height is the person who keeps a pet bird\nThe person who is tall is the person who is an engineer",
    "queries": "And( And(lives(Arnold) == 1, has_height(Arnold) == tall, has_occupation(Arnold) == engineer, has_mother_name(Arnold) == Penny, has_birthday_month(Arnold) == jan, has_pet(Arnold) == dog), And(lives(Alice) == 2, has_height(Alice) == very_tall, has_occupation(Alice) == doctor, has_mother_name(Alice) == Kailyn, has_birthday_month(Alice) == feb, has_pet(Alice) == cat), And(lives(Eric) == 3, has_height(Eric) == very_short, has_occupation(Eric) == artist, has_mother_name(Eric) == Holly, has_birthday_month(Eric) == mar, has_pet(Eric) == fish), And(lives(Peter) == 4, has_height(Peter) == short, has_occupation(Peter) == teacher, has_mother_name(Peter) == Aniya, has_birthday_month(Peter) == sept, has_pet(Peter) == hamster), And(lives(Bob) == 5, has_height(Bob) == average, has_occupation(Bob) == lawyer, has_mother_name(Bob) == Janelle, has_birthday_month(Bob) == april, has_pet(Bob) == bird) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-10",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Peter`, `Bob`, `Carol`\n - Everyone has a favorite smoothie: `cherry`, `blueberry`, `desert`, `lime`, `dragonfruit`, `watermelon`\n - People have unique favorite music genres: `rock`, `classical`, `jazz`, `pop`, `country`, `hip hop`\n - People have unique favorite book genres: `science fiction`, `romance`, `historical fiction`, `fantasy`, `mystery`, `biography`\n - Each person has a favorite color: `yellow`, `white`, `green`, `blue`, `red`, `purple`\n\nClues:\n1. The person who loves purple and the Dragonfruit smoothie lover are next to each other.\n2. The person who loves classical music is in the fifth house.\n3. Eric is somewhere to the left of the person who loves classical music.\n4. The person who loves hip-hop music is directly left of the Desert smoothie lover.\n5. The person who loves yellow is the person who loves science fiction books.\n6. Arnold is the person who loves rock music.\n7. Carol is the person who likes Cherry smoothies.\n8. There are two houses between the person who loves jazz music and the Watermelon smoothie lover.\n9. The person whose favorite color is green is somewhere to the right of the person who loves jazz music.\n10. The person who drinks Blueberry smoothies is directly left of the Watermelon smoothie lover.\n11. Arnold is somewhere to the left of the Watermelon smoothie lover.\n12. Bob is somewhere to the left of the person who loves yellow.\n13. Bob is the person who loves historical fiction books.\n14. The person who loves biography books is the person who loves pop music.\n15. The person who loves romance books is in the fifth house.\n16. There are two houses between Bob and the person who loves mystery books.\n17. The person who loves white is the person who loves historical fiction books.\n18. Peter is somewhere to the left of the person who loves blue.\n19. There is one house between the person who loves biography books and the person who loves yellow.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "MusicGenre",
        "BookGenre",
        "Color"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "cherry",
          "hip hop",
          "fantasy",
          "red"
        ],
        [
          "2",
          "Eric",
          "desert",
          "pop",
          "biography",
          "purple"
        ],
        [
          "3",
          "Bob",
          "dragonfruit",
          "jazz",
          "historical fiction",
          "white"
        ],
        [
          "4",
          "Arnold",
          "lime",
          "rock",
          "science fiction",
          "yellow"
        ],
        [
          "5",
          "Peter",
          "blueberry",
          "classical",
          "romance",
          "green"
        ],
        [
          "6",
          "Alice",
          "watermelon",
          "country",
          "mystery",
          "blue"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Peter, Bob, Carol])\nsmoothies = EnumSort([cherry, blueberry, desert, lime, dragonfruit, watermelon])\nmusicGenres = EnumSort([rock, classical, jazz, pop, country, hip_hop])\nbookGenres = EnumSort([science_fiction, romance, historical_fiction, fantasy, mystery, biography])\ncolors = EnumSort([yellow, white, green, blue, red, purple])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_color = Function([people] -> [colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves purple and the Dragonfruit smoothie lover are next to each other\nThe person who loves classical music is in the fifth house\nEric is somewhere to the left of the person who loves classical music\nThe person who loves hip-hop music is directly left of the Desert smoothie lover\nThe person who loves yellow is the person who loves science fiction books\nArnold is the person who loves rock music\nCarol is the person who likes Cherry smoothies\nThere are two houses between the person who loves jazz music and the Watermelon smoothie lover\nThe person whose favorite color is green is somewhere to the right of the person who loves jazz music\nThe person who drinks Blueberry smoothies is directly left of the Watermelon smoothie lover\nArnold is somewhere to the left of the Watermelon smoothie lover\nBob is somewhere to the left of the person who loves yellow\nBob is the person who loves historical fiction books\nThe person who loves biography books is the person who loves pop music\nThe person who loves romance books is in the fifth house\nThere are two houses between Bob and the person who loves mystery books\nThe person who loves white is the person who loves historical fiction books\nPeter is somewhere to the left of the person who loves blue\nThere is one house between the person who loves biography books and the person who loves yellow",
    "queries": "And( And(lives(Carol) == 1, has_smoothie(Carol) == cherry, has_musicGenre(Carol) == hip_hop, has_bookGenre(Carol) == fantasy, has_color(Carol) == red), And(lives(Eric) == 2, has_smoothie(Eric) == desert, has_musicGenre(Eric) == pop, has_bookGenre(Eric) == biography, has_color(Eric) == purple), And(lives(Bob) == 3, has_smoothie(Bob) == dragonfruit, has_musicGenre(Bob) == jazz, has_bookGenre(Bob) == historical_fiction, has_color(Bob) == white), And(lives(Arnold) == 4, has_smoothie(Arnold) == lime, has_musicGenre(Arnold) == rock, has_bookGenre(Arnold) == science_fiction, has_color(Arnold) == yellow), And(lives(Peter) == 5, has_smoothie(Peter) == blueberry, has_musicGenre(Peter) == classical, has_bookGenre(Peter) == romance, has_color(Peter) == green), And(lives(Alice) == 6, has_smoothie(Alice) == watermelon, has_musicGenre(Alice) == country, has_bookGenre(Alice) == mystery, has_color(Alice) == blue) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-16",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Alice`, `Peter`, `Eric`\n - People own unique car models: `toyota camry`, `bmw 3 series`, `ford f150`, `honda civic`, `tesla model 3`\n - Each person has a unique favorite drink: `tea`, `milk`, `water`, `root beer`, `coffee`\n - The people are of nationalities: `dane`, `brit`, `german`, `norwegian`, `swede`\n - People use unique phone models: `oneplus 9`, `iphone 13`, `google pixel 6`, `samsung galaxy s21`, `huawei p50`\n\nClues:\n1. The person who uses a Google Pixel 6 is somewhere to the right of the Dane.\n2. The person who uses a Google Pixel 6 is somewhere to the right of the root beer lover.\n3. The person who owns a Tesla Model 3 is the British person.\n4. The person who owns a Ford F-150 is the Dane.\n5. Eric is the tea drinker.\n6. The British person is directly left of the person who owns a Honda Civic.\n7. Peter is somewhere to the right of the person who likes milk.\n8. Bob is directly left of the Swedish person.\n9. The person who uses an iPhone 13 is somewhere to the right of the person who uses a Huawei P50.\n10. Arnold is the person who uses a Google Pixel 6.\n11. Eric is not in the third house.\n12. The person who owns a BMW 3 Series is somewhere to the right of the person who uses a Samsung Galaxy S21.\n13. The person who owns a Tesla Model 3 is not in the first house.\n14. Alice is somewhere to the left of the person who owns a Ford F-150.\n15. The person who uses a OnePlus 9 is somewhere to the right of the person who uses a Samsung Galaxy S21.\n16. The German is somewhere to the right of the person who owns a Tesla Model 3.\n17. Eric is not in the fourth house.\n18. Peter is directly left of the person who uses a Samsung Galaxy S21.\n19. The coffee drinker is Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Drink",
        "Nationality",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "toyota camry",
          "milk",
          "norwegian",
          "huawei p50"
        ],
        [
          "2",
          "Peter",
          "ford f150",
          "root beer",
          "dane",
          "iphone 13"
        ],
        [
          "3",
          "Bob",
          "tesla model 3",
          "coffee",
          "brit",
          "samsung galaxy s21"
        ],
        [
          "4",
          "Arnold",
          "honda civic",
          "water",
          "swede",
          "google pixel 6"
        ],
        [
          "5",
          "Eric",
          "bmw 3 series",
          "tea",
          "german",
          "oneplus 9"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Alice, Peter, Eric])\ncarModels = EnumSort([toyota_camry, bmw_3_series, ford_f150, honda_civic, tesla_model_3])\ndrinks = EnumSort([tea, milk, water, root_beer, coffee])\nnationalities = EnumSort([dane, brit, german, norwegian, swede])\nphoneModels = EnumSort([oneplus_9, iphone_13, google_pixel_6, samsung_galaxy_s21, huawei_p50])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nhas_drink = Function([people] -> [drinks])\nhas_nationality = Function([people] -> [nationalities])\nuses_phone = Function([people] -> [phoneModels])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who uses a Google Pixel 6 is somewhere to the right of the Dane\nThe person who uses a Google Pixel 6 is somewhere to the right of the root beer lover\nThe person who owns a Tesla Model 3 is the British person\nThe person who owns a Ford F-150 is the Dane\nEric is the tea drinker\nThe British person is directly left of the person who owns a Honda Civic\nPeter is somewhere to the right of the person who likes milk\nBob is directly left of the Swedish person\nThe person who uses an iPhone 13 is somewhere to the right of the person who uses a Huawei P50\nArnold is the person who uses a Google Pixel 6\nEric is not in the third house\nThe person who owns a BMW 3 Series is somewhere to the right of the person who uses a Samsung Galaxy S21\nThe person who owns a Tesla Model 3 is not in the first house\nAlice is somewhere to the left of the person who owns a Ford F-150\nThe person who uses a OnePlus 9 is somewhere to the right of the person who uses a Samsung Galaxy S21\nThe German is somewhere to the right of the person who owns a Tesla Model 3\nEric is not in the fourth house\nPeter is directly left of the person who uses a Samsung Galaxy S21\nThe coffee drinker is Bob",
    "queries": "And( And( lives(Alice) == 1, owns_car(Alice) == toyota_camry, has_drink(Alice) == milk, has_nationality(Alice) == norwegian, uses_phone(Alice) == huawei_p50 ), And( lives(Peter) == 2, owns_car(Peter) == ford_f150, has_drink(Peter) == root_beer, has_nationality(Peter) == dane, uses_phone(Peter) == iphone_13 ), And( lives(Bob) == 3, owns_car(Bob) == tesla_model_3, has_drink(Bob) == coffee, has_nationality(Bob) == brit, uses_phone(Bob) == samsung_galaxy_s21 ), And( lives(Arnold) == 4, owns_car(Arnold) == honda_civic, has_drink(Arnold) == water, has_nationality(Arnold) == swede, uses_phone(Arnold) == google_pixel_6 ), And( lives(Eric) == 5, owns_car(Eric) == bmw_3_series, has_drink(Eric) == tea, has_nationality(Eric) == german, uses_phone(Eric) == oneplus_9 ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-19",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Eric`, `Bob`, `Peter`\n - Each person lives in a unique style of house: `victorian`, `colonial`, `ranch`, `modern`, `craftsman`\n - People use unique phone models: `google pixel 6`, `iphone 13`, `oneplus 9`, `samsung galaxy s21`, `huawei p50`\n - Everyone has a unique favorite cigar: `blue master`, `dunhill`, `pall mall`, `blends`, `prince`\n - People have unique favorite book genres: `mystery`, `science fiction`, `biography`, `romance`, `fantasy`\n\nClues:\n1. There is one house between the person residing in a Victorian house and the person who uses a Samsung Galaxy S21.\n2. The person who smokes many unique blends is Eric.\n3. The person who smokes many unique blends is the person who loves fantasy books.\n4. Alice is somewhere to the right of the person who uses a Samsung Galaxy S21.\n5. Bob is directly left of Eric.\n6. The person who loves mystery books is directly left of the person who loves fantasy books.\n7. Bob is somewhere to the left of the person who uses an iPhone 13.\n8. The person who uses a Google Pixel 6 is somewhere to the right of Peter.\n9. The person who loves romance books is directly left of the person in a ranch-style home.\n10. The person living in a colonial-style house is in the fourth house.\n11. The person who loves fantasy books is in the fourth house.\n12. The person partial to Pall Mall is Peter.\n13. The person in a modern-style house and the person who smokes Blue Master are next to each other.\n14. The person who loves science fiction books is the Dunhill smoker.\n15. Eric is the person who uses a Samsung Galaxy S21.\n16. The person who uses a Huawei P50 and the person who loves fantasy books are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "PhoneModel",
        "Cigar",
        "BookGenre"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "modern",
          "oneplus 9",
          "pall mall",
          "biography"
        ],
        [
          "2",
          "Arnold",
          "victorian",
          "google pixel 6",
          "blue master",
          "romance"
        ],
        [
          "3",
          "Bob",
          "ranch",
          "huawei p50",
          "prince",
          "mystery"
        ],
        [
          "4",
          "Eric",
          "colonial",
          "samsung galaxy s21",
          "blends",
          "fantasy"
        ],
        [
          "5",
          "Alice",
          "craftsman",
          "iphone 13",
          "dunhill",
          "science fiction"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Eric, Bob, Peter])\nhouseStyles = EnumSort([victorian, colonial, ranch, modern, craftsman])\nphoneModels = EnumSort([google_pixel_6, iphone_13, oneplus_9, samsung_galaxy_s21, huawei_p50])\ncigars = EnumSort([blue_master, dunhill, pall_mall, blends, prince])\nbookGenres = EnumSort([mystery, science_fiction, biography, romance, fantasy])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nuses_phone = Function([people] -> [phoneModels])\nsmokes_cigar = Function([people] -> [cigars])\nhas_bookGenre = Function([people] -> [bookGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There is one house between the person residing in a Victorian house and the person who uses a Samsung Galaxy S21\nThe person who smokes many unique blends is Eric\nThe person who smokes many unique blends is the person who loves fantasy books\nAlice is somewhere to the right of the person who uses a Samsung Galaxy S21\nBob is directly left of Eric\nThe person who loves mystery books is directly left of the person who loves fantasy books\nBob is somewhere to the left of the person who uses an iPhone 13\nThe person who uses a Google Pixel 6 is somewhere to the right of Peter\nThe person who loves romance books is directly left of the person in a ranch-style home\nThe person living in a colonial-style house is in the fourth house\nThe person who loves fantasy books is in the fourth house\nThe person partial to Pall Mall is Peter\nThe person in a modern-style house and the person who smokes Blue Master are next to each other\nThe person who loves science fiction books is the Dunhill smoker\nEric is the person who uses a Samsung Galaxy S21\nThe person who uses a Huawei P50 and the person who loves fantasy books are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_houseStyle(Peter) == modern, uses_phone(Peter) == oneplus_9, smokes_cigar(Peter) == pall_mall, has_bookGenre(Peter) == biography), And(lives(Arnold) == 2, has_houseStyle(Arnold) == victorian, uses_phone(Arnold) == google_pixel_6, smokes_cigar(Arnold) == blue_master, has_bookGenre(Arnold) == romance), And(lives(Bob) == 3, has_houseStyle(Bob) == ranch, uses_phone(Bob) == huawei_p50, smokes_cigar(Bob) == prince, has_bookGenre(Bob) == mystery), And(lives(Eric) == 4, has_houseStyle(Eric) == colonial, uses_phone(Eric) == samsung_galaxy_s21, smokes_cigar(Eric) == blends, has_bookGenre(Eric) == fantasy), And(lives(Alice) == 5, has_houseStyle(Alice) == craftsman, uses_phone(Alice) == iphone_13, smokes_cigar(Alice) == dunhill, has_bookGenre(Alice) == science_fiction) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-28",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Peter`, `Arnold`, `Bob`, `Carol`\n - Each mother is accompanied by their child: `Meredith`, `Fred`, `Bella`, `Samantha`, `Alice`, `Timothy`\n - Each person has a unique birthday month: `jan`, `feb`, `mar`, `may`, `sept`, `april`\n - Everyone has a unique favorite cigar: `dunhill`, `blends`, `blue master`, `prince`, `yellow monster`, `pall mall`\n\nClues:\n1. The person's child is named Meredith and the person who smokes Yellow Monster are next to each other.\n2. Carol is directly left of Arnold.\n3. The person's child is named Meredith is the person who smokes many unique blends.\n4. The person's child is named Samantha is the person whose birthday is in March.\n5. The person partial to Pall Mall is somewhere to the right of the Dunhill smoker.\n6. Eric is the Dunhill smoker.\n7. There is one house between the person whose birthday is in May and the person who is the mother of Timothy.\n8. The person who smokes Blue Master is the person's child is named Bella.\n9. The person's child is named Samantha is somewhere to the right of the person whose birthday is in January.\n10. The person's child is named Samantha is in the fifth house.\n11. The person whose birthday is in May is the person's child is named Meredith.\n12. The person's child is named Alice is the person whose birthday is in February.\n13. There is one house between Alice and Arnold.\n14. Bob is the person's child is named Meredith.\n15. Carol is the person whose birthday is in April.\n16. The person partial to Pall Mall is the person whose birthday is in April.\n17. The person whose birthday is in May is somewhere to the left of the person whose birthday is in January.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "Birthday",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "Alice",
          "feb",
          "dunhill"
        ],
        [
          "2",
          "Bob",
          "Meredith",
          "may",
          "blends"
        ],
        [
          "3",
          "Alice",
          "Fred",
          "jan",
          "yellow monster"
        ],
        [
          "4",
          "Carol",
          "Timothy",
          "april",
          "pall mall"
        ],
        [
          "5",
          "Arnold",
          "Samantha",
          "mar",
          "prince"
        ],
        [
          "6",
          "Peter",
          "Bella",
          "sept",
          "blue master"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Peter, Arnold, Bob, Carol])\nchildren = EnumSort([Meredith, Fred, Bella, Samantha, Alice, Timothy])\nmonths = EnumSort([jan, feb, mar, may, sept, april])\ncigars = EnumSort([dunhill, blends, blue_master, prince, yellow_monster, pall_mall])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_birthday = Function([people] -> [months])\nsmokes = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person's child is named Meredith and the person who smokes Yellow Monster are next to each other\nCarol is directly left of Arnold\nThe person's child is named Meredith is the person who smokes many unique blends\nThe person's child is named Samantha is the person whose birthday is in March\nThe person partial to Pall Mall is somewhere to the right of the Dunhill smoker\nEric is the Dunhill smoker\nThere is one house between the person whose birthday is in May and the person who is the mother of Timothy\nThe person who smokes Blue Master is the person's child is named Bella\nThe person's child is named Samantha is somewhere to the right of the person whose birthday is in January\nThe person's child is named Samantha is in the fifth house\nThe person whose birthday is in May is the person's child is named Meredith\nThe person's child is named Alice is the person whose birthday is in February\nThere is one house between Alice and Arnold\nBob is the person's child is named Meredith\nCarol is the person whose birthday is in April\nThe person partial to Pall Mall is the person whose birthday is in April\nThe person whose birthday is in May is somewhere to the left of the person whose birthday is in January",
    "queries": "And( And(lives(Eric) == 1, has_child(Eric) == Alice, has_birthday(Eric) == feb, smokes(Eric) == dunhill), And(lives(Bob) == 2, has_child(Bob) == Meredith, has_birthday(Bob) == may, smokes(Bob) == blends), And(lives(Alice) == 3, has_child(Alice) == Fred, has_birthday(Alice) == jan, smokes(Alice) == yellow_monster), And(lives(Carol) == 4, has_child(Carol) == Timothy, has_birthday(Carol) == april, smokes(Carol) == pall_mall), And(lives(Arnold) == 5, has_child(Arnold) == Samantha, has_birthday(Arnold) == mar, smokes(Arnold) == prince), And(lives(Peter) == 6, has_child(Peter) == Bella, has_birthday(Peter) == sept, smokes(Peter) == blue_master) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-11",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Eric`, `Carol`, `Alice`, `Peter`\n - Each person has a unique level of education: `doctorate`, `trade school`, `associate`, `high school`, `bachelor`, `master`\n - People own unique car models: `chevrolet silverado`, `ford f150`, `honda civic`, `tesla model 3`, `bmw 3 series`, `toyota camry`\n - Each person has a unique favorite drink: `tea`, `water`, `boba tea`, `coffee`, `root beer`, `milk`\n - They all have a unique favorite flower: `carnations`, `iris`, `lilies`, `tulips`, `daffodils`, `roses`\n\nClues:\n1. Eric is the one who only drinks water.\n2. The person with an associate's degree is the person who owns a Toyota Camry.\n3. The boba tea drinker is in the fourth house.\n4. The person who loves the vase of tulips is directly left of the person who owns a Tesla Model 3.\n5. The person with a master's degree is somewhere to the left of the person who owns a BMW 3 Series.\n6. The person who owns a Toyota Camry is directly left of the person who loves a bouquet of daffodils.\n7. The person who loves the boquet of iris is somewhere to the left of the root beer lover.\n8. The person who likes milk is somewhere to the right of the person who owns a Honda Civic.\n9. Carol is the person who owns a Honda Civic.\n10. The person with a high school diploma is in the second house.\n11. The person with a master's degree is the boba tea drinker.\n12. The person who owns a Tesla Model 3 is Arnold.\n13. The person who loves the boquet of lilies is the person who owns a Tesla Model 3.\n14. The person who loves a carnations arrangement is somewhere to the left of Alice.\n15. The person with a bachelor's degree is somewhere to the right of the person who likes milk.\n16. The one who only drinks water is the person who owns a Ford F-150.\n17. Carol is somewhere to the left of the person with a doctorate.\n18. There are two houses between the person who owns a Toyota Camry and the person who loves the vase of tulips.\n19. The person who owns a Tesla Model 3 is somewhere to the left of the coffee drinker.\n20. Bob is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "CarModel",
        "Drink",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "associate",
          "toyota camry",
          "tea",
          "iris"
        ],
        [
          "2",
          "Eric",
          "high school",
          "ford f150",
          "water",
          "daffodils"
        ],
        [
          "3",
          "Bob",
          "trade school",
          "chevrolet silverado",
          "root beer",
          "carnations"
        ],
        [
          "4",
          "Carol",
          "master",
          "honda civic",
          "boba tea",
          "tulips"
        ],
        [
          "5",
          "Arnold",
          "doctorate",
          "tesla model 3",
          "milk",
          "lilies"
        ],
        [
          "6",
          "Alice",
          "bachelor",
          "bmw 3 series",
          "coffee",
          "roses"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Eric, Carol, Alice, Peter])\neducationLevels = EnumSort([doctorate, trade_school, associate, high_school, bachelor, master])\ncarModels = EnumSort([chevrolet_silverado, ford_f150, honda_civic, tesla_model_3, bmw_3_series, toyota_camry])\ndrinks = EnumSort([tea, water, boba_tea, coffee, root_beer, milk])\nflowers = EnumSort([carnations, iris, lilies, tulips, daffodils, roses])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nowns_car = Function([people] -> [carModels])\nlikes_drink = Function([people] -> [drinks])\nlikes_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Eric is the one who only drinks water\nThe person with an associate's degree is the person who owns a Toyota Camry\nThe boba tea drinker is in the fourth house\nThe person who loves the vase of tulips is directly left of the person who owns a Tesla Model 3\nThe person with a master's degree is somewhere to the left of the person who owns a BMW 3 Series\nThe person who owns a Toyota Camry is directly left of the person who loves a bouquet of daffodils\nThe person who loves the boquet of iris is somewhere to the left of the root beer lover\nThe person who likes milk is somewhere to the right of the person who owns a Honda Civic\nCarol is the person who owns a Honda Civic\nThe person with a high school diploma is in the second house\nThe person with a master's degree is the boba tea drinker\nThe person who owns a Tesla Model 3 is Arnold\nThe person who loves the boquet of lilies is the person who owns a Tesla Model 3\nThe person who loves a carnations arrangement is somewhere to the left of Alice\nThe person with a bachelor's degree is somewhere to the right of the person who likes milk\nThe one who only drinks water is the person who owns a Ford F-150\nCarol is somewhere to the left of the person with a doctorate\nThere are two houses between the person who owns a Toyota Camry and the person who loves the vase of tulips\nThe person who owns a Tesla Model 3 is somewhere to the left of the coffee drinker\nBob is in the third house",
    "queries": "And( And(lives(Peter) == 1, has_education(Peter) == associate, owns_car(Peter) == toyota_camry, likes_drink(Peter) == tea, likes_flower(Peter) == iris), And(lives(Eric) == 2, has_education(Eric) == high_school, owns_car(Eric) == ford_f150, likes_drink(Eric) == water, likes_flower(Eric) == daffodils), And(lives(Bob) == 3, has_education(Bob) == trade_school, owns_car(Bob) == chevrolet_silverado, likes_drink(Bob) == root_beer, likes_flower(Bob) == carnations), And(lives(Carol) == 4, has_education(Carol) == master, owns_car(Carol) == honda_civic, likes_drink(Carol) == boba_tea, likes_flower(Carol) == tulips), And(lives(Arnold) == 5, has_education(Arnold) == doctorate, owns_car(Arnold) == tesla_model_3, likes_drink(Arnold) == milk, likes_flower(Arnold) == lilies), And(lives(Alice) == 6, has_education(Alice) == bachelor, owns_car(Alice) == bmw_3_series, likes_drink(Alice) == coffee, likes_flower(Alice) == roses) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-38",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Arnold`, `Bob`, `Eric`, `Peter`, `Alice`\n - People use unique phone models: `iphone 13`, `huawei p50`, `oneplus 9`, `google pixel 6`, `xiaomi mi 11`, `samsung galaxy s21`\n - Everyone has a unique favorite cigar: `pall mall`, `yellow monster`, `prince`, `blends`, `dunhill`, `blue master`\n - Each person prefers a unique type of vacation: `cultural`, `beach`, `city`, `camping`, `cruise`, `mountain`\n - People have unique hair colors: `brown`, `red`, `gray`, `black`, `blonde`, `auburn`\n - Each person has a unique favorite drink: `coffee`, `boba tea`, `milk`, `water`, `root beer`, `tea`\n\nClues:\n1. The person who prefers city breaks is Bob.\n2. The person who has brown hair is the one who only drinks water.\n3. Eric is directly left of the person who uses a Samsung Galaxy S21.\n4. There is one house between the person who loves beach vacations and the person who enjoys camping trips.\n5. The one who only drinks water is somewhere to the left of the person who uses a Xiaomi Mi 11.\n6. The person who has brown hair is the Dunhill smoker.\n7. The person who has red hair is Arnold.\n8. The person who has auburn hair is the person who uses an iPhone 13.\n9. The person who has gray hair is not in the sixth house.\n10. The person who likes milk is the person who has auburn hair.\n11. The person who smokes Blue Master is Alice.\n12. The person who uses a OnePlus 9 is the person who likes going on cruises.\n13. The coffee drinker is the Prince smoker.\n14. The coffee drinker is the person who uses a Huawei P50.\n15. Eric is the tea drinker.\n16. The Prince smoker is in the third house.\n17. The person who smokes Yellow Monster is somewhere to the right of the coffee drinker.\n18. The person who enjoys mountain retreats is Peter.\n19. The person who uses a Huawei P50 is the person who has blonde hair.\n20. There are two houses between the person who loves beach vacations and the person who uses a Google Pixel 6.\n21. The one who only drinks water is in the fourth house.\n22. Eric is the person partial to Pall Mall.\n23. Bob is the boba tea drinker.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Cigar",
        "Vacation",
        "HairColor",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "iphone 13",
          "blue master",
          "beach",
          "auburn",
          "milk"
        ],
        [
          "2",
          "Arnold",
          "oneplus 9",
          "blends",
          "cruise",
          "red",
          "root beer"
        ],
        [
          "3",
          "Carol",
          "huawei p50",
          "prince",
          "camping",
          "blonde",
          "coffee"
        ],
        [
          "4",
          "Peter",
          "google pixel 6",
          "dunhill",
          "mountain",
          "brown",
          "water"
        ],
        [
          "5",
          "Eric",
          "xiaomi mi 11",
          "pall mall",
          "cultural",
          "gray",
          "tea"
        ],
        [
          "6",
          "Bob",
          "samsung galaxy s21",
          "yellow monster",
          "city",
          "black",
          "boba tea"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Arnold, Bob, Eric, Peter, Alice])\nphoneModels = EnumSort([iphone_13, huawei_p50, oneplus_9, google_pixel_6, xiaomi_mi_11, samsung_galaxy_s21])\ncigars = EnumSort([pall_mall, yellow_monster, prince, blends, dunhill, blue_master])\nvacations = EnumSort([cultural, beach, city, camping, cruise, mountain])\nhairColors = EnumSort([brown, red, gray, black, blonde, auburn])\ndrinks = EnumSort([coffee, boba_tea, milk, water, root_beer, tea])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nsmokes_cigar = Function([people] -> [cigars])\nprefers_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\ndrinks_beverage = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who prefers city breaks is Bob\nThe person who has brown hair is the one who only drinks water\nEric is directly left of the person who uses a Samsung Galaxy S21\nThere is one house between the person who loves beach vacations and the person who enjoys camping trips\nThe one who only drinks water is somewhere to the left of the person who uses a Xiaomi Mi 11\nThe person who has brown hair is the Dunhill smoker\nThe person who has red hair is Arnold\nThe person who has auburn hair is the person who uses an iPhone 13\nThe person who has gray hair is not in the sixth house\nThe person who likes milk is the person who has auburn hair\nThe person who smokes Blue Master is Alice\nThe person who uses a OnePlus 9 is the person who likes going on cruises\nThe coffee drinker is the Prince smoker\nThe coffee drinker is the person who uses a Huawei P50\nEric is the tea drinker\nThe Prince smoker is in the third house\nThe person who smokes Yellow Monster is somewhere to the right of the coffee drinker\nThe person who enjoys mountain retreats is Peter\nThe person who uses a Huawei P50 is the person who has blonde hair\nThere are two houses between the person who loves beach vacations and the person who uses a Google Pixel 6\nThe one who only drinks water is in the fourth house\nEric is the person partial to Pall Mall\nBob is the boba tea drinker",
    "queries": "And( And(lives(Alice) == 1, uses_phone(Alice) == iphone_13, smokes_cigar(Alice) == blue_master, prefers_vacation(Alice) == beach, has_hairColor(Alice) == auburn, drinks_beverage(Alice) == milk), And(lives(Arnold) == 2, uses_phone(Arnold) == oneplus_9, smokes_cigar(Arnold) == blends, prefers_vacation(Arnold) == cruise, has_hairColor(Arnold) == red, drinks_beverage(Arnold) == root_beer), And(lives(Carol) == 3, uses_phone(Carol) == huawei_p50, smokes_cigar(Carol) == prince, prefers_vacation(Carol) == camping, has_hairColor(Carol) == blonde, drinks_beverage(Carol) == coffee), And(lives(Peter) == 4, uses_phone(Peter) == google_pixel_6, smokes_cigar(Peter) == dunhill, prefers_vacation(Peter) == mountain, has_hairColor(Peter) == brown, drinks_beverage(Peter) == water), And(lives(Eric) == 5, uses_phone(Eric) == xiaomi_mi_11, smokes_cigar(Eric) == pall_mall, prefers_vacation(Eric) == cultural, has_hairColor(Eric) == gray, drinks_beverage(Eric) == tea), And(lives(Bob) == 6, uses_phone(Bob) == samsung_galaxy_s21, smokes_cigar(Bob) == yellow_monster, prefers_vacation(Bob) == city, has_hairColor(Bob) == black, drinks_beverage(Bob) == boba_tea) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-35",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Carol`, `Arnold`, `Eric`\n - Each person has a unique favorite drink: `milk`, `coffee`, `tea`, `root beer`, `boba tea`, `water`\n - They all have a unique favorite flower: `iris`, `roses`, `carnations`, `daffodils`, `lilies`, `tulips`\n - Each person has a unique birthday month: `sept`, `jan`, `feb`, `april`, `may`, `mar`\n - Each person has a unique hobby: `photography`, `cooking`, `woodworking`, `gardening`, `knitting`, `painting`\n\nClues:\n1. The root beer lover is in the fifth house.\n2. The person whose birthday is in February is Peter.\n3. The boba tea drinker is not in the fourth house.\n4. The person who loves the boquet of iris is somewhere to the right of the person whose birthday is in April.\n5. The coffee drinker is Arnold.\n6. Eric is the photography enthusiast.\n7. The person who paints as a hobby is the person who loves the vase of tulips.\n8. The person whose birthday is in April is in the third house.\n9. The tea drinker is the person who loves a bouquet of daffodils.\n10. There are two houses between the person who loves the boquet of lilies and the person who likes milk.\n11. The person whose birthday is in March is somewhere to the left of the person who enjoys gardening.\n12. There are two houses between the person who loves a bouquet of daffodils and the person who paints as a hobby.\n13. The person whose birthday is in February is in the fourth house.\n14. The person who loves cooking is not in the fourth house.\n15. The person who enjoys gardening is somewhere to the left of the person who loves a carnations arrangement.\n16. The person whose birthday is in January is Bob.\n17. Carol is the person whose birthday is in April.\n18. The woodworking hobbyist is in the second house.\n19. The person who likes milk is in the sixth house.\n20. Peter is the person who loves a carnations arrangement.\n21. The person whose birthday is in May is the woodworking hobbyist.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Flower",
        "Birthday",
        "Hobby"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "coffee",
          "roses",
          "mar",
          "cooking"
        ],
        [
          "2",
          "Alice",
          "tea",
          "daffodils",
          "may",
          "woodworking"
        ],
        [
          "3",
          "Carol",
          "boba tea",
          "lilies",
          "april",
          "gardening"
        ],
        [
          "4",
          "Peter",
          "water",
          "carnations",
          "feb",
          "knitting"
        ],
        [
          "5",
          "Bob",
          "root beer",
          "tulips",
          "jan",
          "painting"
        ],
        [
          "6",
          "Eric",
          "milk",
          "iris",
          "sept",
          "photography"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Carol, Arnold, Eric])\ndrinks = EnumSort([milk, coffee, tea, root_beer, boba_tea, water])\nflowers = EnumSort([iris, roses, carnations, daffodils, lilies, tulips])\nmonths = EnumSort([sept, jan, feb, april, may, mar])\nhobbies = EnumSort([photography, cooking, woodworking, gardening, knitting, painting])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_flower = Function([people] -> [flowers])\nhas_month = Function([people] -> [months])\nhas_hobby = Function([people] -> [hobbies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The root beer lover is in the fifth house\nThe person whose birthday is in February is Peter\nThe boba tea drinker is not in the fourth house\nThe person who loves the boquet of iris is somewhere to the right of the person whose birthday is in April\nThe coffee drinker is Arnold\nEric is the photography enthusiast\nThe person who paints as a hobby is the person who loves the vase of tulips\nThe person whose birthday is in April is in the third house\nThe tea drinker is the person who loves a bouquet of daffodils\nThere are two houses between the person who loves the boquet of lilies and the person who likes milk\nThe person whose birthday is in March is somewhere to the left of the person who enjoys gardening\nThere are two houses between the person who loves a bouquet of daffodils and the person who paints as a hobby\nThe person whose birthday is in February is in the fourth house\nThe person who loves cooking is not in the fourth house\nThe person who enjoys gardening is somewhere to the left of the person who loves a carnations arrangement\nThe person whose birthday is in January is Bob\nCarol is the person whose birthday is in April\nThe woodworking hobbyist is in the second house\nThe person who likes milk is in the sixth house\nPeter is the person who loves a carnations arrangement\nThe person whose birthday is in May is the woodworking hobbyist",
    "queries": "And( And(lives(Arnold) == 1, has_drink(Arnold) == coffee, has_flower(Arnold) == roses, has_month(Arnold) == mar, has_hobby(Arnold) == cooking), And(lives(Alice) == 2, has_drink(Alice) == tea, has_flower(Alice) == daffodils, has_month(Alice) == may, has_hobby(Alice) == woodworking), And(lives(Carol) == 3, has_drink(Carol) == boba_tea, has_flower(Carol) == lilies, has_month(Carol) == april, has_hobby(Carol) == gardening), And(lives(Peter) == 4, has_drink(Peter) == water, has_flower(Peter) == carnations, has_month(Peter) == feb, has_hobby(Peter) == knitting), And(lives(Bob) == 5, has_drink(Bob) == root_beer, has_flower(Bob) == tulips, has_month(Bob) == jan, has_hobby(Bob) == painting), And(lives(Eric) == 6, has_drink(Eric) == milk, has_flower(Eric) == iris, has_month(Eric) == sept, has_hobby(Eric) == photography) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-27",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Eric`, `Alice`\n - Each person has a unique birthday month: `sept`, `mar`, `april`, `feb`, `jan`\n - People have unique favorite sports: `baseball`, `basketball`, `soccer`, `tennis`, `swimming`\n - Each person has a favorite color: `white`, `red`, `yellow`, `blue`, `green`\n - Each person has an occupation: `doctor`, `teacher`, `lawyer`, `artist`, `engineer`\n - The mothers' names in different houses are unique: `Kailyn`, `Holly`, `Aniya`, `Penny`, `Janelle`\n\nClues:\n1. There is one house between the person who is a doctor and the person whose birthday is in March.\n2. The person whose mother's name is Penny is not in the fourth house.\n3. The person who loves baseball is somewhere to the right of the person who is a doctor.\n4. The person who loves soccer is Peter.\n5. There is one house between Bob and The person whose mother's name is Kailyn.\n6. The person who loves yellow is in the third house.\n7. The person who loves yellow is The person whose mother's name is Kailyn.\n8. The person who loves swimming is the person who loves white.\n9. Alice is in the fourth house.\n10. The person whose birthday is in February is The person whose mother's name is Holly.\n11. The person who loves baseball is the person whose birthday is in January.\n12. The person who loves white is the person whose birthday is in April.\n13. The person whose mother's name is Aniya is the person who loves swimming.\n14. Alice is the person who loves baseball.\n15. The person who is a doctor and the person who is a lawyer are next to each other.\n16. The person whose birthday is in April is somewhere to the left of the person whose favorite color is red.\n17. The person who loves tennis is somewhere to the right of the person who is a teacher.\n18. The person whose favorite color is green is in the second house.\n19. Arnold is the person whose birthday is in February.\n20. The person whose birthday is in February is the person who is an artist.\n21. The person who loves blue is not in the fifth house.\n22. The person who loves tennis is not in the fifth house.\n23. The person whose mother's name is Holly is the person who loves basketball.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "FavoriteSport",
        "Color",
        "Occupation",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "april",
          "swimming",
          "white",
          "teacher",
          "Aniya"
        ],
        [
          "2",
          "Arnold",
          "feb",
          "basketball",
          "green",
          "artist",
          "Holly"
        ],
        [
          "3",
          "Eric",
          "sept",
          "tennis",
          "yellow",
          "doctor",
          "Kailyn"
        ],
        [
          "4",
          "Alice",
          "jan",
          "baseball",
          "blue",
          "lawyer",
          "Janelle"
        ],
        [
          "5",
          "Peter",
          "mar",
          "soccer",
          "red",
          "engineer",
          "Penny"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Eric, Alice])\nmonths = EnumSort([sept, mar, april, feb, jan])\nsports = EnumSort([baseball, basketball, soccer, tennis, swimming])\ncolors = EnumSort([white, red, yellow, blue, green])\noccupations = EnumSort([doctor, teacher, lawyer, artist, engineer])\nmothers = EnumSort([Kailyn, Holly, Aniya, Penny, Janelle])\nlives = Function([people] -> [int])\nhas_month = Function([people] -> [months])\nhas_sport = Function([people] -> [sports])\nhas_color = Function([people] -> [colors])\nhas_occupation = Function([people] -> [occupations])\nhas_mother = Function([people] -> [mothers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There is one house between the person who is a doctor and the person whose birthday is in March\nThe person whose mother's name is Penny is not in the fourth house\nThe person who loves baseball is somewhere to the right of the person who is a doctor\nThe person who loves soccer is Peter\nThere is one house between Bob and The person whose mother's name is Kailyn\nThe person who loves yellow is in the third house\nThe person who loves yellow is The person whose mother's name is Kailyn\nThe person who loves swimming is the person who loves white\nAlice is in the fourth house\nThe person whose birthday is in February is The person whose mother's name is Holly\nThe person who loves baseball is the person whose birthday is in January\nThe person who loves white is the person whose birthday is in April\nThe person whose mother's name is Aniya is the person who loves swimming\nAlice is the person who loves baseball\nThe person who is a doctor and the person who is a lawyer are next to each other\nThe person whose birthday is in April is somewhere to the left of the person whose favorite color is red\nThe person who loves tennis is somewhere to the right of the person who is a teacher\nThe person whose favorite color is green is in the second house\nArnold is the person whose birthday is in February\nThe person whose birthday is in February is the person who is an artist\nThe person who loves blue is not in the fifth house\nThe person who loves tennis is not in the fifth house\nThe person whose mother's name is Holly is the person who loves basketball",
    "queries": "And( And(lives(Bob) == 1, has_month(Bob) == april, has_sport(Bob) == swimming, has_color(Bob) == white, has_occupation(Bob) == teacher, has_mother(Bob) == Aniya), And(lives(Arnold) == 2, has_month(Arnold) == feb, has_sport(Arnold) == basketball, has_color(Arnold) == green, has_occupation(Arnold) == artist, has_mother(Arnold) == Holly), And(lives(Eric) == 3, has_month(Eric) == sept, has_sport(Eric) == tennis, has_color(Eric) == yellow, has_occupation(Eric) == doctor, has_mother(Eric) == Kailyn), And(lives(Alice) == 4, has_month(Alice) == jan, has_sport(Alice) == baseball, has_color(Alice) == blue, has_occupation(Alice) == lawyer, has_mother(Alice) == Janelle), And(lives(Peter) == 5, has_month(Peter) == mar, has_sport(Peter) == soccer, has_color(Peter) == red, has_occupation(Peter) == engineer, has_mother(Peter) == Penny) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-19",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Arnold`, `Eric`, `Carol`, `Bob`\n - People own unique car models: `toyota camry`, `ford f150`, `chevrolet silverado`, `tesla model 3`, `bmw 3 series`, `honda civic`\n - The people keep unique animals: `horse`, `fish`, `cat`, `rabbit`, `bird`, `dog`\n - Everyone has a favorite smoothie: `cherry`, `watermelon`, `desert`, `dragonfruit`, `lime`, `blueberry`\n\nClues:\n1. The fish enthusiast is in the first house.\n2. Peter is in the second house.\n3. The person who owns a Chevrolet Silverado is Eric.\n4. Alice is directly left of the person who owns a Toyota Camry.\n5. The Watermelon smoothie lover is directly left of Bob.\n6. The cat lover is Peter.\n7. There are two houses between the dog owner and the person who drinks Blueberry smoothies.\n8. The Watermelon smoothie lover is directly left of the person who keeps horses.\n9. The person who owns a Chevrolet Silverado and the person who owns a Ford F-150 are next to each other.\n10. The person who drinks Lime smoothies is not in the second house.\n11. The cat lover is the person who owns a Tesla Model 3.\n12. The person who likes Cherry smoothies is the rabbit owner.\n13. The person who drinks Blueberry smoothies is somewhere to the right of Alice.\n14. The person who owns a Chevrolet Silverado is not in the fifth house.\n15. The person who keeps horses is the Desert smoothie lover.\n16. Carol is the bird keeper.\n17. The person who owns a Honda Civic is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "CarModel",
        "Animal",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "honda civic",
          "fish",
          "lime"
        ],
        [
          "2",
          "Peter",
          "tesla model 3",
          "cat",
          "dragonfruit"
        ],
        [
          "3",
          "Eric",
          "chevrolet silverado",
          "dog",
          "watermelon"
        ],
        [
          "4",
          "Bob",
          "ford f150",
          "horse",
          "desert"
        ],
        [
          "5",
          "Alice",
          "bmw 3 series",
          "rabbit",
          "cherry"
        ],
        [
          "6",
          "Carol",
          "toyota camry",
          "bird",
          "blueberry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Arnold, Eric, Carol, Bob])\ncarModels = EnumSort([toyota_camry, ford_f150, chevrolet_silverado, tesla_model_3, bmw_3_series, honda_civic])\nanimals = EnumSort([horse, fish, cat, rabbit, bird, dog])\nsmoothies = EnumSort([cherry, watermelon, desert, dragonfruit, lime, blueberry])\nlives = Function([people] -> [int])\nowns_car = Function([people] -> [carModels])\nkeeps_animal = Function([people] -> [animals])\nlikes_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The fish enthusiast is in the first house\nPeter is in the second house\nThe person who owns a Chevrolet Silverado is Eric\nAlice is directly left of the person who owns a Toyota Camry\nThe Watermelon smoothie lover is directly left of Bob\nThe cat lover is Peter\nThere are two houses between the dog owner and the person who drinks Blueberry smoothies\nThe Watermelon smoothie lover is directly left of the person who keeps horses\nThe person who owns a Chevrolet Silverado and the person who owns a Ford F-150 are next to each other\nThe person who drinks Lime smoothies is not in the second house\nThe cat lover is the person who owns a Tesla Model 3\nThe person who likes Cherry smoothies is the rabbit owner\nThe person who drinks Blueberry smoothies is somewhere to the right of Alice\nThe person who owns a Chevrolet Silverado is not in the fifth house\nThe person who keeps horses is the Desert smoothie lover\nCarol is the bird keeper\nThe person who owns a Honda Civic is Arnold",
    "queries": "And( And(lives(Arnold) == 1, owns_car(Arnold) == honda_civic, keeps_animal(Arnold) == fish, likes_smoothie(Arnold) == lime), And(lives(Peter) == 2, owns_car(Peter) == tesla_model_3, keeps_animal(Peter) == cat, likes_smoothie(Peter) == dragonfruit), And(lives(Eric) == 3, owns_car(Eric) == chevrolet_silverado, keeps_animal(Eric) == dog, likes_smoothie(Eric) == watermelon), And(lives(Bob) == 4, owns_car(Bob) == ford_f150, keeps_animal(Bob) == horse, likes_smoothie(Bob) == desert), And(lives(Alice) == 5, owns_car(Alice) == bmw_3_series, keeps_animal(Alice) == rabbit, likes_smoothie(Alice) == cherry), And(lives(Carol) == 6, owns_car(Carol) == toyota_camry, keeps_animal(Carol) == bird, likes_smoothie(Carol) == blueberry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-8",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Bob`, `Alice`\n - Each person lives in a unique style of house: `modern`, `craftsman`, `ranch`, `victorian`, `colonial`\n - The mothers' names in different houses are unique: `Penny`, `Kailyn`, `Holly`, `Janelle`, `Aniya`\n - People use unique phone models: `oneplus 9`, `google pixel 6`, `huawei p50`, `iphone 13`, `samsung galaxy s21`\n - Each person has a unique favorite drink: `coffee`, `water`, `root beer`, `tea`, `milk`\n - The people keep unique animals: `fish`, `dog`, `horse`, `bird`, `cat`\n\nClues:\n1. The person who uses a Google Pixel 6 is not in the first house.\n2. The one who only drinks water is Alice.\n3. The person living in a colonial-style house is somewhere to the right of the person who uses a Huawei P50.\n4. The person who keeps horses is the person who uses a OnePlus 9.\n5. The person in a ranch-style home is The person whose mother's name is Kailyn.\n6. The root beer lover is the cat lover.\n7. The person living in a colonial-style house is not in the fourth house.\n8. The bird keeper is in the fourth house.\n9. The tea drinker is Bob.\n10. The tea drinker is somewhere to the right of The person whose mother's name is Kailyn.\n11. The root beer lover is somewhere to the left of The person whose mother's name is Kailyn.\n12. The person who keeps horses is the person in a modern-style house.\n13. The person who uses an iPhone 13 is the person who likes milk.\n14. The dog owner is the person who likes milk.\n15. The person who uses a Google Pixel 6 is the person in a Craftsman-style house.\n16. Eric is not in the second house.\n17. The tea drinker is in the fourth house.\n18. The person who keeps horses is in the third house.\n19. The person in a modern-style house is The person whose mother's name is Penny.\n20. The root beer lover is Peter.\n21. The person whose mother's name is Aniya is not in the fourth house.\n22. The person whose mother's name is Janelle is the one who only drinks water.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HouseStyle",
        "Mother",
        "PhoneModel",
        "Drink",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "victorian",
          "Aniya",
          "huawei p50",
          "root beer",
          "cat"
        ],
        [
          "2",
          "Arnold",
          "ranch",
          "Kailyn",
          "iphone 13",
          "milk",
          "dog"
        ],
        [
          "3",
          "Eric",
          "modern",
          "Penny",
          "oneplus 9",
          "coffee",
          "horse"
        ],
        [
          "4",
          "Bob",
          "craftsman",
          "Holly",
          "google pixel 6",
          "tea",
          "bird"
        ],
        [
          "5",
          "Alice",
          "colonial",
          "Janelle",
          "samsung galaxy s21",
          "water",
          "fish"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Bob, Alice])\nhouseStyles = EnumSort([modern, craftsman, ranch, victorian, colonial])\nmothersNames = EnumSort([Penny, Kailyn, Holly, Janelle, Aniya])\nphoneModels = EnumSort([oneplus_9, google_pixel_6, huawei_p50, iphone_13, samsung_galaxy_s21])\ndrinks = EnumSort([coffee, water, root_beer, tea, milk])\nanimals = EnumSort([fish, dog, horse, bird, cat])\nlives = Function([people] -> [int])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_mothersName = Function([people] -> [mothersNames])\nuses_phoneModel = Function([people] -> [phoneModels])\nhas_drink = Function([people] -> [drinks])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who uses a Google Pixel 6 is not in the first house\nThe one who only drinks water is Alice\nThe person living in a colonial-style house is somewhere to the right of the person who uses a Huawei P50\nThe person who keeps horses is the person who uses a OnePlus 9\nThe person in a ranch-style home is The person whose mother's name is Kailyn\nThe root beer lover is the cat lover\nThe person living in a colonial-style house is not in the fourth house\nThe bird keeper is in the fourth house\nThe tea drinker is Bob\nThe tea drinker is somewhere to the right of The person whose mother's name is Kailyn\nThe root beer lover is somewhere to the left of The person whose mother's name is Kailyn\nThe person who keeps horses is the person in a modern-style house\nThe person who uses an iPhone 13 is the person who likes milk\nThe dog owner is the person who likes milk\nThe person who uses a Google Pixel 6 is the person in a Craftsman-style house\nEric is not in the second house\nThe tea drinker is in the fourth house\nThe person who keeps horses is in the third house\nThe person in a modern-style house is The person whose mother's name is Penny\nThe root beer lover is Peter\nThe person whose mother's name is Aniya is not in the fourth house\nThe person whose mother's name is Janelle is the one who only drinks water",
    "queries": "And( And(lives(Peter) == 1, has_houseStyle(Peter) == victorian, has_mothersName(Peter) == Aniya, uses_phoneModel(Peter) == huawei_p50, has_drink(Peter) == root_beer, has_animal(Peter) == cat), And(lives(Arnold) == 2, has_houseStyle(Arnold) == ranch, has_mothersName(Arnold) == Kailyn, uses_phoneModel(Arnold) == iphone_13, has_drink(Arnold) == milk, has_animal(Arnold) == dog), And(lives(Eric) == 3, has_houseStyle(Eric) == modern, has_mothersName(Eric) == Penny, uses_phoneModel(Eric) == oneplus_9, has_drink(Eric) == coffee, has_animal(Eric) == horse), And(lives(Bob) == 4, has_houseStyle(Bob) == craftsman, has_mothersName(Bob) == Holly, uses_phoneModel(Bob) == google_pixel_6, has_drink(Bob) == tea, has_animal(Bob) == bird), And(lives(Alice) == 5, has_houseStyle(Alice) == colonial, has_mothersName(Alice) == Janelle, uses_phoneModel(Alice) == samsung_galaxy_s21, has_drink(Alice) == water, has_animal(Alice) == fish) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-16",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Carol`, `Alice`, `Eric`, `Bob`\n - People have unique favorite book genres: `mystery`, `science fiction`, `fantasy`, `romance`, `biography`, `historical fiction`\n - Everyone has a unique favorite cigar: `dunhill`, `blends`, `yellow monster`, `prince`, `blue master`, `pall mall`\n - The people are of nationalities: `brit`, `swede`, `chinese`, `dane`, `german`, `norwegian`\n - Each person has a unique type of pet: `bird`, `rabbit`, `fish`, `cat`, `hamster`, `dog`\n\nClues:\n1. The person with an aquarium of fish is in the first house.\n2. The person who owns a dog is not in the third house.\n3. The British person is the person who loves historical fiction books.\n4. Bob is the person who owns a dog.\n5. The person with a pet hamster is the British person.\n6. Eric is in the sixth house.\n7. There is one house between the person who smokes Yellow Monster and the person who owns a dog.\n8. Alice is directly left of the person who has a cat.\n9. The British person is directly left of the person who smokes Blue Master.\n10. Carol is in the second house.\n11. The person who loves fantasy books is the Swedish person.\n12. The person who loves romance books is directly left of the Dunhill smoker.\n13. The person partial to Pall Mall is the Swedish person.\n14. The Prince smoker is the Chinese.\n15. The person who loves biography books is somewhere to the left of the British person.\n16. The person who loves science fiction books is in the fourth house.\n17. The British person is Alice.\n18. The Norwegian is the person who loves biography books.\n19. The Dane and the Dunhill smoker are next to each other.\n20. Peter is not in the third house.\n21. The person who owns a rabbit is the person who loves romance books.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "Cigar",
        "Nationality",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "fantasy",
          "pall mall",
          "swede",
          "fish"
        ],
        [
          "2",
          "Carol",
          "romance",
          "yellow monster",
          "dane",
          "rabbit"
        ],
        [
          "3",
          "Arnold",
          "biography",
          "dunhill",
          "norwegian",
          "bird"
        ],
        [
          "4",
          "Bob",
          "science fiction",
          "prince",
          "chinese",
          "dog"
        ],
        [
          "5",
          "Alice",
          "historical fiction",
          "blends",
          "brit",
          "hamster"
        ],
        [
          "6",
          "Eric",
          "mystery",
          "blue master",
          "german",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Carol, Alice, Eric, Bob])\nbookGenres = EnumSort([mystery, science_fiction, fantasy, romance, biography, historical_fiction])\ncigars = EnumSort([dunhill, blends, yellow_monster, prince, blue_master, pall_mall])\nnationalities = EnumSort([brit, swede, chinese, dane, german, norwegian])\npets = EnumSort([bird, rabbit, fish, cat, hamster, dog])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_cigar = Function([people] -> [cigars])\nhas_nationality = Function([people] -> [nationalities])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with an aquarium of fish is in the first house\nThe person who owns a dog is not in the third house\nThe British person is the person who loves historical fiction books\nBob is the person who owns a dog\nThe person with a pet hamster is the British person\nEric is in the sixth house\nThere is one house between the person who smokes Yellow Monster and the person who owns a dog\nAlice is directly left of the person who has a cat\nThe British person is directly left of the person who smokes Blue Master\nCarol is in the second house\nThe person who loves fantasy books is the Swedish person\nThe person who loves romance books is directly left of the Dunhill smoker\nThe person partial to Pall Mall is the Swedish person\nThe Prince smoker is the Chinese\nThe person who loves biography books is somewhere to the left of the British person\nThe person who loves science fiction books is in the fourth house\nThe British person is Alice\nThe Norwegian is the person who loves biography books\nThe Dane and the Dunhill smoker are next to each other\nPeter is not in the third house\nThe person who owns a rabbit is the person who loves romance books",
    "queries": "And( And(lives(Peter) == 1, has_bookGenre(Peter) == fantasy, has_cigar(Peter) == pall_mall, has_nationality(Peter) == swede, has_pet(Peter) == fish), And(lives(Carol) == 2, has_bookGenre(Carol) == romance, has_cigar(Carol) == yellow_monster, has_nationality(Carol) == dane, has_pet(Carol) == rabbit), And(lives(Arnold) == 3, has_bookGenre(Arnold) == biography, has_cigar(Arnold) == dunhill, has_nationality(Arnold) == norwegian, has_pet(Arnold) == bird), And(lives(Bob) == 4, has_bookGenre(Bob) == science_fiction, has_cigar(Bob) == prince, has_nationality(Bob) == chinese, has_pet(Bob) == dog), And(lives(Alice) == 5, has_bookGenre(Alice) == historical_fiction, has_cigar(Alice) == blends, has_nationality(Alice) == brit, has_pet(Alice) == hamster), And(lives(Eric) == 6, has_bookGenre(Eric) == mystery, has_cigar(Eric) == blue_master, has_nationality(Eric) == german, has_pet(Eric) == cat) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-18",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Arnold`, `Peter`, `Eric`\n - The mothers' names in different houses are unique: `Penny`, `Aniya`, `Kailyn`, `Janelle`, `Holly`\n - The people keep unique animals: `cat`, `bird`, `dog`, `fish`, `horse`\n - Everyone has a favorite smoothie: `desert`, `dragonfruit`, `cherry`, `watermelon`, `lime`\n - Each person has an occupation: `doctor`, `engineer`, `artist`, `teacher`, `lawyer`\n\nClues:\n1. Bob is the Desert smoothie lover.\n2. The cat lover is the person who is an engineer.\n3. The person whose mother's name is Penny is the bird keeper.\n4. The person who is a lawyer is the fish enthusiast.\n5. The person who likes Cherry smoothies is directly left of Alice.\n6. The Watermelon smoothie lover and the person who is an engineer are next to each other.\n7. The person whose mother's name is Holly is the dog owner.\n8. The person who is a teacher is in the first house.\n9. The person whose mother's name is Penny is in the second house.\n10. The person who drinks Lime smoothies is the person who is a doctor.\n11. The person whose mother's name is Janelle is the person who is a lawyer.\n12. Arnold is not in the third house.\n13. The Dragonfruit smoothie lover is directly left of Peter.\n14. The person whose mother's name is Kailyn is the Dragonfruit smoothie lover.\n15. Arnold is somewhere to the right of Peter.\n16. The dog owner is not in the fifth house.\n17. The Watermelon smoothie lover is somewhere to the left of the Desert smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Mother",
        "Animal",
        "Smoothie",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "Kailyn",
          "horse",
          "dragonfruit",
          "teacher"
        ],
        [
          "2",
          "Peter",
          "Penny",
          "bird",
          "cherry",
          "artist"
        ],
        [
          "3",
          "Alice",
          "Holly",
          "dog",
          "lime",
          "doctor"
        ],
        [
          "4",
          "Arnold",
          "Janelle",
          "fish",
          "watermelon",
          "lawyer"
        ],
        [
          "5",
          "Bob",
          "Aniya",
          "cat",
          "desert",
          "engineer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Arnold, Peter, Eric])\nmothers = EnumSort([Penny, Aniya, Kailyn, Janelle, Holly])\nanimals = EnumSort([cat, bird, dog, fish, horse])\nsmoothies = EnumSort([desert, dragonfruit, cherry, watermelon, lime])\noccupations = EnumSort([doctor, engineer, artist, teacher, lawyer])\nlives = Function([people] -> [int])\nhas_mother = Function([people] -> [mothers])\nhas_animal = Function([people] -> [animals])\nhas_smoothie = Function([people] -> [smoothies])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Bob is the Desert smoothie lover\nThe cat lover is the person who is an engineer\nThe person whose mother's name is Penny is the bird keeper\nThe person who is a lawyer is the fish enthusiast\nThe person who likes Cherry smoothies is directly left of Alice\nThe Watermelon smoothie lover and the person who is an engineer are next to each other\nThe person whose mother's name is Holly is the dog owner\nThe person who is a teacher is in the first house\nThe person whose mother's name is Penny is in the second house\nThe person who drinks Lime smoothies is the person who is a doctor\nThe person whose mother's name is Janelle is the person who is a lawyer\nArnold is not in the third house\nThe Dragonfruit smoothie lover is directly left of Peter\nThe person whose mother's name is Kailyn is the Dragonfruit smoothie lover\nArnold is somewhere to the right of Peter\nThe dog owner is not in the fifth house\nThe Watermelon smoothie lover is somewhere to the left of the Desert smoothie lover",
    "queries": "And( And(lives(Eric) == 1, has_mother(Eric) == Kailyn, has_animal(Eric) == horse, has_smoothie(Eric) == dragonfruit, has_occupation(Eric) == teacher), And(lives(Peter) == 2, has_mother(Peter) == Penny, has_animal(Peter) == bird, has_smoothie(Peter) == cherry, has_occupation(Peter) == artist), And(lives(Alice) == 3, has_mother(Alice) == Holly, has_animal(Alice) == dog, has_smoothie(Alice) == lime, has_occupation(Alice) == doctor), And(lives(Arnold) == 4, has_mother(Arnold) == Janelle, has_animal(Arnold) == fish, has_smoothie(Arnold) == watermelon, has_occupation(Arnold) == lawyer), And(lives(Bob) == 5, has_mother(Bob) == Aniya, has_animal(Bob) == cat, has_smoothie(Bob) == desert, has_occupation(Bob) == engineer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-6",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Arnold`, `Alice`\n - People have unique favorite sports: `basketball`, `swimming`, `soccer`, `tennis`\n - People have unique hair colors: `black`, `brown`, `blonde`, `red`\n - Each person has a favorite color: `yellow`, `red`, `white`, `green`\n - The people are of nationalities: `dane`, `norwegian`, `brit`, `swede`\n - Each person has a unique birthday month: `april`, `feb`, `jan`, `sept`\n\nClues:\n1. The person who has brown hair is in the first house.\n2. The person who loves soccer is directly left of the person who loves tennis.\n3. The person who has brown hair is directly left of Eric.\n4. The person who has blonde hair is somewhere to the left of the British person.\n5. The person who loves white is directly left of the Norwegian.\n6. The person who has blonde hair and Arnold are next to each other.\n7. The person whose birthday is in January is the Swedish person.\n8. The person whose birthday is in April is the British person.\n9. The person who loves basketball is somewhere to the right of the person who has black hair.\n10. The person who has brown hair and the person who loves yellow are next to each other.\n11. The person who loves swimming is Peter.\n12. The person whose favorite color is red is Peter.\n13. The person who has blonde hair is the Swedish person.\n14. Eric is the person whose birthday is in February.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "HairColor",
        "Color",
        "Nationality",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "soccer",
          "brown",
          "white",
          "dane",
          "sept"
        ],
        [
          "2",
          "Eric",
          "tennis",
          "black",
          "yellow",
          "norwegian",
          "feb"
        ],
        [
          "3",
          "Peter",
          "swimming",
          "blonde",
          "red",
          "swede",
          "jan"
        ],
        [
          "4",
          "Arnold",
          "basketball",
          "red",
          "green",
          "brit",
          "april"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Arnold, Alice])\nsports = EnumSort([basketball, swimming, soccer, tennis])\nhairColors = EnumSort([black, brown, blonde, red])\ncolors = EnumSort([yellow, red, white, green])\nnationalities = EnumSort([dane, norwegian, brit, swede])\nmonths = EnumSort([april, feb, jan, sept])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_hairColor = Function([people] -> [hairColors])\nhas_color = Function([people] -> [colors])\nhas_nationality = Function([people] -> [nationalities])\nhas_month = Function([people] -> [months])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who has brown hair is in the first house\nThe person who loves soccer is directly left of the person who loves tennis\nThe person who has brown hair is directly left of Eric\nThe person who has blonde hair is somewhere to the left of the British person\nThe person who loves white is directly left of the Norwegian\nThe person who has blonde hair and Arnold are next to each other\nThe person whose birthday is in January is the Swedish person\nThe person whose birthday is in April is the British person\nThe person who loves basketball is somewhere to the right of the person who has black hair\nThe person who has brown hair and the person who loves yellow are next to each other\nThe person who loves swimming is Peter\nThe person whose favorite color is red is Peter\nThe person who has blonde hair is the Swedish person\nEric is the person whose birthday is in February",
    "queries": "And( And( lives(Alice) == 1, has_sport(Alice) == soccer, has_hairColor(Alice) == brown, has_color(Alice) == white, has_nationality(Alice) == dane, has_month(Alice) == sept ), And( lives(Eric) == 2, has_sport(Eric) == tennis, has_hairColor(Eric) == black, has_color(Eric) == yellow, has_nationality(Eric) == norwegian, has_month(Eric) == feb ), And( lives(Peter) == 3, has_sport(Peter) == swimming, has_hairColor(Peter) == blonde, has_color(Peter) == red, has_nationality(Peter) == swede, has_month(Peter) == jan ), And( lives(Arnold) == 4, has_sport(Arnold) == basketball, has_hairColor(Arnold) == red, has_color(Arnold) == green, has_nationality(Arnold) == brit, has_month(Arnold) == april ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-3",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Bob`, `Carol`, `Arnold`, `Eric`\n - Each person has an occupation: `engineer`, `doctor`, `lawyer`, `artist`, `nurse`, `teacher`\n - Everyone has something unique for lunch: `soup`, `stew`, `grilled cheese`, `spaghetti`, `pizza`, `stir fry`\n - Everyone has a favorite smoothie: `cherry`, `dragonfruit`, `watermelon`, `lime`, `blueberry`, `desert`\n - Each person prefers a unique type of vacation: `camping`, `cultural`, `city`, `cruise`, `beach`, `mountain`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `oneplus 9`, `samsung galaxy s21`, `xiaomi mi 11`, `huawei p50`\n\nClues:\n1. The person who likes Cherry smoothies is directly left of the person who enjoys camping trips.\n2. The person who is a lawyer is the person who uses a Xiaomi Mi 11.\n3. The person who is a doctor is Eric.\n4. The person who is a doctor and the Desert smoothie lover are next to each other.\n5. The person who is an artist is the person who prefers city breaks.\n6. The person who loves beach vacations is Alice.\n7. There are two houses between the person who is a pizza lover and the person who uses a Huawei P50.\n8. The person who uses a Xiaomi Mi 11 is the person who enjoys camping trips.\n9. The person who is an artist is directly left of the person who loves eating grilled cheese.\n10. The person who uses a Google Pixel 6 is in the first house.\n11. There is one house between the person who is a teacher and the person who loves stir fry.\n12. There are two houses between the person who is a pizza lover and the person who is an engineer.\n13. The person who is a pizza lover is somewhere to the left of the person who loves eating grilled cheese.\n14. The Watermelon smoothie lover is the person who uses a Xiaomi Mi 11.\n15. The person who loves eating grilled cheese is Carol.\n16. Alice is the person who drinks Blueberry smoothies.\n17. The person who likes Cherry smoothies is the person who loves the stew.\n18. The person who loves the soup is the person who uses a Samsung Galaxy S21.\n19. The person who uses an iPhone 13 is directly left of the Dragonfruit smoothie lover.\n20. The person who loves the stew is somewhere to the left of Peter.\n21. Arnold is somewhere to the right of the Desert smoothie lover.\n22. The person who likes going on cruises is the person who uses a Google Pixel 6.\n23. The person who goes on cultural tours is not in the fifth house.\n24. The person who is a teacher is Alice.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Occupation",
        "Food",
        "Smoothie",
        "Vacation",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "doctor",
          "spaghetti",
          "lime",
          "cruise",
          "google pixel 6"
        ],
        [
          "2",
          "Bob",
          "artist",
          "pizza",
          "desert",
          "city",
          "iphone 13"
        ],
        [
          "3",
          "Carol",
          "nurse",
          "grilled cheese",
          "dragonfruit",
          "cultural",
          "oneplus 9"
        ],
        [
          "4",
          "Alice",
          "teacher",
          "soup",
          "blueberry",
          "beach",
          "samsung galaxy s21"
        ],
        [
          "5",
          "Arnold",
          "engineer",
          "stew",
          "cherry",
          "mountain",
          "huawei p50"
        ],
        [
          "6",
          "Peter",
          "lawyer",
          "stir fry",
          "watermelon",
          "camping",
          "xiaomi mi 11"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Bob, Carol, Arnold, Eric])\noccupations = EnumSort([engineer, doctor, lawyer, artist, nurse, teacher])\nfoods = EnumSort([soup, stew, grilled_cheese, spaghetti, pizza, stir_fry])\nsmoothies = EnumSort([cherry, dragonfruit, watermelon, lime, blueberry, desert])\nvacations = EnumSort([camping, cultural, city, cruise, beach, mountain])\nphones = EnumSort([iphone_13, google_pixel_6, oneplus_9, samsung_galaxy_s21, xiaomi_mi_11, huawei_p50])\nlives = Function([people] -> [int])\nhas_occupation = Function([people] -> [occupations])\nhas_food = Function([people] -> [foods])\nhas_smoothie = Function([people] -> [smoothies])\nhas_vacation = Function([people] -> [vacations])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who likes Cherry smoothies is directly left of the person who enjoys camping trips\nThe person who is a lawyer is the person who uses a Xiaomi Mi 11\nThe person who is a doctor is Eric\nThe person who is a doctor and the Desert smoothie lover are next to each other\nThe person who is an artist is the person who prefers city breaks\nThe person who loves beach vacations is Alice\nThere are two houses between the person who is a pizza lover and the person who uses a Huawei P50\nThe person who uses a Xiaomi Mi 11 is the person who enjoys camping trips\nThe person who is an artist is directly left of the person who loves eating grilled cheese\nThe person who uses a Google Pixel 6 is in the first house\nThere is one house between the person who is a teacher and the person who loves stir fry\nThere are two houses between the person who is a pizza lover and the person who is an engineer\nThe person who is a pizza lover is somewhere to the left of the person who loves eating grilled cheese\nThe Watermelon smoothie lover is the person who uses a Xiaomi Mi 11\nThe person who loves eating grilled cheese is Carol\nAlice is the person who drinks Blueberry smoothies\nThe person who likes Cherry smoothies is the person who loves the stew\nThe person who loves the soup is the person who uses a Samsung Galaxy S21\nThe person who uses an iPhone 13 is directly left of the Dragonfruit smoothie lover\nThe person who loves the stew is somewhere to the left of Peter\nArnold is somewhere to the right of the Desert smoothie lover\nThe person who likes going on cruises is the person who uses a Google Pixel 6\nThe person who goes on cultural tours is not in the fifth house\nThe person who is a teacher is Alice",
    "queries": "And( And(lives(Eric) == 1, has_occupation(Eric) == doctor, has_food(Eric) == spaghetti, has_smoothie(Eric) == lime, has_vacation(Eric) == cruise, has_phone(Eric) == google_pixel_6), And(lives(Bob) == 2, has_occupation(Bob) == artist, has_food(Bob) == pizza, has_smoothie(Bob) == desert, has_vacation(Bob) == city, has_phone(Bob) == iphone_13), And(lives(Carol) == 3, has_occupation(Carol) == nurse, has_food(Carol) == grilled_cheese, has_smoothie(Carol) == dragonfruit, has_vacation(Carol) == cultural, has_phone(Carol) == oneplus_9), And(lives(Alice) == 4, has_occupation(Alice) == teacher, has_food(Alice) == soup, has_smoothie(Alice) == blueberry, has_vacation(Alice) == beach, has_phone(Alice) == samsung_galaxy_s21), And(lives(Arnold) == 5, has_occupation(Arnold) == engineer, has_food(Arnold) == stew, has_smoothie(Arnold) == cherry, has_vacation(Arnold) == mountain, has_phone(Arnold) == huawei_p50), And(lives(Peter) == 6, has_occupation(Peter) == lawyer, has_food(Peter) == stir_fry, has_smoothie(Peter) == watermelon, has_vacation(Peter) == camping, has_phone(Peter) == xiaomi_mi_11) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-36",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Carol`, `Alice`, `Eric`, `Arnold`, `Peter`\n - Everyone has something unique for lunch: `pizza`, `spaghetti`, `soup`, `grilled cheese`, `stew`, `stir fry`\n - Each person has a unique level of education: `associate`, `doctorate`, `trade school`, `high school`, `master`, `bachelor`\n - The people keep unique animals: `horse`, `fish`, `rabbit`, `cat`, `bird`, `dog`\n - Each person lives in a unique style of house: `ranch`, `victorian`, `modern`, `craftsman`, `mediterranean`, `colonial`\n\nClues:\n1. The person residing in a Victorian house is in the fourth house.\n2. The fish enthusiast is in the first house.\n3. The person in a ranch-style home is the bird keeper.\n4. The person residing in a Victorian house is somewhere to the left of the person who loves the soup.\n5. Carol is directly left of the person who keeps horses.\n6. The person who loves stir fry is the person with a doctorate.\n7. The person with a master's degree is somewhere to the left of the person with a doctorate.\n8. There is one house between the person in a Mediterranean-style villa and the person with a bachelor's degree.\n9. The person who attended trade school is the cat lover.\n10. The person with a master's degree is the person who is a pizza lover.\n11. The person who is a pizza lover is somewhere to the right of Alice.\n12. The person living in a colonial-style house is the person who loves the stew.\n13. Arnold is the person with a master's degree.\n14. There is one house between Arnold and the person who loves eating grilled cheese.\n15. The person in a modern-style house and the person who attended trade school are next to each other.\n16. Eric is directly left of the person with a doctorate.\n17. Alice and the person in a Mediterranean-style villa are next to each other.\n18. The person with an associate's degree is directly left of Eric.\n19. The dog owner is Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Education",
        "Animal",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "stew",
          "high school",
          "fish",
          "colonial"
        ],
        [
          "2",
          "Arnold",
          "pizza",
          "master",
          "rabbit",
          "mediterranean"
        ],
        [
          "3",
          "Carol",
          "spaghetti",
          "associate",
          "bird",
          "ranch"
        ],
        [
          "4",
          "Eric",
          "grilled cheese",
          "bachelor",
          "horse",
          "victorian"
        ],
        [
          "5",
          "Bob",
          "stir fry",
          "doctorate",
          "dog",
          "modern"
        ],
        [
          "6",
          "Peter",
          "soup",
          "trade school",
          "cat",
          "craftsman"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Carol, Alice, Eric, Arnold, Peter])\nfoods = EnumSort([pizza, spaghetti, soup, grilled_cheese, stew, stir_fry])\neducation_levels = EnumSort([associate, doctorate, trade_school, high_school, master, bachelor])\nanimals = EnumSort([horse, fish, rabbit, cat, bird, dog])\nhouse_styles = EnumSort([ranch, victorian, modern, craftsman, mediterranean, colonial])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_education = Function([people] -> [education_levels])\nhas_animal = Function([people] -> [animals])\nhas_house_style = Function([people] -> [house_styles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person residing in a Victorian house is in the fourth house\nThe fish enthusiast is in the first house\nThe person in a ranch-style home is the bird keeper\nThe person residing in a Victorian house is somewhere to the left of the person who loves the soup\nCarol is directly left of the person who keeps horses\nThe person who loves stir fry is the person with a doctorate\nThe person with a master's degree is somewhere to the left of the person with a doctorate\nThere is one house between the person in a Mediterranean-style villa and the person with a bachelor's degree\nThe person who attended trade school is the cat lover\nThe person with a master's degree is the person who is a pizza lover\nThe person who is a pizza lover is somewhere to the right of Alice\nThe person living in a colonial-style house is the person who loves the stew\nArnold is the person with a master's degree\nThere is one house between Arnold and the person who loves eating grilled cheese\nThe person in a modern-style house and the person who attended trade school are next to each other\nEric is directly left of the person with a doctorate\nAlice and the person in a Mediterranean-style villa are next to each other\nThe person with an associate's degree is directly left of Eric\nThe dog owner is Bob",
    "queries": "And( And(lives(Alice) == 1, has_food(Alice) == stew, has_education(Alice) == high_school, has_animal(Alice) == fish, has_house_style(Alice) == colonial), And(lives(Arnold) == 2, has_food(Arnold) == pizza, has_education(Arnold) == master, has_animal(Arnold) == rabbit, has_house_style(Arnold) == mediterranean), And(lives(Carol) == 3, has_food(Carol) == spaghetti, has_education(Carol) == associate, has_animal(Carol) == bird, has_house_style(Carol) == ranch), And(lives(Eric) == 4, has_food(Eric) == grilled_cheese, has_education(Eric) == bachelor, has_animal(Eric) == horse, has_house_style(Eric) == victorian), And(lives(Bob) == 5, has_food(Bob) == stir_fry, has_education(Bob) == doctorate, has_animal(Bob) == dog, has_house_style(Bob) == modern), And(lives(Peter) == 6, has_food(Peter) == soup, has_education(Peter) == trade_school, has_animal(Peter) == cat, has_house_style(Peter) == craftsman) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-38",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Carol`, `Eric`, `Bob`, `Alice`, `Peter`\n - Each person has a unique birthday month: `feb`, `mar`, `sept`, `jan`, `may`, `april`\n - Everyone has something unique for lunch: `stew`, `soup`, `grilled cheese`, `stir fry`, `spaghetti`, `pizza`\n - People have unique heights: `very short`, `average`, `super tall`, `short`, `very tall`, `tall`\n - People own unique car models: `chevrolet silverado`, `ford f150`, `bmw 3 series`, `tesla model 3`, `toyota camry`, `honda civic`\n\nClues:\n1. The person who owns a Honda Civic is the person who is short.\n2. The person who owns a Ford F-150 is in the fifth house.\n3. The person who loves stir fry is somewhere to the left of Eric.\n4. The person whose birthday is in May is somewhere to the left of Carol.\n5. The person who is very short is somewhere to the left of the person whose birthday is in April.\n6. The person who owns a BMW 3 Series is not in the third house.\n7. There are two houses between the person who loves stir fry and the person who is a pizza lover.\n8. The person who loves the soup is directly left of Eric.\n9. The person who loves the spaghetti eater and the person whose birthday is in May are next to each other.\n10. Alice is directly left of the person who owns a BMW 3 Series.\n11. The person who owns a Tesla Model 3 is somewhere to the left of the person who is tall.\n12. The person who is very tall is the person who owns a Toyota Camry.\n13. Peter is directly left of the person who is a pizza lover.\n14. The person who loves the stew is not in the third house.\n15. There is one house between the person whose birthday is in September and the person who is very short.\n16. There is one house between the person whose birthday is in March and the person who is super tall.\n17. The person who is tall is Bob.\n18. The person whose birthday is in May is somewhere to the right of Alice.\n19. The person who is very short is in the fourth house.\n20. The person whose birthday is in March is the person who is short.\n21. Carol is the person who owns a Tesla Model 3.\n22. Eric is the person whose birthday is in January.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Food",
        "Height",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "mar",
          "stir fry",
          "short",
          "honda civic"
        ],
        [
          "2",
          "Arnold",
          "sept",
          "spaghetti",
          "average",
          "bmw 3 series"
        ],
        [
          "3",
          "Peter",
          "may",
          "grilled cheese",
          "super tall",
          "chevrolet silverado"
        ],
        [
          "4",
          "Carol",
          "feb",
          "pizza",
          "very short",
          "tesla model 3"
        ],
        [
          "5",
          "Bob",
          "april",
          "soup",
          "tall",
          "ford f150"
        ],
        [
          "6",
          "Eric",
          "jan",
          "stew",
          "very tall",
          "toyota camry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Carol, Eric, Bob, Alice, Peter])\nmonths = EnumSort([feb, mar, sept, jan, may, april])\nfoods = EnumSort([stew, soup, grilled_cheese, stir_fry, spaghetti, pizza])\nheights = EnumSort([very_short, average, super_tall, short, very_tall, tall])\ncars = EnumSort([chevrolet_silverado, ford_f150, bmw_3_series, tesla_model_3, toyota_camry, honda_civic])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nhas_food = Function([people] -> [foods])\nhas_height = Function([people] -> [heights])\nhas_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who owns a Honda Civic is the person who is short\nThe person who owns a Ford F-150 is in the fifth house\nThe person who loves stir fry is somewhere to the left of Eric\nThe person whose birthday is in May is somewhere to the left of Carol\nThe person who is very short is somewhere to the left of the person whose birthday is in April\nThe person who owns a BMW 3 Series is not in the third house\nThere are two houses between the person who loves stir fry and the person who is a pizza lover\nThe person who loves the soup is directly left of Eric\nThe person who loves the spaghetti eater and the person whose birthday is in May are next to each other\nAlice is directly left of the person who owns a BMW 3 Series\nThe person who owns a Tesla Model 3 is somewhere to the left of the person who is tall\nThe person who is very tall is the person who owns a Toyota Camry\nPeter is directly left of the person who is a pizza lover\nThe person who loves the stew is not in the third house\nThere is one house between the person whose birthday is in September and the person who is very short\nThere is one house between the person whose birthday is in March and the person who is super tall\nThe person who is tall is Bob\nThe person whose birthday is in May is somewhere to the right of Alice\nThe person who is very short is in the fourth house\nThe person whose birthday is in March is the person who is short\nCarol is the person who owns a Tesla Model 3\nEric is the person whose birthday is in January",
    "queries": "And( And(lives(Alice) == 1, has_birthday(Alice) == mar, has_food(Alice) == stir_fry, has_height(Alice) == short, has_car(Alice) == honda_civic), And(lives(Arnold) == 2, has_birthday(Arnold) == sept, has_food(Arnold) == spaghetti, has_height(Arnold) == average, has_car(Arnold) == bmw_3_series), And(lives(Peter) == 3, has_birthday(Peter) == may, has_food(Peter) == grilled_cheese, has_height(Peter) == super_tall, has_car(Peter) == chevrolet_silverado), And(lives(Carol) == 4, has_birthday(Carol) == feb, has_food(Carol) == pizza, has_height(Carol) == very_short, has_car(Carol) == tesla_model_3), And(lives(Bob) == 5, has_birthday(Bob) == april, has_food(Bob) == soup, has_height(Bob) == tall, has_car(Bob) == ford_f150), And(lives(Eric) == 6, has_birthday(Eric) == jan, has_food(Eric) == stew, has_height(Eric) == very_tall, has_car(Eric) == toyota_camry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-13",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Alice`, `Bob`\n - Everyone has something unique for lunch: `stir fry`, `spaghetti`, `stew`, `grilled cheese`, `pizza`\n - People own unique car models: `ford f150`, `tesla model 3`, `bmw 3 series`, `toyota camry`, `honda civic`\n - People use unique phone models: `iphone 13`, `google pixel 6`, `samsung galaxy s21`, `oneplus 9`, `huawei p50`\n - Each person has an occupation: `teacher`, `lawyer`, `doctor`, `artist`, `engineer`\n - Each person has a unique favorite drink: `tea`, `milk`, `water`, `root beer`, `coffee`\n\nClues:\n1. The root beer lover is the person who owns a Honda Civic.\n2. The person who likes milk is directly left of the person who loves eating grilled cheese.\n3. Alice is the person who uses a Samsung Galaxy S21.\n4. Alice is the person who loves stir fry.\n5. The tea drinker is not in the fifth house.\n6. The person who owns a BMW 3 Series is somewhere to the left of the tea drinker.\n7. The person who is a doctor is Arnold.\n8. The person who uses an iPhone 13 is the coffee drinker.\n9. The person who is an engineer is the person who owns a BMW 3 Series.\n10. The person who loves the stew is the person who uses an iPhone 13.\n11. The person who is a doctor is directly left of the person who uses a OnePlus 9.\n12. The person who owns a Honda Civic is directly left of the person who loves the spaghetti eater.\n13. The person who uses a Google Pixel 6 is the tea drinker.\n14. Alice is the person who is an artist.\n15. There is one house between Alice and the person who owns a Ford F-150.\n16. Arnold is the person who owns a Toyota Camry.\n17. Eric is in the fourth house.\n18. The person who uses a OnePlus 9 is the person who is a lawyer.\n19. The person who loves eating grilled cheese is Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "CarModel",
        "PhoneModel",
        "Occupation",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "stew",
          "bmw 3 series",
          "iphone 13",
          "engineer",
          "coffee"
        ],
        [
          "2",
          "Alice",
          "stir fry",
          "honda civic",
          "samsung galaxy s21",
          "artist",
          "root beer"
        ],
        [
          "3",
          "Arnold",
          "spaghetti",
          "toyota camry",
          "google pixel 6",
          "doctor",
          "tea"
        ],
        [
          "4",
          "Eric",
          "pizza",
          "ford f150",
          "oneplus 9",
          "lawyer",
          "milk"
        ],
        [
          "5",
          "Peter",
          "grilled cheese",
          "tesla model 3",
          "huawei p50",
          "teacher",
          "water"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Alice, Bob])\nfoods = EnumSort([stir_fry, spaghetti, stew, grilled_cheese, pizza])\ncars = EnumSort([ford_f150, tesla_model_3, bmw_3_series, toyota_camry, honda_civic])\nphones = EnumSort([iphone_13, google_pixel_6, samsung_galaxy_s21, oneplus_9, huawei_p50])\noccupations = EnumSort([teacher, lawyer, doctor, artist, engineer])\ndrinks = EnumSort([tea, milk, water, root_beer, coffee])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_car = Function([people] -> [cars])\nhas_phone = Function([people] -> [phones])\nhas_occupation = Function([people] -> [occupations])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The root beer lover is the person who owns a Honda Civic\nThe person who likes milk is directly left of the person who loves eating grilled cheese\nAlice is the person who uses a Samsung Galaxy S21\nAlice is the person who loves stir fry\nThe tea drinker is not in the fifth house\nThe person who owns a BMW 3 Series is somewhere to the left of the tea drinker\nThe person who is a doctor is Arnold\nThe person who uses an iPhone 13 is the coffee drinker\nThe person who is an engineer is the person who owns a BMW 3 Series\nThe person who loves the stew is the person who uses an iPhone 13\nThe person who is a doctor is directly left of the person who uses a OnePlus 9\nThe person who owns a Honda Civic is directly left of the person who loves the spaghetti eater\nThe person who uses a Google Pixel 6 is the tea drinker\nAlice is the person who is an artist\nThere is one house between Alice and the person who owns a Ford F-150\nArnold is the person who owns a Toyota Camry\nEric is in the fourth house\nThe person who uses a OnePlus 9 is the person who is a lawyer\nThe person who loves eating grilled cheese is Peter",
    "queries": "And( And(lives(Bob) == 1, has_food(Bob) == stew, has_car(Bob) == bmw_3_series, has_phone(Bob) == iphone_13, has_occupation(Bob) == engineer, has_drink(Bob) == coffee), And(lives(Alice) == 2, has_food(Alice) == stir_fry, has_car(Alice) == honda_civic, has_phone(Alice) == samsung_galaxy_s21, has_occupation(Alice) == artist, has_drink(Alice) == root_beer), And(lives(Arnold) == 3, has_food(Arnold) == spaghetti, has_car(Arnold) == toyota_camry, has_phone(Arnold) == google_pixel_6, has_occupation(Arnold) == doctor, has_drink(Arnold) == tea), And(lives(Eric) == 4, has_food(Eric) == pizza, has_car(Eric) == ford_f150, has_phone(Eric) == oneplus_9, has_occupation(Eric) == lawyer, has_drink(Eric) == milk), And(lives(Peter) == 5, has_food(Peter) == grilled_cheese, has_car(Peter) == tesla_model_3, has_phone(Peter) == huawei_p50, has_occupation(Peter) == teacher, has_drink(Peter) == water) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-1",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Carol`, `Bob`, `Alice`, `Peter`\n - People have unique heights: `short`, `very short`, `very tall`, `tall`, `average`, `super tall`\n - Each person has a unique type of pet: `rabbit`, `bird`, `cat`, `fish`, `hamster`, `dog`\n - People use unique phone models: `huawei p50`, `google pixel 6`, `iphone 13`, `samsung galaxy s21`, `xiaomi mi 11`, `oneplus 9`\n\nClues:\n1. The person who uses a Google Pixel 6 is somewhere to the right of the person who is very short.\n2. The person who has a cat is the person who uses a Google Pixel 6.\n3. The person with a pet hamster is Arnold.\n4. Bob is the person who has a cat.\n5. There is one house between Eric and the person who is tall.\n6. The person who owns a rabbit is the person who is super tall.\n7. The person who is very tall is Alice.\n8. The person who is very tall is somewhere to the right of the person who has an average height.\n9. There is one house between the person who is super tall and Carol.\n10. The person who owns a dog is not in the sixth house.\n11. The person who is short is the person who uses a Samsung Galaxy S21.\n12. The person who is tall and the person who uses a Huawei P50 are next to each other.\n13. The person who uses a OnePlus 9 is not in the fourth house.\n14. The person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses an iPhone 13.\n15. The person who is tall is not in the fourth house.\n16. Peter is the person who uses a OnePlus 9.\n17. The person who uses a Samsung Galaxy S21 is directly left of Peter.\n18. Peter is directly left of the person who is tall.\n19. Carol is the person with an aquarium of fish.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Pet",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "short",
          "dog",
          "samsung galaxy s21"
        ],
        [
          "2",
          "Peter",
          "super tall",
          "rabbit",
          "oneplus 9"
        ],
        [
          "3",
          "Arnold",
          "tall",
          "hamster",
          "xiaomi mi 11"
        ],
        [
          "4",
          "Carol",
          "very short",
          "fish",
          "huawei p50"
        ],
        [
          "5",
          "Bob",
          "average",
          "cat",
          "google pixel 6"
        ],
        [
          "6",
          "Alice",
          "very tall",
          "bird",
          "iphone 13"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Carol, Bob, Alice, Peter])\nheights = EnumSort([short, very_short, very_tall, tall, average, super_tall])\npets = EnumSort([rabbit, bird, cat, fish, hamster, dog])\nphones = EnumSort([huawei_p50, google_pixel_6, iphone_13, samsung_galaxy_s21, xiaomi_mi_11, oneplus_9])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_pet = Function([people] -> [pets])\nuses_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses a Google Pixel 6 is somewhere to the right of the person who is very short\nThe person who has a cat is the person who uses a Google Pixel 6\nThe person with a pet hamster is Arnold\nBob is the person who has a cat\nThere is one house between Eric and the person who is tall\nThe person who owns a rabbit is the person who is super tall\nThe person who is very tall is Alice\nThe person who is very tall is somewhere to the right of the person who has an average height\nThere is one house between the person who is super tall and Carol\nThe person who owns a dog is not in the sixth house\nThe person who is short is the person who uses a Samsung Galaxy S21\nThe person who is tall and the person who uses a Huawei P50 are next to each other\nThe person who uses a OnePlus 9 is not in the fourth house\nThe person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses an iPhone 13\nThe person who is tall is not in the fourth house\nPeter is the person who uses a OnePlus 9\nThe person who uses a Samsung Galaxy S21 is directly left of Peter\nPeter is directly left of the person who is tall\nCarol is the person with an aquarium of fish",
    "queries": "And( And(lives(Eric) == 1, has_height(Eric) == short, has_pet(Eric) == dog, uses_phone(Eric) == samsung_galaxy_s21), And(lives(Peter) == 2, has_height(Peter) == super_tall, has_pet(Peter) == rabbit, uses_phone(Peter) == oneplus_9), And(lives(Arnold) == 3, has_height(Arnold) == tall, has_pet(Arnold) == hamster, uses_phone(Arnold) == xiaomi_mi_11), And(lives(Carol) == 4, has_height(Carol) == very_short, has_pet(Carol) == fish, uses_phone(Carol) == huawei_p50), And(lives(Bob) == 5, has_height(Bob) == average, has_pet(Bob) == cat, uses_phone(Bob) == google_pixel_6), And(lives(Alice) == 6, has_height(Alice) == very_tall, has_pet(Alice) == bird, uses_phone(Alice) == iphone_13) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-5",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Eric`, `Alice`, `Bob`, `Carol`\n - Everyone has a favorite smoothie: `dragonfruit`, `cherry`, `lime`, `desert`, `blueberry`, `watermelon`\n - Each person has a unique type of pet: `rabbit`, `fish`, `bird`, `hamster`, `cat`, `dog`\n - Each person has a unique level of education: `master`, `bachelor`, `high school`, `trade school`, `associate`, `doctorate`\n - People have unique heights: `short`, `very tall`, `very short`, `tall`, `average`, `super tall`\n\nClues:\n1. The person with an aquarium of fish is in the first house.\n2. The person with a doctorate is somewhere to the left of the person who owns a dog.\n3. Peter and the person with a high school diploma are next to each other.\n4. There is one house between the person with a pet hamster and the person who owns a rabbit.\n5. The person who has a cat is Eric.\n6. Bob and the person who owns a dog are next to each other.\n7. The person who is tall is Carol.\n8. The person with a master's degree is the person with a pet hamster.\n9. Peter is the person who is very tall.\n10. The person who likes Cherry smoothies is the person who is very tall.\n11. The person who is super tall is somewhere to the right of Arnold.\n12. The Watermelon smoothie lover is in the sixth house.\n13. The person who is super tall is the Desert smoothie lover.\n14. The person who is very short is the person with an associate's degree.\n15. The person with an associate's degree and the Watermelon smoothie lover are next to each other.\n16. The person who drinks Lime smoothies is the person with a pet hamster.\n17. The person who is short is in the second house.\n18. The person who drinks Blueberry smoothies is the person who attended trade school.\n19. The person who is very short is somewhere to the right of Bob.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Smoothie",
        "Pet",
        "Education",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "blueberry",
          "fish",
          "trade school",
          "tall"
        ],
        [
          "2",
          "Arnold",
          "lime",
          "hamster",
          "master",
          "short"
        ],
        [
          "3",
          "Peter",
          "cherry",
          "bird",
          "doctorate",
          "very tall"
        ],
        [
          "4",
          "Bob",
          "desert",
          "rabbit",
          "high school",
          "super tall"
        ],
        [
          "5",
          "Alice",
          "dragonfruit",
          "dog",
          "associate",
          "very short"
        ],
        [
          "6",
          "Eric",
          "watermelon",
          "cat",
          "bachelor",
          "average"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Eric, Alice, Bob, Carol])\nsmoothies = EnumSort([dragonfruit, cherry, lime, desert, blueberry, watermelon])\npets = EnumSort([rabbit, fish, bird, hamster, cat, dog])\neducation = EnumSort([master, bachelor, high_school, trade_school, associate, doctorate])\nheights = EnumSort([short, very_tall, very_short, tall, average, super_tall])\nlives = Function([people] -> [int])\nhas_smoothie = Function([people] -> [smoothies])\nhas_pet = Function([people] -> [pets])\nhas_education = Function([people] -> [education])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with an aquarium of fish is in the first house\nThe person with a doctorate is somewhere to the left of the person who owns a dog\nPeter and the person with a high school diploma are next to each other\nThere is one house between the person with a pet hamster and the person who owns a rabbit\nThe person who has a cat is Eric\nBob and the person who owns a dog are next to each other\nThe person who is tall is Carol\nThe person with a master's degree is the person with a pet hamster\nPeter is the person who is very tall\nThe person who likes Cherry smoothies is the person who is very tall\nThe person who is super tall is somewhere to the right of Arnold\nThe Watermelon smoothie lover is in the sixth house\nThe person who is super tall is the Desert smoothie lover\nThe person who is very short is the person with an associate's degree\nThe person with an associate's degree and the Watermelon smoothie lover are next to each other\nThe person who drinks Lime smoothies is the person with a pet hamster\nThe person who is short is in the second house\nThe person who drinks Blueberry smoothies is the person who attended trade school\nThe person who is very short is somewhere to the right of Bob",
    "queries": "And( And(lives(Carol) == 1, has_smoothie(Carol) == blueberry, has_pet(Carol) == fish, has_education(Carol) == trade_school, has_height(Carol) == tall), And(lives(Arnold) == 2, has_smoothie(Arnold) == lime, has_pet(Arnold) == hamster, has_education(Arnold) == master, has_height(Arnold) == short), And(lives(Peter) == 3, has_smoothie(Peter) == cherry, has_pet(Peter) == bird, has_education(Peter) == doctorate, has_height(Peter) == very_tall), And(lives(Bob) == 4, has_smoothie(Bob) == desert, has_pet(Bob) == rabbit, has_education(Bob) == high_school, has_height(Bob) == super_tall), And(lives(Alice) == 5, has_smoothie(Alice) == dragonfruit, has_pet(Alice) == dog, has_education(Alice) == associate, has_height(Alice) == very_short), And(lives(Eric) == 6, has_smoothie(Eric) == watermelon, has_pet(Eric) == cat, has_education(Eric) == bachelor, has_height(Eric) == average) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-37",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Arnold`, `Peter`, `Alice`\n - People have unique favorite sports: `basketball`, `swimming`, `tennis`, `soccer`\n - People own unique car models: `tesla model 3`, `ford f150`, `honda civic`, `toyota camry`\n - Everyone has a unique favorite cigar: `blue master`, `pall mall`, `prince`, `dunhill`\n - Each person has an occupation: `engineer`, `doctor`, `artist`, `teacher`\n - Each person has a unique type of pet: `bird`, `dog`, `cat`, `fish`\n\nClues:\n1. The Dunhill smoker is in the second house.\n2. The person who keeps a pet bird is the person who loves swimming.\n3. The person who is an engineer is Arnold.\n4. There are two houses between the person who is a teacher and the person partial to Pall Mall.\n5. The person who is an artist is somewhere to the right of the Prince smoker.\n6. The person who owns a Tesla Model 3 is not in the fourth house.\n7. Eric is somewhere to the right of the person who owns a dog.\n8. The person who loves tennis and the person who is an engineer are next to each other.\n9. The person with an aquarium of fish is Alice.\n10. Eric is the person who owns a Tesla Model 3.\n11. The person who owns a Honda Civic is not in the first house.\n12. Peter is the person who loves soccer.\n13. The person who owns a Toyota Camry is the person who is a doctor.\n14. The person who smokes Blue Master is the person who loves swimming.\n15. Peter is the person who is a doctor.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "CarModel",
        "Cigar",
        "Occupation",
        "Pet"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "tennis",
          "ford f150",
          "prince",
          "teacher",
          "fish"
        ],
        [
          "2",
          "Arnold",
          "basketball",
          "honda civic",
          "dunhill",
          "engineer",
          "dog"
        ],
        [
          "3",
          "Eric",
          "swimming",
          "tesla model 3",
          "blue master",
          "artist",
          "bird"
        ],
        [
          "4",
          "Peter",
          "soccer",
          "toyota camry",
          "pall mall",
          "doctor",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Arnold, Peter, Alice])\nsports = EnumSort([basketball, swimming, tennis, soccer])\ncars = EnumSort([tesla_model_3, ford_f150, honda_civic, toyota_camry])\ncigars = EnumSort([blue_master, pall_mall, prince, dunhill])\noccupations = EnumSort([engineer, doctor, artist, teacher])\npets = EnumSort([bird, dog, cat, fish])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_car = Function([people] -> [cars])\nhas_cigar = Function([people] -> [cigars])\nhas_occupation = Function([people] -> [occupations])\nhas_pet = Function([people] -> [pets])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The Dunhill smoker is in the second house\nThe person who keeps a pet bird is the person who loves swimming\nThe person who is an engineer is Arnold\nThere are two houses between the person who is a teacher and the person partial to Pall Mall\nThe person who is an artist is somewhere to the right of the Prince smoker\nThe person who owns a Tesla Model 3 is not in the fourth house\nEric is somewhere to the right of the person who owns a dog\nThe person who loves tennis and the person who is an engineer are next to each other\nThe person with an aquarium of fish is Alice\nEric is the person who owns a Tesla Model 3\nThe person who owns a Honda Civic is not in the first house\nPeter is the person who loves soccer\nThe person who owns a Toyota Camry is the person who is a doctor\nThe person who smokes Blue Master is the person who loves swimming\nPeter is the person who is a doctor",
    "queries": "And( And( lives(Alice) == 1, has_sport(Alice) == tennis, has_car(Alice) == ford_f150, has_cigar(Alice) == prince, has_occupation(Alice) == teacher, has_pet(Alice) == fish ), And( lives(Arnold) == 2, has_sport(Arnold) == basketball, has_car(Arnold) == honda_civic, has_cigar(Arnold) == dunhill, has_occupation(Arnold) == engineer, has_pet(Arnold) == dog ), And( lives(Eric) == 3, has_sport(Eric) == swimming, has_car(Eric) == tesla_model_3, has_cigar(Eric) == blue_master, has_occupation(Eric) == artist, has_pet(Eric) == bird ), And( lives(Peter) == 4, has_sport(Peter) == soccer, has_car(Peter) == toyota_camry, has_cigar(Peter) == pall_mall, has_occupation(Peter) == doctor, has_pet(Peter) == cat ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-38",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Alice`, `Peter`, `Eric`\n - Each person has a unique birthday month: `sept`, `feb`, `april`, `jan`\n - The mothers' names in different houses are unique: `Aniya`, `Kailyn`, `Holly`, `Janelle`\n - The people keep unique animals: `horse`, `bird`, `cat`, `fish`\n - Each person has a favorite color: `green`, `white`, `yellow`, `red`\n - People have unique favorite sports: `swimming`, `basketball`, `tennis`, `soccer`\n\nClues:\n1. The bird keeper is The person whose mother's name is Kailyn.\n2. The fish enthusiast is not in the fourth house.\n3. The person who loves white is Arnold.\n4. The person who keeps horses is Peter.\n5. The person who keeps horses is not in the first house.\n6. The person whose mother's name is Kailyn is Arnold.\n7. The person whose birthday is in January is in the first house.\n8. The person whose birthday is in April is somewhere to the left of the person whose birthday is in September.\n9. Alice is the person whose birthday is in September.\n10. The person whose mother's name is Aniya and the person whose birthday is in September are next to each other.\n11. Peter is directly left of the person whose favorite color is red.\n12. There is one house between the person whose birthday is in April and the person who loves soccer.\n13. The fish enthusiast is the person whose birthday is in September.\n14. The person who loves swimming is The person whose mother's name is Holly.\n15. The person whose favorite color is green is the person who loves swimming.\n16. The person who loves yellow is the person who loves basketball.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Mother",
        "Animal",
        "Color",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "jan",
          "Holly",
          "cat",
          "green",
          "swimming"
        ],
        [
          "2",
          "Peter",
          "april",
          "Aniya",
          "horse",
          "yellow",
          "basketball"
        ],
        [
          "3",
          "Alice",
          "sept",
          "Janelle",
          "fish",
          "red",
          "tennis"
        ],
        [
          "4",
          "Arnold",
          "feb",
          "Kailyn",
          "bird",
          "white",
          "soccer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Alice, Peter, Eric])\nbirthdayMonths = EnumSort([sept, feb, april, jan])\nmothersNames = EnumSort([Aniya, Kailyn, Holly, Janelle])\nanimals = EnumSort([horse, bird, cat, fish])\ncolors = EnumSort([green, white, yellow, red])\nsports = EnumSort([swimming, basketball, tennis, soccer])\nlives = Function([people] -> [int])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nhas_motherName = Function([people] -> [mothersNames])\nhas_animal = Function([people] -> [animals])\nhas_color = Function([people] -> [colors])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The bird keeper is The person whose mother's name is Kailyn\nThe fish enthusiast is not in the fourth house\nThe person who loves white is Arnold\nThe person who keeps horses is Peter\nThe person who keeps horses is not in the first house\nThe person whose mother's name is Kailyn is Arnold\nThe person whose birthday is in January is in the first house\nThe person whose birthday is in April is somewhere to the left of the person whose birthday is in September\nAlice is the person whose birthday is in September\nThe person whose mother's name is Aniya and the person whose birthday is in September are next to each other\nPeter is directly left of the person whose favorite color is red\nThere is one house between the person whose birthday is in April and the person who loves soccer\nThe fish enthusiast is the person whose birthday is in September\nThe person who loves swimming is The person whose mother's name is Holly\nThe person whose favorite color is green is the person who loves swimming\nThe person who loves yellow is the person who loves basketball",
    "queries": "And( And( lives(Eric) == 1, has_birthdayMonth(Eric) == jan, has_motherName(Eric) == Holly, has_animal(Eric) == cat, has_color(Eric) == green, has_sport(Eric) == swimming ), And( lives(Peter) == 2, has_birthdayMonth(Peter) == april, has_motherName(Peter) == Aniya, has_animal(Peter) == horse, has_color(Peter) == yellow, has_sport(Peter) == basketball ), And( lives(Alice) == 3, has_birthdayMonth(Alice) == sept, has_motherName(Alice) == Janelle, has_animal(Alice) == fish, has_color(Alice) == red, has_sport(Alice) == tennis ), And( lives(Arnold) == 4, has_birthdayMonth(Arnold) == feb, has_motherName(Arnold) == Kailyn, has_animal(Arnold) == bird, has_color(Arnold) == white, has_sport(Arnold) == soccer ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-4",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Bob`, `Peter`\n - People have unique heights: `average`, `short`, `tall`, `very tall`, `very short`\n - The mothers' names in different houses are unique: `Holly`, `Penny`, `Kailyn`, `Janelle`, `Aniya`\n - Each person has a unique type of pet: `cat`, `dog`, `hamster`, `fish`, `bird`\n - The people keep unique animals: `bird`, `dog`, `fish`, `horse`, `cat`\n - People have unique favorite sports: `swimming`, `basketball`, `baseball`, `tennis`, `soccer`\n\nClues:\n1. The person who loves basketball is the person who keeps a pet bird.\n2. The person who loves soccer is directly left of the person who is very short.\n3. The person whose mother's name is Aniya is directly left of the person who is tall.\n4. The person who loves tennis is Eric.\n5. The person whose mother's name is Holly is in the first house.\n6. The person who owns a dog is somewhere to the right of Bob.\n7. The person who owns a dog is the cat lover.\n8. The person whose mother's name is Aniya is Peter.\n9. The person who is very short is directly left of Alice.\n10. The person whose mother's name is Janelle is the bird keeper.\n11. The person who has a cat is directly left of the person who has an average height.\n12. The person whose mother's name is Penny is the person with an aquarium of fish.\n13. The person with an aquarium of fish is directly left of the dog owner.\n14. The person who is very tall is somewhere to the right of the fish enthusiast.\n15. The person who loves tennis is in the fourth house.\n16. The person who loves basketball is directly left of the person who loves baseball.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Mother",
        "Pet",
        "Animal",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "short",
          "Holly",
          "bird",
          "fish",
          "basketball"
        ],
        [
          "2",
          "Peter",
          "very tall",
          "Aniya",
          "dog",
          "cat",
          "baseball"
        ],
        [
          "3",
          "Arnold",
          "tall",
          "Penny",
          "fish",
          "horse",
          "soccer"
        ],
        [
          "4",
          "Eric",
          "very short",
          "Kailyn",
          "cat",
          "dog",
          "tennis"
        ],
        [
          "5",
          "Alice",
          "average",
          "Janelle",
          "hamster",
          "bird",
          "swimming"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Bob, Peter])\nheights = EnumSort([average, short, tall, very_tall, very_short])\nmothers = EnumSort([Holly, Penny, Kailyn, Janelle, Aniya])\npets = EnumSort([cat, dog, hamster, fish, bird])\nanimals = EnumSort([bird, dog, fish, horse, cat])\nsports = EnumSort([swimming, basketball, baseball, tennis, soccer])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_mother = Function([people] -> [mothers])\nhas_pet = Function([people] -> [pets])\nhas_animal = Function([people] -> [animals])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves basketball is the person who keeps a pet bird\nThe person who loves soccer is directly left of the person who is very short\nThe person whose mother's name is Aniya is directly left of the person who is tall\nThe person who loves tennis is Eric\nThe person whose mother's name is Holly is in the first house\nThe person who owns a dog is somewhere to the right of Bob\nThe person who owns a dog is the cat lover\nThe person whose mother's name is Aniya is Peter\nThe person who is very short is directly left of Alice\nThe person whose mother's name is Janelle is the bird keeper\nThe person who has a cat is directly left of the person who has an average height\nThe person whose mother's name is Penny is the person with an aquarium of fish\nThe person with an aquarium of fish is directly left of the dog owner\nThe person who is very tall is somewhere to the right of the fish enthusiast\nThe person who loves tennis is in the fourth house\nThe person who loves basketball is directly left of the person who loves baseball",
    "queries": "And( And(lives(Bob) == 1, has_height(Bob) == short, has_mother(Bob) == Holly, has_pet(Bob) == bird, has_animal(Bob) == fish, has_sport(Bob) == basketball), And(lives(Peter) == 2, has_height(Peter) == very_tall, has_mother(Peter) == Aniya, has_pet(Peter) == dog, has_animal(Peter) == cat, has_sport(Peter) == baseball), And(lives(Arnold) == 3, has_height(Arnold) == tall, has_mother(Arnold) == Penny, has_pet(Arnold) == fish, has_animal(Arnold) == horse, has_sport(Arnold) == soccer), And(lives(Eric) == 4, has_height(Eric) == very_short, has_mother(Eric) == Kailyn, has_pet(Eric) == cat, has_animal(Eric) == dog, has_sport(Eric) == tennis), And(lives(Alice) == 5, has_height(Alice) == average, has_mother(Alice) == Janelle, has_pet(Alice) == hamster, has_animal(Alice) == bird, has_sport(Alice) == swimming) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-14",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Alice`, `Peter`, `Eric`, `Arnold`\n - Each person has a unique level of education: `master`, `doctorate`, `high school`, `bachelor`, `trade school`, `associate`\n - People have unique favorite book genres: `romance`, `fantasy`, `historical fiction`, `science fiction`, `mystery`, `biography`\n - Each mother is accompanied by their child: `Alice`, `Samantha`, `Timothy`, `Meredith`, `Bella`, `Fred`\n - Everyone has something unique for lunch: `stew`, `soup`, `stir fry`, `spaghetti`, `pizza`, `grilled cheese`\n - People have unique favorite sports: `volleyball`, `basketball`, `tennis`, `baseball`, `swimming`, `soccer`\n\nClues:\n1. Alice is the person who loves swimming.\n2. The person's child is named Alice is directly left of the person who loves historical fiction books.\n3. The person who loves the stew is the person who loves historical fiction books.\n4. The person with a doctorate is the person who loves the soup.\n5. The person who loves science fiction books is in the sixth house.\n6. The person who attended trade school is directly left of the person who loves historical fiction books.\n7. The person who loves baseball and the person's child is named Bella are next to each other.\n8. The person with a master's degree is somewhere to the left of the person who loves mystery books.\n9. The person who loves soccer is somewhere to the left of the person who loves fantasy books.\n10. The person who loves stir fry is the person with an associate's degree.\n11. The person who is a pizza lover is Peter.\n12. Bob is not in the sixth house.\n13. The person's child is named Meredith is directly left of the person who loves fantasy books.\n14. The person's child is named Samantha is Eric.\n15. There is one house between the person who loves eating grilled cheese and Bob.\n16. The person who loves eating grilled cheese is the person's child is named Samantha.\n17. The person who loves volleyball is the person's child is named Samantha.\n18. The person's child is named Fred is somewhere to the left of the person's child is named Samantha.\n19. Bob is the person who loves tennis.\n20. The person who loves soccer is directly left of Carol.\n21. The person who loves eating grilled cheese is somewhere to the left of the person who loves mystery books.\n22. The person's child is named Meredith is the person who loves biography books.\n23. The person's child is named Meredith is the person who loves the soup.\n24. Carol is the person with a high school diploma.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "BookGenre",
        "Children",
        "Food",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "doctorate",
          "biography",
          "Meredith",
          "soup",
          "soccer"
        ],
        [
          "2",
          "Carol",
          "high school",
          "fantasy",
          "Fred",
          "spaghetti",
          "basketball"
        ],
        [
          "3",
          "Eric",
          "master",
          "romance",
          "Samantha",
          "grilled cheese",
          "volleyball"
        ],
        [
          "4",
          "Peter",
          "trade school",
          "mystery",
          "Alice",
          "pizza",
          "baseball"
        ],
        [
          "5",
          "Bob",
          "bachelor",
          "historical fiction",
          "Bella",
          "stew",
          "tennis"
        ],
        [
          "6",
          "Alice",
          "associate",
          "science fiction",
          "Timothy",
          "stir fry",
          "swimming"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Alice, Peter, Eric, Arnold])\neducationLevels = EnumSort([master, doctorate, high_school, bachelor, trade_school, associate])\nbookGenres = EnumSort([romance, fantasy, historical_fiction, science_fiction, mystery, biography])\nchildren = EnumSort([Alice, Samantha, Timothy, Meredith, Bella, Fred])\nfoods = EnumSort([stew, soup, stir_fry, spaghetti, pizza, grilled_cheese])\nsports = EnumSort([volleyball, basketball, tennis, baseball, swimming, soccer])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_child = Function([people] -> [children])\nhas_food = Function([people] -> [foods])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Alice is the person who loves swimming\nThe person's child is named Alice is directly left of the person who loves historical fiction books\nThe person who loves the stew is the person who loves historical fiction books\nThe person with a doctorate is the person who loves the soup\nThe person who loves science fiction books is in the sixth house\nThe person who attended trade school is directly left of the person who loves historical fiction books\nThe person who loves baseball and the person's child is named Bella are next to each other\nThe person with a master's degree is somewhere to the left of the person who loves mystery books\nThe person who loves soccer is somewhere to the left of the person who loves fantasy books\nThe person who loves stir fry is the person with an associate's degree\nThe person who is a pizza lover is Peter\nBob is not in the sixth house\nThe person's child is named Meredith is directly left of the person who loves fantasy books\nThe person's child is named Samantha is Eric\nThere is one house between the person who loves eating grilled cheese and Bob\nThe person who loves eating grilled cheese is the person's child is named Samantha\nThe person who loves volleyball is the person's child is named Samantha\nThe person's child is named Fred is somewhere to the left of the person's child is named Samantha\nBob is the person who loves tennis\nThe person who loves soccer is directly left of Carol\nThe person who loves eating grilled cheese is somewhere to the left of the person who loves mystery books\nThe person's child is named Meredith is the person who loves biography books\nThe person's child is named Meredith is the person who loves the soup\nCarol is the person with a high school diploma",
    "queries": "And( And(lives(Arnold) == 1, has_education(Arnold) == doctorate, has_bookGenre(Arnold) == biography, has_child(Arnold) == Meredith, has_food(Arnold) == soup, has_sport(Arnold) == soccer), And(lives(Carol) == 2, has_education(Carol) == high_school, has_bookGenre(Carol) == fantasy, has_child(Carol) == Fred, has_food(Carol) == spaghetti, has_sport(Carol) == basketball), And(lives(Eric) == 3, has_education(Eric) == master, has_bookGenre(Eric) == romance, has_child(Eric) == Samantha, has_food(Eric) == grilled_cheese, has_sport(Eric) == volleyball), And(lives(Peter) == 4, has_education(Peter) == trade_school, has_bookGenre(Peter) == mystery, has_child(Peter) == Alice, has_food(Peter) == pizza, has_sport(Peter) == baseball), And(lives(Bob) == 5, has_education(Bob) == bachelor, has_bookGenre(Bob) == historical_fiction, has_child(Bob) == Bella, has_food(Bob) == stew, has_sport(Bob) == tennis), And(lives(Alice) == 6, has_education(Alice) == associate, has_bookGenre(Alice) == science_fiction, has_child(Alice) == Timothy, has_food(Alice) == stir_fry, has_sport(Alice) == swimming) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-2",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Eric`, `Peter`, `Arnold`\n - Everyone has a unique favorite cigar: `pall mall`, `prince`, `blends`, `blue master`, `dunhill`\n - The people are of nationalities: `brit`, `norwegian`, `dane`, `swede`, `german`\n - Each person has a unique birthday month: `april`, `jan`, `sept`, `feb`, `mar`\n - Each person has a unique type of pet: `fish`, `bird`, `hamster`, `cat`, `dog`\n - The people keep unique animals: `cat`, `dog`, `bird`, `fish`, `horse`\n\nClues:\n1. The British person is Bob.\n2. Peter is the bird keeper.\n3. The person who smokes Blue Master is the Swedish person.\n4. The fish enthusiast is Bob.\n5. The Dunhill smoker is the German.\n6. The cat lover is the person partial to Pall Mall.\n7. The person with a pet hamster is the person whose birthday is in March.\n8. The person who keeps horses is somewhere to the right of the person whose birthday is in April.\n9. The fish enthusiast is the person whose birthday is in January.\n10. Alice is the dog owner.\n11. The person whose birthday is in February is in the first house.\n12. The person who owns a dog is somewhere to the left of Peter.\n13. The Dane is the person who smokes many unique blends.\n14. Peter and Arnold are next to each other.\n15. The person with an aquarium of fish is Peter.\n16. The Dunhill smoker is the person who has a cat.\n17. The Swedish person is directly left of the person whose birthday is in January.\n18. The person who owns a dog is in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "Nationality",
        "Birthday",
        "Pet",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "pall mall",
          "norwegian",
          "feb",
          "bird",
          "cat"
        ],
        [
          "2",
          "Alice",
          "blue master",
          "swede",
          "mar",
          "hamster",
          "dog"
        ],
        [
          "3",
          "Bob",
          "prince",
          "brit",
          "jan",
          "dog",
          "fish"
        ],
        [
          "4",
          "Peter",
          "blends",
          "dane",
          "april",
          "fish",
          "bird"
        ],
        [
          "5",
          "Arnold",
          "dunhill",
          "german",
          "sept",
          "cat",
          "horse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Eric, Peter, Arnold])\ncigars = EnumSort([pall_mall, prince, blends, blue_master, dunhill])\nnationalities = EnumSort([brit, norwegian, dane, swede, german])\nmonths = EnumSort([april, jan, sept, feb, mar])\npets = EnumSort([fish, bird, hamster, cat, dog])\nanimals = EnumSort([cat, dog, bird, fish, horse])\nlives = Function([people] -> [int])\nsmokes = Function([people] -> [cigars])\nhas_nationality = Function([people] -> [nationalities])\nhas_birthday = Function([people] -> [months])\nhas_pet = Function([people] -> [pets])\nkeeps_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The British person is Bob\nPeter is the bird keeper\nThe person who smokes Blue Master is the Swedish person\nThe fish enthusiast is Bob\nThe Dunhill smoker is the German\nThe cat lover is the person partial to Pall Mall\nThe person with a pet hamster is the person whose birthday is in March\nThe person who keeps horses is somewhere to the right of the person whose birthday is in April\nThe fish enthusiast is the person whose birthday is in January\nAlice is the dog owner\nThe person whose birthday is in February is in the first house\nThe person who owns a dog is somewhere to the left of Peter\nThe Dane is the person who smokes many unique blends\nPeter and Arnold are next to each other\nThe person with an aquarium of fish is Peter\nThe Dunhill smoker is the person who has a cat\nThe Swedish person is directly left of the person whose birthday is in January\nThe person who owns a dog is in the third house",
    "queries": "And( And(lives(Eric) == 1, smokes(Eric) == pall_mall, has_nationality(Eric) == norwegian, has_birthday(Eric) == feb, has_pet(Eric) == bird, keeps_animal(Eric) == cat), And(lives(Alice) == 2, smokes(Alice) == blue_master, has_nationality(Alice) == swede, has_birthday(Alice) == mar, has_pet(Alice) == hamster, keeps_animal(Alice) == dog), And(lives(Bob) == 3, smokes(Bob) == prince, has_nationality(Bob) == brit, has_birthday(Bob) == jan, has_pet(Bob) == dog, keeps_animal(Bob) == fish), And(lives(Peter) == 4, smokes(Peter) == blends, has_nationality(Peter) == dane, has_birthday(Peter) == april, has_pet(Peter) == fish, keeps_animal(Peter) == bird), And(lives(Arnold) == 5, smokes(Arnold) == dunhill, has_nationality(Arnold) == german, has_birthday(Arnold) == sept, has_pet(Arnold) == cat, keeps_animal(Arnold) == horse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-32",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Eric`, `Carol`, `Alice`, `Arnold`\n - The people keep unique animals: `rabbit`, `dog`, `horse`, `fish`, `bird`, `cat`\n - People have unique favorite sports: `basketball`, `swimming`, `tennis`, `soccer`, `baseball`, `volleyball`\n - People have unique hair colors: `blonde`, `gray`, `auburn`, `red`, `black`, `brown`\n - People have unique heights: `average`, `very short`, `very tall`, `tall`, `super tall`, `short`\n - Everyone has a unique favorite cigar: `pall mall`, `yellow monster`, `blue master`, `prince`, `dunhill`, `blends`\n\nClues:\n1. The person who is very tall and the dog owner are next to each other.\n2. There are two houses between the person who loves tennis and the person who has an average height.\n3. The cat lover is the person who loves baseball.\n4. The person who is very short is not in the fifth house.\n5. There is one house between the fish enthusiast and the person who has red hair.\n6. The cat lover is somewhere to the left of the Dunhill smoker.\n7. The rabbit owner is somewhere to the left of the person who is super tall.\n8. The Dunhill smoker is Alice.\n9. The person who has red hair is the Dunhill smoker.\n10. The person who is super tall is not in the fifth house.\n11. The Prince smoker is somewhere to the left of the person who smokes Yellow Monster.\n12. The person who loves volleyball is somewhere to the right of the person who smokes Yellow Monster.\n13. The person who smokes Blue Master is directly left of the person who has black hair.\n14. There is one house between the person who loves basketball and the person who smokes Blue Master.\n15. The person who smokes Yellow Monster is the person who is tall.\n16. Bob and the fish enthusiast are next to each other.\n17. The Dunhill smoker is the person who loves soccer.\n18. The person who loves tennis is not in the third house.\n19. Arnold is the person who smokes many unique blends.\n20. The Prince smoker is Peter.\n21. There is one house between the person who has blonde hair and the person who is tall.\n22. The person who loves swimming is directly left of Alice.\n23. The person who is super tall is Eric.\n24. The person who is short is the rabbit owner.\n25. The person who keeps horses is not in the fifth house.\n26. The cat lover and the person who has brown hair are next to each other.\n27. The person who is short and the person who has auburn hair are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "FavoriteSport",
        "HairColor",
        "Height",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "rabbit",
          "tennis",
          "blonde",
          "short",
          "prince"
        ],
        [
          "2",
          "Eric",
          "horse",
          "basketball",
          "auburn",
          "super tall",
          "pall mall"
        ],
        [
          "3",
          "Bob",
          "cat",
          "baseball",
          "gray",
          "tall",
          "yellow monster"
        ],
        [
          "4",
          "Carol",
          "fish",
          "volleyball",
          "brown",
          "average",
          "blue master"
        ],
        [
          "5",
          "Arnold",
          "bird",
          "swimming",
          "black",
          "very tall",
          "blends"
        ],
        [
          "6",
          "Alice",
          "dog",
          "soccer",
          "red",
          "very short",
          "dunhill"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Eric, Carol, Alice, Arnold])\nanimals = EnumSort([rabbit, dog, horse, fish, bird, cat])\nsports = EnumSort([basketball, swimming, tennis, soccer, baseball, volleyball])\nhairColors = EnumSort([blonde, gray, auburn, red, black, brown])\nheights = EnumSort([average, very_short, very_tall, tall, super_tall, short])\ncigars = EnumSort([pall_mall, yellow_monster, blue_master, prince, dunhill, blends])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_sport = Function([people] -> [sports])\nhas_hairColor = Function([people] -> [hairColors])\nhas_height = Function([people] -> [heights])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who is very tall and the dog owner are next to each other\nThere are two houses between the person who loves tennis and the person who has an average height\nThe cat lover is the person who loves baseball\nThe person who is very short is not in the fifth house\nThere is one house between the fish enthusiast and the person who has red hair\nThe cat lover is somewhere to the left of the Dunhill smoker\nThe rabbit owner is somewhere to the left of the person who is super tall\nThe Dunhill smoker is Alice\nThe person who has red hair is the Dunhill smoker\nThe person who is super tall is not in the fifth house\nThe Prince smoker is somewhere to the left of the person who smokes Yellow Monster\nThe person who loves volleyball is somewhere to the right of the person who smokes Yellow Monster\nThe person who smokes Blue Master is directly left of the person who has black hair\nThere is one house between the person who loves basketball and the person who smokes Blue Master\nThe person who smokes Yellow Monster is the person who is tall\nBob and the fish enthusiast are next to each other\nThe Dunhill smoker is the person who loves soccer\nThe person who loves tennis is not in the third house\nArnold is the person who smokes many unique blends\nThe Prince smoker is Peter\nThere is one house between the person who has blonde hair and the person who is tall\nThe person who loves swimming is directly left of Alice\nThe person who is super tall is Eric\nThe person who is short is the rabbit owner\nThe person who keeps horses is not in the fifth house\nThe cat lover and the person who has brown hair are next to each other\nThe person who is short and the person who has auburn hair are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_animal(Peter) == rabbit, has_sport(Peter) == tennis, has_hairColor(Peter) == blonde, has_height(Peter) == short, has_cigar(Peter) == prince), And(lives(Eric) == 2, has_animal(Eric) == horse, has_sport(Eric) == basketball, has_hairColor(Eric) == auburn, has_height(Eric) == super_tall, has_cigar(Eric) == pall_mall), And(lives(Bob) == 3, has_animal(Bob) == cat, has_sport(Bob) == baseball, has_hairColor(Bob) == gray, has_height(Bob) == tall, has_cigar(Bob) == yellow_monster), And(lives(Carol) == 4, has_animal(Carol) == fish, has_sport(Carol) == volleyball, has_hairColor(Carol) == brown, has_height(Carol) == average, has_cigar(Carol) == blue_master), And(lives(Arnold) == 5, has_animal(Arnold) == bird, has_sport(Arnold) == swimming, has_hairColor(Arnold) == black, has_height(Arnold) == very_tall, has_cigar(Arnold) == blends), And(lives(Alice) == 6, has_animal(Alice) == dog, has_sport(Alice) == soccer, has_hairColor(Alice) == red, has_height(Alice) == very_short, has_cigar(Alice) == dunhill) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-15",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Alice`, `Peter`, `Eric`\n - People have unique favorite sports: `baseball`, `swimming`, `tennis`, `soccer`, `basketball`\n - People have unique heights: `tall`, `short`, `average`, `very tall`, `very short`\n - Each person prefers a unique type of vacation: `city`, `beach`, `mountain`, `cruise`, `camping`\n - Each person lives in a unique style of house: `modern`, `victorian`, `craftsman`, `colonial`, `ranch`\n\nClues:\n1. Arnold is the person who has an average height.\n2. Arnold is not in the first house.\n3. The person who loves soccer is the person who likes going on cruises.\n4. The person who is very tall is the person who loves basketball.\n5. The person who is very short is in the third house.\n6. The person in a modern-style house is somewhere to the right of the person who loves soccer.\n7. The person who enjoys camping trips is in the fourth house.\n8. The person who is short is not in the fourth house.\n9. The person living in a colonial-style house is the person who prefers city breaks.\n10. The person who loves tennis is directly left of Eric.\n11. Alice and the person in a ranch-style home are next to each other.\n12. The person in a modern-style house is somewhere to the left of the person in a ranch-style home.\n13. The person who enjoys mountain retreats and the person in a Craftsman-style house are next to each other.\n14. The person in a Craftsman-style house is somewhere to the left of Peter.\n15. The person who loves basketball is the person living in a colonial-style house.\n16. The person who loves swimming is the person who enjoys mountain retreats.\n17. The person in a Craftsman-style house is the person who loves tennis.\n18. Eric is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "FavoriteSport",
        "Height",
        "Vacation",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "soccer",
          "short",
          "cruise",
          "victorian"
        ],
        [
          "2",
          "Arnold",
          "swimming",
          "average",
          "mountain",
          "modern"
        ],
        [
          "3",
          "Alice",
          "tennis",
          "very short",
          "beach",
          "craftsman"
        ],
        [
          "4",
          "Eric",
          "baseball",
          "tall",
          "camping",
          "ranch"
        ],
        [
          "5",
          "Peter",
          "basketball",
          "very tall",
          "city",
          "colonial"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Alice, Peter, Eric])\nsports = EnumSort([baseball, swimming, tennis, soccer, basketball])\nheights = EnumSort([tall, short, average, very_tall, very_short])\nvacations = EnumSort([city, beach, mountain, cruise, camping])\nhouses = EnumSort([modern, victorian, craftsman, colonial, ranch])\nlives = Function([people] -> [int])\nhas_sport = Function([people] -> [sports])\nhas_height = Function([people] -> [heights])\nhas_vacation = Function([people] -> [vacations])\nhas_house = Function([people] -> [houses])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Arnold is the person who has an average height\nArnold is not in the first house\nThe person who loves soccer is the person who likes going on cruises\nThe person who is very tall is the person who loves basketball\nThe person who is very short is in the third house\nThe person in a modern-style house is somewhere to the right of the person who loves soccer\nThe person who enjoys camping trips is in the fourth house\nThe person who is short is not in the fourth house\nThe person living in a colonial-style house is the person who prefers city breaks\nThe person who loves tennis is directly left of Eric\nAlice and the person in a ranch-style home are next to each other\nThe person in a modern-style house is somewhere to the left of the person in a ranch-style home\nThe person who enjoys mountain retreats and the person in a Craftsman-style house are next to each other\nThe person in a Craftsman-style house is somewhere to the left of Peter\nThe person who loves basketball is the person living in a colonial-style house\nThe person who loves swimming is the person who enjoys mountain retreats\nThe person in a Craftsman-style house is the person who loves tennis\nEric is not in the third house",
    "queries": "And( And(lives(Bob) == 1, has_sport(Bob) == soccer, has_height(Bob) == short, has_vacation(Bob) == cruise, has_house(Bob) == victorian), And(lives(Arnold) == 2, has_sport(Arnold) == swimming, has_height(Arnold) == average, has_vacation(Arnold) == mountain, has_house(Arnold) == modern), And(lives(Alice) == 3, has_sport(Alice) == tennis, has_height(Alice) == very_short, has_vacation(Alice) == beach, has_house(Alice) == craftsman), And(lives(Eric) == 4, has_sport(Eric) == baseball, has_height(Eric) == tall, has_vacation(Eric) == camping, has_house(Eric) == ranch), And(lives(Peter) == 5, has_sport(Peter) == basketball, has_height(Peter) == very_tall, has_vacation(Peter) == city, has_house(Peter) == colonial) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-20",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Eric`, `Alice`, `Peter`\n - Each mother is accompanied by their child: `Samantha`, `Meredith`, `Bella`, `Fred`\n - Everyone has a favorite smoothie: `dragonfruit`, `cherry`, `watermelon`, `desert`\n - Everyone has something unique for lunch: `stew`, `grilled cheese`, `spaghetti`, `pizza`\n - The mothers' names in different houses are unique: `Kailyn`, `Holly`, `Janelle`, `Aniya`\n - They all have a unique favorite flower: `daffodils`, `carnations`, `roses`, `lilies`\n\nClues:\n1. The Watermelon smoothie lover is the person's child is named Bella.\n2. The person whose mother's name is Aniya and the person's child is named Fred are next to each other.\n3. Alice is the person's child is named Meredith.\n4. Eric is the person who likes Cherry smoothies.\n5. The person who loves a bouquet of daffodils is directly left of The person whose mother's name is Janelle.\n6. The person who loves the spaghetti eater is in the first house.\n7. The person who likes Cherry smoothies is the person who loves the boquet of lilies.\n8. The person's child is named Meredith is The person whose mother's name is Kailyn.\n9. There is one house between The person whose mother's name is Kailyn and The person whose mother's name is Janelle.\n10. Arnold is in the second house.\n11. The person who loves eating grilled cheese is somewhere to the right of The person whose mother's name is Aniya.\n12. The person whose mother's name is Janelle is somewhere to the right of The person whose mother's name is Kailyn.\n13. The person who loves the stew is the person who loves a carnations arrangement.\n14. Eric is somewhere to the left of the Dragonfruit smoothie lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Children",
        "Smoothie",
        "Food",
        "Mother",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "Meredith",
          "desert",
          "spaghetti",
          "Kailyn",
          "roses"
        ],
        [
          "2",
          "Arnold",
          "Bella",
          "watermelon",
          "pizza",
          "Aniya",
          "daffodils"
        ],
        [
          "3",
          "Eric",
          "Fred",
          "cherry",
          "grilled cheese",
          "Janelle",
          "lilies"
        ],
        [
          "4",
          "Peter",
          "Samantha",
          "dragonfruit",
          "stew",
          "Holly",
          "carnations"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Eric, Alice, Peter])\nchildren = EnumSort([Samantha, Meredith, Bella, Fred])\nsmoothies = EnumSort([dragonfruit, cherry, watermelon, desert])\nfoods = EnumSort([stew, grilled_cheese, spaghetti, pizza])\nmothers = EnumSort([Kailyn, Holly, Janelle, Aniya])\nflowers = EnumSort([daffodils, carnations, roses, lilies])\nlives = Function([people] -> [int])\nhas_child = Function([people] -> [children])\nhas_smoothie = Function([people] -> [smoothies])\nhas_food = Function([people] -> [foods])\nhas_mother = Function([people] -> [mothers])\nhas_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The Watermelon smoothie lover is the person's child is named Bella\nThe person whose mother's name is Aniya and the person's child is named Fred are next to each other\nAlice is the person's child is named Meredith\nEric is the person who likes Cherry smoothies\nThe person who loves a bouquet of daffodils is directly left of The person whose mother's name is Janelle\nThe person who loves the spaghetti eater is in the first house\nThe person who likes Cherry smoothies is the person who loves the boquet of lilies\nThe person's child is named Meredith is The person whose mother's name is Kailyn\nThere is one house between The person whose mother's name is Kailyn and The person whose mother's name is Janelle\nArnold is in the second house\nThe person who loves eating grilled cheese is somewhere to the right of The person whose mother's name is Aniya\nThe person whose mother's name is Janelle is somewhere to the right of The person whose mother's name is Kailyn\nThe person who loves the stew is the person who loves a carnations arrangement\nEric is somewhere to the left of the Dragonfruit smoothie lover",
    "queries": "And( And(lives(Alice) == 1, has_child(Alice) == Meredith, has_smoothie(Alice) == desert, has_food(Alice) == spaghetti, has_mother(Alice) == Kailyn, has_flower(Alice) == roses), And(lives(Arnold) == 2, has_child(Arnold) == Bella, has_smoothie(Arnold) == watermelon, has_food(Arnold) == pizza, has_mother(Arnold) == Aniya, has_flower(Arnold) == daffodils), And(lives(Eric) == 3, has_child(Eric) == Fred, has_smoothie(Eric) == cherry, has_food(Eric) == grilled_cheese, has_mother(Eric) == Janelle, has_flower(Eric) == lilies), And(lives(Peter) == 4, has_child(Peter) == Samantha, has_smoothie(Peter) == dragonfruit, has_food(Peter) == stew, has_mother(Peter) == Holly, has_flower(Peter) == carnations) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-22",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Carol`, `Arnold`, `Bob`, `Alice`\n - Each person has a favorite color: `blue`, `red`, `green`, `yellow`, `purple`, `white`\n - Each person prefers a unique type of vacation: `city`, `beach`, `cruise`, `cultural`, `mountain`, `camping`\n - People have unique hair colors: `blonde`, `black`, `gray`, `brown`, `red`, `auburn`\n - Each person has an occupation: `artist`, `lawyer`, `engineer`, `teacher`, `doctor`, `nurse`\n - They all have a unique favorite flower: `roses`, `iris`, `daffodils`, `carnations`, `tulips`, `lilies`\n\nClues:\n1. The person who loves a bouquet of daffodils is the person who is an artist.\n2. The person who enjoys camping trips is the person whose favorite color is green.\n3. The person who has brown hair is in the first house.\n4. The person who loves blue is somewhere to the right of the person who enjoys mountain retreats.\n5. The person who loves the vase of tulips is the person who enjoys mountain retreats.\n6. Eric is in the second house.\n7. The person who likes going on cruises and Arnold are next to each other.\n8. The person who loves yellow and the person who enjoys camping trips are next to each other.\n9. The person who loves yellow is somewhere to the left of Peter.\n10. The person who is a lawyer and Arnold are next to each other.\n11. The person who has red hair is Arnold.\n12. Alice is the person who is a doctor.\n13. The person who loves purple is directly left of the person who loves the vase of tulips.\n14. The person who has brown hair is somewhere to the left of the person who is an engineer.\n15. The person who has gray hair is somewhere to the left of the person whose favorite color is red.\n16. The person who is an artist is somewhere to the right of Arnold.\n17. Alice is the person who loves the boquet of lilies.\n18. The person whose favorite color is red is directly left of the person who prefers city breaks.\n19. The person who prefers city breaks is somewhere to the right of the person who has blonde hair.\n20. There is one house between Alice and Bob.\n21. The person who loves the rose bouquet is directly left of the person who is a nurse.\n22. The person whose favorite color is green is in the fourth house.\n23. The person who loves beach vacations is somewhere to the left of the person who has red hair.\n24. The person who has black hair is Alice.\n25. The person who loves blue is the person who loves a carnations arrangement.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Vacation",
        "HairColor",
        "Occupation",
        "Flower"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "white",
          "beach",
          "brown",
          "teacher",
          "iris"
        ],
        [
          "2",
          "Eric",
          "purple",
          "cruise",
          "gray",
          "lawyer",
          "roses"
        ],
        [
          "3",
          "Arnold",
          "yellow",
          "mountain",
          "red",
          "nurse",
          "tulips"
        ],
        [
          "4",
          "Alice",
          "green",
          "camping",
          "black",
          "doctor",
          "lilies"
        ],
        [
          "5",
          "Peter",
          "red",
          "cultural",
          "blonde",
          "artist",
          "daffodils"
        ],
        [
          "6",
          "Bob",
          "blue",
          "city",
          "auburn",
          "engineer",
          "carnations"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Carol, Arnold, Bob, Alice])\ncolors = EnumSort([blue, red, green, yellow, purple, white])\nvacations = EnumSort([city, beach, cruise, cultural, mountain, camping])\nhairColors = EnumSort([blonde, black, gray, brown, red, auburn])\noccupations = EnumSort([artist, lawyer, engineer, teacher, doctor, nurse])\nflowers = EnumSort([roses, iris, daffodils, carnations, tulips, lilies])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nprefers_vacation = Function([people] -> [vacations])\nhas_hairColor = Function([people] -> [hairColors])\nhas_occupation = Function([people] -> [occupations])\nlikes_flower = Function([people] -> [flowers])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves a bouquet of daffodils is the person who is an artist\nThe person who enjoys camping trips is the person whose favorite color is green\nThe person who has brown hair is in the first house\nThe person who loves blue is somewhere to the right of the person who enjoys mountain retreats\nThe person who loves the vase of tulips is the person who enjoys mountain retreats\nEric is in the second house\nThe person who likes going on cruises and Arnold are next to each other\nThe person who loves yellow and the person who enjoys camping trips are next to each other\nThe person who loves yellow is somewhere to the left of Peter\nThe person who is a lawyer and Arnold are next to each other\nThe person who has red hair is Arnold\nAlice is the person who is a doctor\nThe person who loves purple is directly left of the person who loves the vase of tulips\nThe person who has brown hair is somewhere to the left of the person who is an engineer\nThe person who has gray hair is somewhere to the left of the person whose favorite color is red\nThe person who is an artist is somewhere to the right of Arnold\nAlice is the person who loves the boquet of lilies\nThe person whose favorite color is red is directly left of the person who prefers city breaks\nThe person who prefers city breaks is somewhere to the right of the person who has blonde hair\nThere is one house between Alice and Bob\nThe person who loves the rose bouquet is directly left of the person who is a nurse\nThe person whose favorite color is green is in the fourth house\nThe person who loves beach vacations is somewhere to the left of the person who has red hair\nThe person who has black hair is Alice\nThe person who loves blue is the person who loves a carnations arrangement",
    "queries": "And( And(lives(Carol) == 1, has_color(Carol) == white, prefers_vacation(Carol) == beach, has_hairColor(Carol) == brown, has_occupation(Carol) == teacher, likes_flower(Carol) == iris), And(lives(Eric) == 2, has_color(Eric) == purple, prefers_vacation(Eric) == cruise, has_hairColor(Eric) == gray, has_occupation(Eric) == lawyer, likes_flower(Eric) == roses), And(lives(Arnold) == 3, has_color(Arnold) == yellow, prefers_vacation(Arnold) == mountain, has_hairColor(Arnold) == red, has_occupation(Arnold) == nurse, likes_flower(Arnold) == tulips), And(lives(Alice) == 4, has_color(Alice) == green, prefers_vacation(Alice) == camping, has_hairColor(Alice) == black, has_occupation(Alice) == doctor, likes_flower(Alice) == lilies), And(lives(Peter) == 5, has_color(Peter) == red, prefers_vacation(Peter) == cultural, has_hairColor(Peter) == blonde, has_occupation(Peter) == artist, likes_flower(Peter) == daffodils), And(lives(Bob) == 6, has_color(Bob) == blue, prefers_vacation(Bob) == city, has_hairColor(Bob) == auburn, has_occupation(Bob) == engineer, likes_flower(Bob) == carnations) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-34",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Alice`, `Peter`, `Arnold`\n - Each person has a favorite color: `yellow`, `green`, `red`, `white`, `blue`\n - Each mother is accompanied by their child: `Samantha`, `Fred`, `Meredith`, `Bella`, `Timothy`\n - People have unique favorite book genres: `biography`, `mystery`, `romance`, `science fiction`, `fantasy`\n - Each person has a unique birthday month: `april`, `feb`, `sept`, `jan`, `mar`\n - People have unique favorite sports: `soccer`, `basketball`, `swimming`, `baseball`, `tennis`\n\nClues:\n1. The person who loves swimming is the person who loves mystery books.\n2. Eric is somewhere to the left of the person who is the mother of Timothy.\n3. The person who loves basketball is somewhere to the left of the person who is the mother of Timothy.\n4. The person who loves soccer is the person whose birthday is in September.\n5. Eric is the person who loves biography books.\n6. The person who loves baseball is the person who loves white.\n7. The person who loves science fiction books is the person whose birthday is in March.\n8. The person who loves swimming and the person whose favorite color is red are next to each other.\n9. The person who loves biography books is not in the first house.\n10. The person who loves baseball is somewhere to the left of the person whose favorite color is red.\n11. The person who loves fantasy books is Bob.\n12. The person's child is named Bella is the person whose birthday is in February.\n13. The person who loves tennis and the person's child is named Samantha are next to each other.\n14. The person's child is named Bella is not in the first house.\n15. The person's child is named Meredith is the person whose birthday is in March.\n16. The person who loves blue is directly left of the person who loves yellow.\n17. There is one house between Alice and the person whose birthday is in March.\n18. The person whose favorite color is red is directly left of the person whose birthday is in January.\n19. The person's child is named Meredith is not in the first house.\n20. Arnold is somewhere to the right of the person who loves swimming.\n21. The person who loves fantasy books is the person who is the mother of Timothy.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Children",
        "BookGenre",
        "Birthday",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "white",
          "Fred",
          "romance",
          "april",
          "baseball"
        ],
        [
          "2",
          "Peter",
          "green",
          "Bella",
          "mystery",
          "feb",
          "swimming"
        ],
        [
          "3",
          "Arnold",
          "red",
          "Meredith",
          "science fiction",
          "mar",
          "tennis"
        ],
        [
          "4",
          "Eric",
          "blue",
          "Samantha",
          "biography",
          "jan",
          "basketball"
        ],
        [
          "5",
          "Bob",
          "yellow",
          "Timothy",
          "fantasy",
          "sept",
          "soccer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Alice, Peter, Arnold])\ncolors = EnumSort([yellow, green, red, white, blue])\nchildren = EnumSort([Samantha, Fred, Meredith, Bella, Timothy])\nbookGenres = EnumSort([biography, mystery, romance, science_fiction, fantasy])\nmonths = EnumSort([april, feb, sept, jan, mar])\nsports = EnumSort([soccer, basketball, swimming, baseball, tennis])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_child = Function([people] -> [children])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_month = Function([people] -> [months])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who loves swimming is the person who loves mystery books\nEric is somewhere to the left of the person who is the mother of Timothy\nThe person who loves basketball is somewhere to the left of the person who is the mother of Timothy\nThe person who loves soccer is the person whose birthday is in September\nEric is the person who loves biography books\nThe person who loves baseball is the person who loves white\nThe person who loves science fiction books is the person whose birthday is in March\nThe person who loves swimming and the person whose favorite color is red are next to each other\nThe person who loves biography books is not in the first house\nThe person who loves baseball is somewhere to the left of the person whose favorite color is red\nThe person who loves fantasy books is Bob\nThe person's child is named Bella is the person whose birthday is in February\nThe person who loves tennis and the person's child is named Samantha are next to each other\nThe person's child is named Bella is not in the first house\nThe person's child is named Meredith is the person whose birthday is in March\nThe person who loves blue is directly left of the person who loves yellow\nThere is one house between Alice and the person whose birthday is in March\nThe person whose favorite color is red is directly left of the person whose birthday is in January\nThe person's child is named Meredith is not in the first house\nArnold is somewhere to the right of the person who loves swimming\nThe person who loves fantasy books is the person who is the mother of Timothy",
    "queries": "And( And( lives(Alice) == 1, has_color(Alice) == white, has_child(Alice) == Fred, has_bookGenre(Alice) == romance, has_month(Alice) == april, has_sport(Alice) == baseball ), And( lives(Peter) == 2, has_color(Peter) == green, has_child(Peter) == Bella, has_bookGenre(Peter) == mystery, has_month(Peter) == feb, has_sport(Peter) == swimming ), And( lives(Arnold) == 3, has_color(Arnold) == red, has_child(Arnold) == Meredith, has_bookGenre(Arnold) == science_fiction, has_month(Arnold) == mar, has_sport(Arnold) == tennis ), And( lives(Eric) == 4, has_color(Eric) == blue, has_child(Eric) == Samantha, has_bookGenre(Eric) == biography, has_month(Eric) == jan, has_sport(Eric) == basketball ), And( lives(Bob) == 5, has_color(Bob) == yellow, has_child(Bob) == Timothy, has_bookGenre(Bob) == fantasy, has_month(Bob) == sept, has_sport(Bob) == soccer ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-26",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Bob`, `Peter`, `Arnold`\n - People have unique favorite book genres: `fantasy`, `mystery`, `science fiction`, `biography`, `romance`\n - The mothers' names in different houses are unique: `Holly`, `Penny`, `Aniya`, `Kailyn`, `Janelle`\n - People use unique phone models: `oneplus 9`, `iphone 13`, `samsung galaxy s21`, `google pixel 6`, `huawei p50`\n - The people are of nationalities: `dane`, `brit`, `german`, `swede`, `norwegian`\n - Each person lives in a unique style of house: `ranch`, `modern`, `craftsman`, `victorian`, `colonial`\n\nClues:\n1. The person in a ranch-style home is somewhere to the right of the person residing in a Victorian house.\n2. The Dane and the person who uses a Samsung Galaxy S21 are next to each other.\n3. The person who uses a Google Pixel 6 is not in the second house.\n4. There are two houses between the person who loves fantasy books and the person in a modern-style house.\n5. The person whose mother's name is Kailyn is the Swedish person.\n6. The Swedish person is Arnold.\n7. The British person is somewhere to the left of the person who uses an iPhone 13.\n8. The Dane is The person whose mother's name is Penny.\n9. The person who uses a Samsung Galaxy S21 is the Norwegian.\n10. The Norwegian is The person whose mother's name is Holly.\n11. The person who loves fantasy books is Bob.\n12. Alice is directly left of the Swedish person.\n13. The person who loves romance books is Arnold.\n14. The person who loves science fiction books is Peter.\n15. The person whose mother's name is Aniya is directly left of the person who loves science fiction books.\n16. The person who loves science fiction books is the person who uses a OnePlus 9.\n17. The person residing in a Victorian house is the person who loves biography books.\n18. The person who loves fantasy books is somewhere to the left of the German.\n19. The person who uses an iPhone 13 is the person in a Craftsman-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "BookGenre",
        "Mother",
        "PhoneModel",
        "Nationality",
        "HouseStyle"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "fantasy",
          "Janelle",
          "google pixel 6",
          "brit",
          "colonial"
        ],
        [
          "2",
          "Eric",
          "biography",
          "Aniya",
          "huawei p50",
          "german",
          "victorian"
        ],
        [
          "3",
          "Peter",
          "science fiction",
          "Penny",
          "oneplus 9",
          "dane",
          "ranch"
        ],
        [
          "4",
          "Alice",
          "mystery",
          "Holly",
          "samsung galaxy s21",
          "norwegian",
          "modern"
        ],
        [
          "5",
          "Arnold",
          "romance",
          "Kailyn",
          "iphone 13",
          "swede",
          "craftsman"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Bob, Peter, Arnold])\nbookGenres = EnumSort([fantasy, mystery, science_fiction, biography, romance])\nmothers = EnumSort([Holly, Penny, Aniya, Kailyn, Janelle])\nphones = EnumSort([oneplus_9, iphone_13, samsung_galaxy_s21, google_pixel_6, huawei_p50])\nnationalities = EnumSort([dane, brit, german, swede, norwegian])\nhouseStyles = EnumSort([ranch, modern, craftsman, victorian, colonial])\nlives = Function([people] -> [int])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_mother = Function([people] -> [mothers])\nuses_phone = Function([people] -> [phones])\nhas_nationality = Function([people] -> [nationalities])\nlives_in_style = Function([people] -> [houseStyles])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person in a ranch-style home is somewhere to the right of the person residing in a Victorian house\nThe Dane and the person who uses a Samsung Galaxy S21 are next to each other\nThe person who uses a Google Pixel 6 is not in the second house\nThere are two houses between the person who loves fantasy books and the person in a modern-style house\nThe person whose mother's name is Kailyn is the Swedish person\nThe Swedish person is Arnold\nThe British person is somewhere to the left of the person who uses an iPhone 13\nThe Dane is The person whose mother's name is Penny\nThe person who uses a Samsung Galaxy S21 is the Norwegian\nThe Norwegian is The person whose mother's name is Holly\nThe person who loves fantasy books is Bob\nAlice is directly left of the Swedish person\nThe person who loves romance books is Arnold\nThe person who loves science fiction books is Peter\nThe person whose mother's name is Aniya is directly left of the person who loves science fiction books\nThe person who loves science fiction books is the person who uses a OnePlus 9\nThe person residing in a Victorian house is the person who loves biography books\nThe person who loves fantasy books is somewhere to the left of the German\nThe person who uses an iPhone 13 is the person in a Craftsman-style house",
    "queries": "And( And( lives(Bob) == 1, has_bookGenre(Bob) == fantasy, has_mother(Bob) == Janelle, uses_phone(Bob) == google_pixel_6, has_nationality(Bob) == brit, lives_in_style(Bob) == colonial ), And( lives(Eric) == 2, has_bookGenre(Eric) == biography, has_mother(Eric) == Aniya, uses_phone(Eric) == huawei_p50, has_nationality(Eric) == german, lives_in_style(Eric) == victorian ), And( lives(Peter) == 3, has_bookGenre(Peter) == science_fiction, has_mother(Peter) == Penny, uses_phone(Peter) == oneplus_9, has_nationality(Peter) == dane, lives_in_style(Peter) == ranch ), And( lives(Alice) == 4, has_bookGenre(Alice) == mystery, has_mother(Alice) == Holly, uses_phone(Alice) == samsung_galaxy_s21, has_nationality(Alice) == norwegian, lives_in_style(Alice) == modern ), And( lives(Arnold) == 5, has_bookGenre(Arnold) == romance, has_mother(Arnold) == Kailyn, uses_phone(Arnold) == iphone_13, has_nationality(Arnold) == swede, lives_in_style(Arnold) == craftsman ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-10",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Arnold`, `Eric`\n - The people keep unique animals: `horse`, `bird`, `fish`, `cat`\n - Each person has a unique level of education: `high school`, `bachelor`, `associate`, `master`\n - Each person has a unique favorite drink: `tea`, `water`, `coffee`, `milk`\n - People have unique favorite book genres: `fantasy`, `science fiction`, `romance`, `mystery`\n - Each person has a unique birthday month: `april`, `feb`, `sept`, `jan`\n\nClues:\n1. Peter is the person whose birthday is in February.\n2. The person with a master's degree is the bird keeper.\n3. The person who keeps horses is not in the second house.\n4. The person whose birthday is in January is the person who loves science fiction books.\n5. The person who loves mystery books is Alice.\n6. There is one house between the person who likes milk and Alice.\n7. The person whose birthday is in April is the person who loves fantasy books.\n8. The person with a high school diploma is not in the second house.\n9. Eric is directly left of the person who likes milk.\n10. The fish enthusiast is the person whose birthday is in February.\n11. The tea drinker is somewhere to the left of Peter.\n12. The one who only drinks water is the person with a master's degree.\n13. The person with a bachelor's degree is somewhere to the right of the person whose birthday is in January.\n14. Peter is in the third house.\n15. The person who loves science fiction books is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Education",
        "Drink",
        "BookGenre",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "horse",
          "high school",
          "tea",
          "fantasy",
          "april"
        ],
        [
          "2",
          "Arnold",
          "cat",
          "associate",
          "milk",
          "science fiction",
          "jan"
        ],
        [
          "3",
          "Peter",
          "fish",
          "bachelor",
          "coffee",
          "romance",
          "feb"
        ],
        [
          "4",
          "Alice",
          "bird",
          "master",
          "water",
          "mystery",
          "sept"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Arnold, Eric])\nanimals = EnumSort([horse, bird, fish, cat])\neducationLevels = EnumSort([high_school, bachelor, associate, master])\ndrinks = EnumSort([tea, water, coffee, milk])\nbookGenres = EnumSort([fantasy, science_fiction, romance, mystery])\nbirthdayMonths = EnumSort([april, feb, sept, jan])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_education = Function([people] -> [educationLevels])\nhas_drink = Function([people] -> [drinks])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_birthday = Function([people] -> [birthdayMonths])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "Peter is the person whose birthday is in February\nThe person with a master's degree is the bird keeper\nThe person who keeps horses is not in the second house\nThe person whose birthday is in January is the person who loves science fiction books\nThe person who loves mystery books is Alice\nThere is one house between the person who likes milk and Alice\nThe person whose birthday is in April is the person who loves fantasy books\nThe person with a high school diploma is not in the second house\nEric is directly left of the person who likes milk\nThe fish enthusiast is the person whose birthday is in February\nThe tea drinker is somewhere to the left of Peter\nThe one who only drinks water is the person with a master's degree\nThe person with a bachelor's degree is somewhere to the right of the person whose birthday is in January\nPeter is in the third house\nThe person who loves science fiction books is Arnold",
    "queries": "And( And( lives(Eric) == 1, has_animal(Eric) == horse, has_education(Eric) == high_school, has_drink(Eric) == tea, has_bookGenre(Eric) == fantasy, has_birthday(Eric) == april ), And( lives(Arnold) == 2, has_animal(Arnold) == cat, has_education(Arnold) == associate, has_drink(Arnold) == milk, has_bookGenre(Arnold) == science_fiction, has_birthday(Arnold) == jan ), And( lives(Peter) == 3, has_animal(Peter) == fish, has_education(Peter) == bachelor, has_drink(Peter) == coffee, has_bookGenre(Peter) == romance, has_birthday(Peter) == feb ), And( lives(Alice) == 4, has_animal(Alice) == bird, has_education(Alice) == master, has_drink(Alice) == water, has_bookGenre(Alice) == mystery, has_birthday(Alice) == sept ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-34",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Arnold`, `Peter`, `Carol`, `Alice`, `Eric`\n - Everyone has something unique for lunch: `stir fry`, `stew`, `soup`, `pizza`, `grilled cheese`, `spaghetti`\n - Each person has an occupation: `doctor`, `artist`, `engineer`, `teacher`, `lawyer`, `nurse`\n - Each person has a unique type of pet: `dog`, `bird`, `hamster`, `cat`, `fish`, `rabbit`\n - People have unique favorite music genres: `pop`, `country`, `jazz`, `classical`, `rock`, `hip hop`\n - Everyone has a favorite smoothie: `blueberry`, `desert`, `watermelon`, `cherry`, `lime`, `dragonfruit`\n\nClues:\n1. The person who loves the spaghetti eater is the Dragonfruit smoothie lover.\n2. The person who drinks Lime smoothies is in the second house.\n3. Carol is somewhere to the left of the Desert smoothie lover.\n4. The person who is an engineer is not in the second house.\n5. The person who loves the soup is in the second house.\n6. The person who owns a dog is not in the second house.\n7. The person who is a pizza lover is Alice.\n8. Arnold is somewhere to the left of Eric.\n9. The person who loves classical music is the Dragonfruit smoothie lover.\n10. The person who owns a rabbit is somewhere to the left of the Desert smoothie lover.\n11. The person who is a nurse is not in the sixth house.\n12. There are two houses between the person who is a nurse and the person who loves the spaghetti eater.\n13. The person who likes Cherry smoothies is the person with an aquarium of fish.\n14. The person who has a cat is Alice.\n15. The person who likes Cherry smoothies is somewhere to the right of the Desert smoothie lover.\n16. There is one house between the person who drinks Blueberry smoothies and the person who loves eating grilled cheese.\n17. The person who loves classical music is somewhere to the left of the person who loves the stew.\n18. The person who is a lawyer is the person who loves classical music.\n19. The person who loves jazz music is Bob.\n20. Bob is the person who drinks Lime smoothies.\n21. The person who loves pop music is the person who is a teacher.\n22. The person who is an engineer is directly left of the person who loves rock music.\n23. The person who loves hip-hop music is not in the first house.\n24. The person with an aquarium of fish is Peter.\n25. The person who drinks Blueberry smoothies is the person who keeps a pet bird.\n26. The person who has a cat is in the first house.\n27. The person who is a doctor is not in the sixth house.\n28. The person who owns a rabbit is not in the second house.\n29. Carol is not in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Occupation",
        "Pet",
        "MusicGenre",
        "Smoothie"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "pizza",
          "nurse",
          "cat",
          "country",
          "watermelon"
        ],
        [
          "2",
          "Bob",
          "soup",
          "doctor",
          "hamster",
          "jazz",
          "lime"
        ],
        [
          "3",
          "Carol",
          "stir fry",
          "teacher",
          "bird",
          "pop",
          "blueberry"
        ],
        [
          "4",
          "Arnold",
          "spaghetti",
          "lawyer",
          "rabbit",
          "classical",
          "dragonfruit"
        ],
        [
          "5",
          "Eric",
          "grilled cheese",
          "engineer",
          "dog",
          "hip hop",
          "desert"
        ],
        [
          "6",
          "Peter",
          "stew",
          "artist",
          "fish",
          "rock",
          "cherry"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Arnold, Peter, Carol, Alice, Eric])\nfoods = EnumSort([stir_fry, stew, soup, pizza, grilled_cheese, spaghetti])\noccupations = EnumSort([doctor, artist, engineer, teacher, lawyer, nurse])\npets = EnumSort([dog, bird, hamster, cat, fish, rabbit])\nmusicGenres = EnumSort([pop, country, jazz, classical, rock, hip_hop])\nsmoothies = EnumSort([blueberry, desert, watermelon, cherry, lime, dragonfruit])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_occupation = Function([people] -> [occupations])\nhas_pet = Function([people] -> [pets])\nhas_musicGenre = Function([people] -> [musicGenres])\nhas_smoothie = Function([people] -> [smoothies])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves the spaghetti eater is the Dragonfruit smoothie lover\nThe person who drinks Lime smoothies is in the second house\nCarol is somewhere to the left of the Desert smoothie lover\nThe person who is an engineer is not in the second house\nThe person who loves the soup is in the second house\nThe person who owns a dog is not in the second house\nThe person who is a pizza lover is Alice\nArnold is somewhere to the left of Eric\nThe person who loves classical music is the Dragonfruit smoothie lover\nThe person who owns a rabbit is somewhere to the left of the Desert smoothie lover\nThe person who is a nurse is not in the sixth house\nThere are two houses between the person who is a nurse and the person who loves the spaghetti eater\nThe person who likes Cherry smoothies is the person with an aquarium of fish\nThe person who has a cat is Alice\nThe person who likes Cherry smoothies is somewhere to the right of the Desert smoothie lover\nThere is one house between the person who drinks Blueberry smoothies and the person who loves eating grilled cheese\nThe person who loves classical music is somewhere to the left of the person who loves the stew\nThe person who is a lawyer is the person who loves classical music\nThe person who loves jazz music is Bob\nBob is the person who drinks Lime smoothies\nThe person who loves pop music is the person who is a teacher\nThe person who is an engineer is directly left of the person who loves rock music\nThe person who loves hip-hop music is not in the first house\nThe person with an aquarium of fish is Peter\nThe person who drinks Blueberry smoothies is the person who keeps a pet bird\nThe person who has a cat is in the first house\nThe person who is a doctor is not in the sixth house\nThe person who owns a rabbit is not in the second house\nCarol is not in the fourth house",
    "queries": "And( And(lives(Alice) == 1, has_food(Alice) == pizza, has_occupation(Alice) == nurse, has_pet(Alice) == cat, has_musicGenre(Alice) == country, has_smoothie(Alice) == watermelon), And(lives(Bob) == 2, has_food(Bob) == soup, has_occupation(Bob) == doctor, has_pet(Bob) == hamster, has_musicGenre(Bob) == jazz, has_smoothie(Bob) == lime), And(lives(Carol) == 3, has_food(Carol) == stir_fry, has_occupation(Carol) == teacher, has_pet(Carol) == bird, has_musicGenre(Carol) == pop, has_smoothie(Carol) == blueberry), And(lives(Arnold) == 4, has_food(Arnold) == spaghetti, has_occupation(Arnold) == lawyer, has_pet(Arnold) == rabbit, has_musicGenre(Arnold) == classical, has_smoothie(Arnold) == dragonfruit), And(lives(Eric) == 5, has_food(Eric) == grilled_cheese, has_occupation(Eric) == engineer, has_pet(Eric) == dog, has_musicGenre(Eric) == hip_hop, has_smoothie(Eric) == desert), And(lives(Peter) == 6, has_food(Peter) == stew, has_occupation(Peter) == artist, has_pet(Peter) == fish, has_musicGenre(Peter) == rock, has_smoothie(Peter) == cherry) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-26",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Bob`, `Peter`\n - Each person has a unique favorite drink: `root beer`, `water`, `coffee`, `tea`, `milk`\n - Each person has a unique birthday month: `jan`, `april`, `sept`, `feb`, `mar`\n - Each person has an occupation: `teacher`, `lawyer`, `engineer`, `doctor`, `artist`\n - Each person prefers a unique type of vacation: `city`, `cruise`, `mountain`, `beach`, `camping`\n\nClues:\n1. The root beer lover is Bob.\n2. The person who is an engineer is Bob.\n3. The coffee drinker is not in the first house.\n4. Peter is not in the second house.\n5. The one who only drinks water is not in the fifth house.\n6. The person who is a doctor is directly left of the person who prefers city breaks.\n7. The person who likes going on cruises is somewhere to the left of the person whose birthday is in April.\n8. The person whose birthday is in February is the person who loves beach vacations.\n9. Eric is somewhere to the right of Arnold.\n10. The tea drinker is the person who enjoys mountain retreats.\n11. The person who enjoys mountain retreats is not in the second house.\n12. The person whose birthday is in April is not in the second house.\n13. The tea drinker is somewhere to the left of the person who enjoys camping trips.\n14. The person who is an engineer is the person who enjoys camping trips.\n15. The person who is an artist is the person whose birthday is in April.\n16. The person whose birthday is in March is not in the first house.\n17. Arnold is the coffee drinker.\n18. The coffee drinker is the person whose birthday is in February.\n19. The person who is a lawyer is somewhere to the right of the person who is a teacher.\n20. The coffee drinker is not in the second house.\n21. The person whose birthday is in April is the one who only drinks water.\n22. The person whose birthday is in January is the root beer lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Drink",
        "Birthday",
        "Occupation",
        "Vacation"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "tea",
          "sept",
          "teacher",
          "mountain"
        ],
        [
          "2",
          "Alice",
          "milk",
          "mar",
          "lawyer",
          "cruise"
        ],
        [
          "3",
          "Arnold",
          "coffee",
          "feb",
          "doctor",
          "beach"
        ],
        [
          "4",
          "Eric",
          "water",
          "april",
          "artist",
          "city"
        ],
        [
          "5",
          "Bob",
          "root beer",
          "jan",
          "engineer",
          "camping"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Bob, Peter])\ndrinks = EnumSort([root_beer, water, coffee, tea, milk])\nmonths = EnumSort([jan, april, sept, feb, mar])\noccupations = EnumSort([teacher, lawyer, engineer, doctor, artist])\nvacations = EnumSort([city, cruise, mountain, beach, camping])\nlives = Function([people] -> [int])\nhas_drink = Function([people] -> [drinks])\nhas_month = Function([people] -> [months])\nhas_occupation = Function([people] -> [occupations])\nhas_vacation = Function([people] -> [vacations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The root beer lover is Bob\nThe person who is an engineer is Bob\nThe coffee drinker is not in the first house\nPeter is not in the second house\nThe one who only drinks water is not in the fifth house\nThe person who is a doctor is directly left of the person who prefers city breaks\nThe person who likes going on cruises is somewhere to the left of the person whose birthday is in April\nThe person whose birthday is in February is the person who loves beach vacations\nEric is somewhere to the right of Arnold\nThe tea drinker is the person who enjoys mountain retreats\nThe person who enjoys mountain retreats is not in the second house\nThe person whose birthday is in April is not in the second house\nThe tea drinker is somewhere to the left of the person who enjoys camping trips\nThe person who is an engineer is the person who enjoys camping trips\nThe person who is an artist is the person whose birthday is in April\nThe person whose birthday is in March is not in the first house\nArnold is the coffee drinker\nThe coffee drinker is the person whose birthday is in February\nThe person who is a lawyer is somewhere to the right of the person who is a teacher\nThe coffee drinker is not in the second house\nThe person whose birthday is in April is the one who only drinks water\nThe person whose birthday is in January is the root beer lover",
    "queries": "And( And(lives(Peter) == 1, has_drink(Peter) == tea, has_month(Peter) == sept, has_occupation(Peter) == teacher, has_vacation(Peter) == mountain), And(lives(Alice) == 2, has_drink(Alice) == milk, has_month(Alice) == mar, has_occupation(Alice) == lawyer, has_vacation(Alice) == cruise), And(lives(Arnold) == 3, has_drink(Arnold) == coffee, has_month(Arnold) == feb, has_occupation(Arnold) == doctor, has_vacation(Arnold) == beach), And(lives(Eric) == 4, has_drink(Eric) == water, has_month(Eric) == april, has_occupation(Eric) == artist, has_vacation(Eric) == city), And(lives(Bob) == 5, has_drink(Bob) == root_beer, has_month(Bob) == jan, has_occupation(Bob) == engineer, has_vacation(Bob) == camping) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-27",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Carol`, `Bob`, `Eric`, `Peter`\n - People use unique phone models: `iphone 13`, `samsung galaxy s21`, `xiaomi mi 11`, `oneplus 9`, `google pixel 6`, `huawei p50`\n - Each person has a unique birthday month: `april`, `mar`, `feb`, `may`, `jan`, `sept`\n - Each person has an occupation: `nurse`, `doctor`, `engineer`, `teacher`, `artist`, `lawyer`\n\nClues:\n1. The person who uses a Google Pixel 6 is directly left of the person whose birthday is in March.\n2. The person who is a nurse is Eric.\n3. Arnold is directly left of the person whose birthday is in April.\n4. Alice and the person whose birthday is in January are next to each other.\n5. The person who is an artist is the person whose birthday is in May.\n6. The person whose birthday is in September is not in the sixth house.\n7. There is one house between the person whose birthday is in March and the person who is a nurse.\n8. The person whose birthday is in March is the person who is a lawyer.\n9. The person who uses a Xiaomi Mi 11 is directly left of the person who is a nurse.\n10. The person who is a teacher is not in the sixth house.\n11. Eric is the person who uses an iPhone 13.\n12. The person who is an engineer and Peter are next to each other.\n13. The person whose birthday is in January is in the third house.\n14. The person who uses a Samsung Galaxy S21 is Bob.\n15. The person who is a lawyer and the person whose birthday is in April are next to each other.\n16. The person who uses a OnePlus 9 is somewhere to the right of the person who is a doctor.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Birthday",
        "Occupation"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "samsung galaxy s21",
          "may",
          "artist"
        ],
        [
          "2",
          "Alice",
          "huawei p50",
          "sept",
          "engineer"
        ],
        [
          "3",
          "Peter",
          "google pixel 6",
          "jan",
          "doctor"
        ],
        [
          "4",
          "Arnold",
          "oneplus 9",
          "mar",
          "lawyer"
        ],
        [
          "5",
          "Carol",
          "xiaomi mi 11",
          "april",
          "teacher"
        ],
        [
          "6",
          "Eric",
          "iphone 13",
          "feb",
          "nurse"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Carol, Bob, Eric, Peter])\nphoneModels = EnumSort([iphone_13, samsung_galaxy_s21, xiaomi_mi_11, oneplus_9, google_pixel_6, huawei_p50])\nbirthdayMonths = EnumSort([april, mar, feb, may, jan, sept])\noccupations = EnumSort([nurse, doctor, engineer, teacher, artist, lawyer])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nhas_birthday = Function([people] -> [birthdayMonths])\nhas_occupation = Function([people] -> [occupations])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses a Google Pixel 6 is directly left of the person whose birthday is in March\nThe person who is a nurse is Eric\nArnold is directly left of the person whose birthday is in April\nAlice and the person whose birthday is in January are next to each other\nThe person who is an artist is the person whose birthday is in May\nThe person whose birthday is in September is not in the sixth house\nThere is one house between the person whose birthday is in March and the person who is a nurse\nThe person whose birthday is in March is the person who is a lawyer\nThe person who uses a Xiaomi Mi 11 is directly left of the person who is a nurse\nThe person who is a teacher is not in the sixth house\nEric is the person who uses an iPhone 13\nThe person who is an engineer and Peter are next to each other\nThe person whose birthday is in January is in the third house\nThe person who uses a Samsung Galaxy S21 is Bob\nThe person who is a lawyer and the person whose birthday is in April are next to each other\nThe person who uses a OnePlus 9 is somewhere to the right of the person who is a doctor",
    "queries": "And( And(lives(Bob) == 1, uses_phone(Bob) == samsung_galaxy_s21, has_birthday(Bob) == may, has_occupation(Bob) == artist), And(lives(Alice) == 2, uses_phone(Alice) == huawei_p50, has_birthday(Alice) == sept, has_occupation(Alice) == engineer), And(lives(Peter) == 3, uses_phone(Peter) == google_pixel_6, has_birthday(Peter) == jan, has_occupation(Peter) == doctor), And(lives(Arnold) == 4, uses_phone(Arnold) == oneplus_9, has_birthday(Arnold) == mar, has_occupation(Arnold) == lawyer), And(lives(Carol) == 5, uses_phone(Carol) == xiaomi_mi_11, has_birthday(Carol) == april, has_occupation(Carol) == teacher), And(lives(Eric) == 6, uses_phone(Eric) == iphone_13, has_birthday(Eric) == feb, has_occupation(Eric) == nurse) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-10",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Arnold`, `Bob`, `Peter`, `Alice`, `Carol`, `Eric`\n - Everyone has something unique for lunch: `stew`, `grilled cheese`, `stir fry`, `soup`, `pizza`, `spaghetti`\n - People have unique heights: `tall`, `average`, `super tall`, `very short`, `very tall`, `short`\n - Each person has a unique favorite drink: `root beer`, `boba tea`, `coffee`, `water`, `tea`, `milk`\n - Each person has a unique type of pet: `hamster`, `fish`, `cat`, `dog`, `bird`, `rabbit`\n - People use unique phone models: `samsung galaxy s21`, `xiaomi mi 11`, `google pixel 6`, `iphone 13`, `huawei p50`, `oneplus 9`\n\nClues:\n1. The person who uses an iPhone 13 is in the third house.\n2. Bob is the person who is tall.\n3. The person who loves the soup is in the second house.\n4. The root beer lover is directly left of the person who uses a Xiaomi Mi 11.\n5. The person who uses a Huawei P50 is directly left of the person who loves eating grilled cheese.\n6. The person who loves stir fry is the person who likes milk.\n7. The person who loves eating grilled cheese is the person who is tall.\n8. The person who uses a Xiaomi Mi 11 is the coffee drinker.\n9. The person who uses a OnePlus 9 is Arnold.\n10. The person who owns a rabbit is not in the fifth house.\n11. The person with a pet hamster is somewhere to the right of the person who uses a Google Pixel 6.\n12. The person who is super tall is the person with an aquarium of fish.\n13. The person with an aquarium of fish is Alice.\n14. The tea drinker is directly left of the person who is a pizza lover.\n15. The person who uses a Samsung Galaxy S21 is Carol.\n16. The person who is a pizza lover is the person who is short.\n17. Arnold is the person who is very tall.\n18. The person who loves the spaghetti eater is the person who uses a Google Pixel 6.\n19. The boba tea drinker is somewhere to the right of the person who loves the soup.\n20. The person with a pet hamster is not in the fifth house.\n21. The person who is very tall is not in the second house.\n22. The person who is super tall is somewhere to the left of Peter.\n23. The person who is very short is the person who loves the spaghetti eater.\n24. The person who keeps a pet bird is somewhere to the left of the person who loves the spaghetti eater.\n25. The person with an aquarium of fish is directly left of Eric.\n26. The person who owns a dog is the person who likes milk.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Food",
        "Height",
        "Drink",
        "Pet",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "stir fry",
          "very tall",
          "milk",
          "dog",
          "oneplus 9"
        ],
        [
          "2",
          "Carol",
          "soup",
          "average",
          "water",
          "bird",
          "samsung galaxy s21"
        ],
        [
          "3",
          "Alice",
          "stew",
          "super tall",
          "boba tea",
          "fish",
          "iphone 13"
        ],
        [
          "4",
          "Eric",
          "spaghetti",
          "very short",
          "tea",
          "rabbit",
          "google pixel 6"
        ],
        [
          "5",
          "Peter",
          "pizza",
          "short",
          "root beer",
          "cat",
          "huawei p50"
        ],
        [
          "6",
          "Bob",
          "grilled cheese",
          "tall",
          "coffee",
          "hamster",
          "xiaomi mi 11"
        ]
      ]
    },
    "declarations": "people = EnumSort([Arnold, Bob, Peter, Alice, Carol, Eric])\nfoods = EnumSort([stew, grilled_cheese, stir_fry, soup, pizza, spaghetti])\nheights = EnumSort([tall, average, super_tall, very_short, very_tall, short])\ndrinks = EnumSort([root_beer, boba_tea, coffee, water, tea, milk])\npets = EnumSort([hamster, fish, cat, dog, bird, rabbit])\nphones = EnumSort([samsung_galaxy_s21, xiaomi_mi_11, google_pixel_6, iphone_13, huawei_p50, oneplus_9])\nlives = Function([people] -> [int])\nhas_food = Function([people] -> [foods])\nhas_height = Function([people] -> [heights])\nhas_drink = Function([people] -> [drinks])\nhas_pet = Function([people] -> [pets])\nuses_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses an iPhone 13 is in the third house\nBob is the person who is tall\nThe person who loves the soup is in the second house\nThe root beer lover is directly left of the person who uses a Xiaomi Mi 11\nThe person who uses a Huawei P50 is directly left of the person who loves eating grilled cheese\nThe person who loves stir fry is the person who likes milk\nThe person who loves eating grilled cheese is the person who is tall\nThe person who uses a Xiaomi Mi 11 is the coffee drinker\nThe person who uses a OnePlus 9 is Arnold\nThe person who owns a rabbit is not in the fifth house\nThe person with a pet hamster is somewhere to the right of the person who uses a Google Pixel 6\nThe person who is super tall is the person with an aquarium of fish\nThe person with an aquarium of fish is Alice\nThe tea drinker is directly left of the person who is a pizza lover\nThe person who uses a Samsung Galaxy S21 is Carol\nThe person who is a pizza lover is the person who is short\nArnold is the person who is very tall\nThe person who loves the spaghetti eater is the person who uses a Google Pixel 6\nThe boba tea drinker is somewhere to the right of the person who loves the soup\nThe person with a pet hamster is not in the fifth house\nThe person who is very tall is not in the second house\nThe person who is super tall is somewhere to the left of Peter\nThe person who is very short is the person who loves the spaghetti eater\nThe person who keeps a pet bird is somewhere to the left of the person who loves the spaghetti eater\nThe person with an aquarium of fish is directly left of Eric\nThe person who owns a dog is the person who likes milk",
    "queries": "And( And(lives(Arnold) == 1, has_food(Arnold) == stir_fry, has_height(Arnold) == very_tall, has_drink(Arnold) == milk, has_pet(Arnold) == dog, uses_phone(Arnold) == oneplus_9), And(lives(Carol) == 2, has_food(Carol) == soup, has_height(Carol) == average, has_drink(Carol) == water, has_pet(Carol) == bird, uses_phone(Carol) == samsung_galaxy_s21), And(lives(Alice) == 3, has_food(Alice) == stew, has_height(Alice) == super_tall, has_drink(Alice) == boba_tea, has_pet(Alice) == fish, uses_phone(Alice) == iphone_13), And(lives(Eric) == 4, has_food(Eric) == spaghetti, has_height(Eric) == very_short, has_drink(Eric) == tea, has_pet(Eric) == rabbit, uses_phone(Eric) == google_pixel_6), And(lives(Peter) == 5, has_food(Peter) == pizza, has_height(Peter) == short, has_drink(Peter) == root_beer, has_pet(Peter) == cat, uses_phone(Peter) == huawei_p50), And(lives(Bob) == 6, has_food(Bob) == grilled_cheese, has_height(Bob) == tall, has_drink(Bob) == coffee, has_pet(Bob) == hamster, uses_phone(Bob) == xiaomi_mi_11) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-34",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Alice`, `Bob`, `Arnold`, `Carol`\n - Everyone has a unique favorite cigar: `yellow monster`, `blends`, `prince`, `dunhill`, `pall mall`, `blue master`\n - People use unique phone models: `xiaomi mi 11`, `iphone 13`, `google pixel 6`, `huawei p50`, `samsung galaxy s21`, `oneplus 9`\n - People own unique car models: `bmw 3 series`, `honda civic`, `tesla model 3`, `ford f150`, `chevrolet silverado`, `toyota camry`\n - The people are of nationalities: `dane`, `brit`, `chinese`, `swede`, `norwegian`, `german`\n\nClues:\n1. The person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses a Google Pixel 6.\n2. Carol is somewhere to the left of the person who owns a Ford F-150.\n3. Peter is not in the second house.\n4. There is one house between the Dane and the person who uses a Google Pixel 6.\n5. The Chinese is the person who uses a Google Pixel 6.\n6. The person who smokes many unique blends is somewhere to the right of the person who owns a Honda Civic.\n7. The person who owns a Tesla Model 3 is in the fourth house.\n8. The person who uses a Samsung Galaxy S21 is Alice.\n9. There is one house between the person who uses a Xiaomi Mi 11 and the person who smokes Blue Master.\n10. The person partial to Pall Mall is directly left of the person who uses a Samsung Galaxy S21.\n11. The person who smokes many unique blends is the German.\n12. The person who owns a Chevrolet Silverado is the Prince smoker.\n13. The person who owns a BMW 3 Series is Eric.\n14. The person who owns a Ford F-150 is directly left of Bob.\n15. The person who smokes Yellow Monster is not in the second house.\n16. The Swedish person is somewhere to the right of the person who smokes Yellow Monster.\n17. The person who owns a Chevrolet Silverado is directly left of the person who uses a Huawei P50.\n18. The person who smokes Blue Master is in the fifth house.\n19. The person who smokes Blue Master is directly left of the person who uses a OnePlus 9.\n20. The Norwegian is the person who owns a Toyota Camry.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Cigar",
        "PhoneModel",
        "CarModel",
        "Nationality"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "prince",
          "iphone 13",
          "chevrolet silverado",
          "brit"
        ],
        [
          "2",
          "Arnold",
          "dunhill",
          "huawei p50",
          "ford f150",
          "dane"
        ],
        [
          "3",
          "Bob",
          "yellow monster",
          "xiaomi mi 11",
          "toyota camry",
          "norwegian"
        ],
        [
          "4",
          "Peter",
          "pall mall",
          "google pixel 6",
          "tesla model 3",
          "chinese"
        ],
        [
          "5",
          "Alice",
          "blue master",
          "samsung galaxy s21",
          "honda civic",
          "swede"
        ],
        [
          "6",
          "Eric",
          "blends",
          "oneplus 9",
          "bmw 3 series",
          "german"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Alice, Bob, Arnold, Carol])\ncigars = EnumSort([yellow_monster, blends, prince, dunhill, pall_mall, blue_master])\nphones = EnumSort([xiaomi_mi_11, iphone_13, google_pixel_6, huawei_p50, samsung_galaxy_s21, oneplus_9])\ncars = EnumSort([bmw_3_series, honda_civic, tesla_model_3, ford_f150, chevrolet_silverado, toyota_camry])\nnationalities = EnumSort([dane, brit, chinese, swede, norwegian, german])\nlives = Function([people] -> [int])\nhas_cigar = Function([people] -> [cigars])\nuses_phone = Function([people] -> [phones])\nowns_car = Function([people] -> [cars])\nhas_nationality = Function([people] -> [nationalities])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses a Google Pixel 6\nCarol is somewhere to the left of the person who owns a Ford F-150\nPeter is not in the second house\nThere is one house between the Dane and the person who uses a Google Pixel 6\nThe Chinese is the person who uses a Google Pixel 6\nThe person who smokes many unique blends is somewhere to the right of the person who owns a Honda Civic\nThe person who owns a Tesla Model 3 is in the fourth house\nThe person who uses a Samsung Galaxy S21 is Alice\nThere is one house between the person who uses a Xiaomi Mi 11 and the person who smokes Blue Master\nThe person partial to Pall Mall is directly left of the person who uses a Samsung Galaxy S21\nThe person who smokes many unique blends is the German\nThe person who owns a Chevrolet Silverado is the Prince smoker\nThe person who owns a BMW 3 Series is Eric\nThe person who owns a Ford F-150 is directly left of Bob\nThe person who smokes Yellow Monster is not in the second house\nThe Swedish person is somewhere to the right of the person who smokes Yellow Monster\nThe person who owns a Chevrolet Silverado is directly left of the person who uses a Huawei P50\nThe person who smokes Blue Master is in the fifth house\nThe person who smokes Blue Master is directly left of the person who uses a OnePlus 9\nThe Norwegian is the person who owns a Toyota Camry",
    "queries": "And( And(lives(Carol) == 1, has_cigar(Carol) == prince, uses_phone(Carol) == iphone_13, owns_car(Carol) == chevrolet_silverado, has_nationality(Carol) == brit), And(lives(Arnold) == 2, has_cigar(Arnold) == dunhill, uses_phone(Arnold) == huawei_p50, owns_car(Arnold) == ford_f150, has_nationality(Arnold) == dane), And(lives(Bob) == 3, has_cigar(Bob) == yellow_monster, uses_phone(Bob) == xiaomi_mi_11, owns_car(Bob) == toyota_camry, has_nationality(Bob) == norwegian), And(lives(Peter) == 4, has_cigar(Peter) == pall_mall, uses_phone(Peter) == google_pixel_6, owns_car(Peter) == tesla_model_3, has_nationality(Peter) == chinese), And(lives(Alice) == 5, has_cigar(Alice) == blue_master, uses_phone(Alice) == samsung_galaxy_s21, owns_car(Alice) == honda_civic, has_nationality(Alice) == swede), And(lives(Eric) == 6, has_cigar(Eric) == blends, uses_phone(Eric) == oneplus_9, owns_car(Eric) == bmw_3_series, has_nationality(Eric) == german) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x5-27",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Arnold`, `Carol`, `Alice`, `Bob`, `Eric`\n - Each person has a unique level of education: `bachelor`, `high school`, `doctorate`, `trade school`, `associate`, `master`\n - Each person has an occupation: `teacher`, `artist`, `nurse`, `lawyer`, `engineer`, `doctor`\n - People own unique car models: `ford f150`, `toyota camry`, `honda civic`, `chevrolet silverado`, `bmw 3 series`, `tesla model 3`\n - Each person has a unique birthday month: `sept`, `jan`, `mar`, `april`, `feb`, `may`\n\nClues:\n1. The person with a bachelor's degree is somewhere to the right of the person who owns a Toyota Camry.\n2. The person whose birthday is in February is the person with an associate's degree.\n3. The person whose birthday is in September is not in the fifth house.\n4. The person who owns a BMW 3 Series is somewhere to the right of the person who is an engineer.\n5. The person whose birthday is in January is Arnold.\n6. The person who is an artist is directly left of the person with a doctorate.\n7. The person who owns a Ford F-150 is the person who is an engineer.\n8. The person who attended trade school and Eric are next to each other.\n9. There is one house between the person who attended trade school and the person with a bachelor's degree.\n10. The person whose birthday is in May is the person who owns a BMW 3 Series.\n11. The person who owns a Chevrolet Silverado is somewhere to the left of Alice.\n12. The person who is an engineer is directly left of Bob.\n13. The person who owns a Honda Civic is the person whose birthday is in April.\n14. The person who is an artist is the person with a high school diploma.\n15. Arnold is the person who owns a Toyota Camry.\n16. The person who owns a Tesla Model 3 is in the first house.\n17. The person who is a doctor is somewhere to the left of the person whose birthday is in April.\n18. The person who is a nurse is directly left of the person whose birthday is in September.\n19. The person who is a teacher is the person with a doctorate.\n20. There is one house between the person who owns a Toyota Camry and the person who owns a Honda Civic.\n21. The person who owns a Tesla Model 3 is Peter.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Occupation",
        "CarModel",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "associate",
          "doctor",
          "tesla model 3",
          "feb"
        ],
        [
          "2",
          "Arnold",
          "trade school",
          "nurse",
          "toyota camry",
          "jan"
        ],
        [
          "3",
          "Eric",
          "master",
          "engineer",
          "ford f150",
          "sept"
        ],
        [
          "4",
          "Bob",
          "bachelor",
          "lawyer",
          "honda civic",
          "april"
        ],
        [
          "5",
          "Carol",
          "high school",
          "artist",
          "chevrolet silverado",
          "mar"
        ],
        [
          "6",
          "Alice",
          "doctorate",
          "teacher",
          "bmw 3 series",
          "may"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Arnold, Carol, Alice, Bob, Eric])\neducationLevels = EnumSort([bachelor, high_school, doctorate, trade_school, associate, master])\noccupations = EnumSort([teacher, artist, nurse, lawyer, engineer, doctor])\ncarModels = EnumSort([ford_f150, toyota_camry, honda_civic, chevrolet_silverado, bmw_3_series, tesla_model_3])\nbirthdayMonths = EnumSort([sept, jan, mar, april, feb, may])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_occupation = Function([people] -> [occupations])\nowns_car = Function([people] -> [carModels])\nhas_birthday = Function([people] -> [birthdayMonths])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with a bachelor's degree is somewhere to the right of the person who owns a Toyota Camry\nThe person whose birthday is in February is the person with an associate's degree\nThe person whose birthday is in September is not in the fifth house\nThe person who owns a BMW 3 Series is somewhere to the right of the person who is an engineer\nThe person whose birthday is in January is Arnold\nThe person who is an artist is directly left of the person with a doctorate\nThe person who owns a Ford F-150 is the person who is an engineer\nThe person who attended trade school and Eric are next to each other\nThere is one house between the person who attended trade school and the person with a bachelor's degree\nThe person whose birthday is in May is the person who owns a BMW 3 Series\nThe person who owns a Chevrolet Silverado is somewhere to the left of Alice\nThe person who is an engineer is directly left of Bob\nThe person who owns a Honda Civic is the person whose birthday is in April\nThe person who is an artist is the person with a high school diploma\nArnold is the person who owns a Toyota Camry\nThe person who owns a Tesla Model 3 is in the first house\nThe person who is a doctor is somewhere to the left of the person whose birthday is in April\nThe person who is a nurse is directly left of the person whose birthday is in September\nThe person who is a teacher is the person with a doctorate\nThere is one house between the person who owns a Toyota Camry and the person who owns a Honda Civic\nThe person who owns a Tesla Model 3 is Peter",
    "queries": "And( And(lives(Peter) == 1, has_education(Peter) == associate, has_occupation(Peter) == doctor, owns_car(Peter) == tesla_model_3, has_birthday(Peter) == feb), And(lives(Arnold) == 2, has_education(Arnold) == trade_school, has_occupation(Arnold) == nurse, owns_car(Arnold) == toyota_camry, has_birthday(Arnold) == jan), And(lives(Eric) == 3, has_education(Eric) == master, has_occupation(Eric) == engineer, owns_car(Eric) == ford_f150, has_birthday(Eric) == sept), And(lives(Bob) == 4, has_education(Bob) == bachelor, has_occupation(Bob) == lawyer, owns_car(Bob) == honda_civic, has_birthday(Bob) == april), And(lives(Carol) == 5, has_education(Carol) == high_school, has_occupation(Carol) == artist, owns_car(Carol) == chevrolet_silverado, has_birthday(Carol) == mar), And(lives(Alice) == 6, has_education(Alice) == doctorate, has_occupation(Alice) == teacher, owns_car(Alice) == bmw_3_series, has_birthday(Alice) == may) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-7",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Eric`, `Peter`, `Alice`, `Bob`, `Arnold`\n - Each person has a unique level of education: `doctorate`, `master`, `associate`, `high school`, `bachelor`, `trade school`\n - The people keep unique animals: `rabbit`, `fish`, `horse`, `dog`, `bird`, `cat`\n - People have unique favorite sports: `soccer`, `baseball`, `volleyball`, `basketball`, `swimming`, `tennis`\n\nClues:\n1. The fish enthusiast is the person with an associate's degree.\n2. The cat lover is the person who attended trade school.\n3. The person who loves soccer is the bird keeper.\n4. Arnold is directly left of the rabbit owner.\n5. The person who keeps horses is the person who loves volleyball.\n6. Peter is not in the fifth house.\n7. Arnold is the person who attended trade school.\n8. The person who loves swimming and the person with a doctorate are next to each other.\n9. Alice is in the second house.\n10. The person with a doctorate and the person who loves basketball are next to each other.\n11. Bob is the person with a high school diploma.\n12. The person with an associate's degree is in the second house.\n13. The person who loves baseball is in the fifth house.\n14. The person with a master's degree is the person who loves basketball.\n15. The person who keeps horses is somewhere to the left of Bob.\n16. The cat lover is in the fourth house.\n17. Carol is somewhere to the left of the fish enthusiast.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "Animal",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Carol",
          "bachelor",
          "horse",
          "volleyball"
        ],
        [
          "2",
          "Alice",
          "associate",
          "fish",
          "tennis"
        ],
        [
          "3",
          "Bob",
          "high school",
          "bird",
          "soccer"
        ],
        [
          "4",
          "Arnold",
          "trade school",
          "cat",
          "swimming"
        ],
        [
          "5",
          "Eric",
          "doctorate",
          "rabbit",
          "baseball"
        ],
        [
          "6",
          "Peter",
          "master",
          "dog",
          "basketball"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Eric, Peter, Alice, Bob, Arnold])\neducationLevels = EnumSort([doctorate, master, associate, high_school, bachelor, trade_school])\nanimals = EnumSort([rabbit, fish, horse, dog, bird, cat])\nsports = EnumSort([soccer, baseball, volleyball, basketball, swimming, tennis])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_animal = Function([people] -> [animals])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The fish enthusiast is the person with an associate's degree\nThe cat lover is the person who attended trade school\nThe person who loves soccer is the bird keeper\nArnold is directly left of the rabbit owner\nThe person who keeps horses is the person who loves volleyball\nPeter is not in the fifth house\nArnold is the person who attended trade school\nThe person who loves swimming and the person with a doctorate are next to each other\nAlice is in the second house\nThe person with a doctorate and the person who loves basketball are next to each other\nBob is the person with a high school diploma\nThe person with an associate's degree is in the second house\nThe person who loves baseball is in the fifth house\nThe person with a master's degree is the person who loves basketball\nThe person who keeps horses is somewhere to the left of Bob\nThe cat lover is in the fourth house\nCarol is somewhere to the left of the fish enthusiast",
    "queries": "And( And(lives(Carol) == 1, has_education(Carol) == bachelor, has_animal(Carol) == horse, has_sport(Carol) == volleyball), And(lives(Alice) == 2, has_education(Alice) == associate, has_animal(Alice) == fish, has_sport(Alice) == tennis), And(lives(Bob) == 3, has_education(Bob) == high_school, has_animal(Bob) == bird, has_sport(Bob) == soccer), And(lives(Arnold) == 4, has_education(Arnold) == trade_school, has_animal(Arnold) == cat, has_sport(Arnold) == swimming), And(lives(Eric) == 5, has_education(Eric) == doctorate, has_animal(Eric) == rabbit, has_sport(Eric) == baseball), And(lives(Peter) == 6, has_education(Peter) == master, has_animal(Peter) == dog, has_sport(Peter) == basketball) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-18",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Carol`, `Eric`, `Alice`, `Peter`, `Arnold`\n - Each person prefers a unique type of vacation: `camping`, `cruise`, `mountain`, `cultural`, `city`, `beach`\n - Each person has a unique type of pet: `fish`, `hamster`, `bird`, `rabbit`, `dog`, `cat`\n - The people are of nationalities: `brit`, `swede`, `german`, `norwegian`, `dane`, `chinese`\n - People have unique favorite book genres: `biography`, `romance`, `mystery`, `fantasy`, `science fiction`, `historical fiction`\n - People own unique car models: `tesla model 3`, `bmw 3 series`, `honda civic`, `chevrolet silverado`, `toyota camry`, `ford f150`\n\nClues:\n1. The person who loves fantasy books is Peter.\n2. The Chinese is somewhere to the right of the Dane.\n3. The person who owns a Tesla Model 3 is the person with a pet hamster.\n4. Carol is the person who loves beach vacations.\n5. The person who has a cat is in the second house.\n6. There is one house between the person who loves mystery books and the person who prefers city breaks.\n7. The person who owns a Honda Civic is in the first house.\n8. The person who loves science fiction books is directly left of the person who prefers city breaks.\n9. The British person is the person who owns a Honda Civic.\n10. There is one house between the person who loves fantasy books and the person who owns a Toyota Camry.\n11. The person who keeps a pet bird is the person who owns a Toyota Camry.\n12. The Dane is not in the third house.\n13. Eric is not in the sixth house.\n14. The person who loves romance books is the person who enjoys camping trips.\n15. Arnold is the person who likes going on cruises.\n16. The person who owns a dog is in the fifth house.\n17. The person who enjoys camping trips is directly left of the person who owns a rabbit.\n18. The person who owns a Ford F-150 is the person who owns a rabbit.\n19. The person who loves fantasy books is directly left of Eric.\n20. The German is the person who owns a BMW 3 Series.\n21. The person who goes on cultural tours is not in the first house.\n22. The person who loves mystery books is not in the sixth house.\n23. The person who loves historical fiction books is somewhere to the left of the person who enjoys camping trips.\n24. The Dane is Bob.\n25. There is one house between the Dane and the Chinese.\n26. The Swedish person is somewhere to the right of the person who likes going on cruises.\n27. Eric is not in the third house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Vacation",
        "Pet",
        "Nationality",
        "BookGenre",
        "CarModel"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "mountain",
          "fish",
          "brit",
          "fantasy",
          "honda civic"
        ],
        [
          "2",
          "Eric",
          "cultural",
          "cat",
          "german",
          "mystery",
          "bmw 3 series"
        ],
        [
          "3",
          "Arnold",
          "cruise",
          "bird",
          "norwegian",
          "science fiction",
          "toyota camry"
        ],
        [
          "4",
          "Bob",
          "city",
          "hamster",
          "dane",
          "historical fiction",
          "tesla model 3"
        ],
        [
          "5",
          "Alice",
          "camping",
          "dog",
          "swede",
          "romance",
          "chevrolet silverado"
        ],
        [
          "6",
          "Carol",
          "beach",
          "rabbit",
          "chinese",
          "biography",
          "ford f150"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Carol, Eric, Alice, Peter, Arnold])\nvacations = EnumSort([camping, cruise, mountain, cultural, city, beach])\npets = EnumSort([fish, hamster, bird, rabbit, dog, cat])\nnationalities = EnumSort([brit, swede, german, norwegian, dane, chinese])\nbookGenres = EnumSort([biography, romance, mystery, fantasy, science_fiction, historical_fiction])\ncars = EnumSort([tesla_model_3, bmw_3_series, honda_civic, chevrolet_silverado, toyota_camry, ford_f150])\nlives = Function([people] -> [int])\nhas_vacation = Function([people] -> [vacations])\nhas_pet = Function([people] -> [pets])\nhas_nationality = Function([people] -> [nationalities])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_car = Function([people] -> [cars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves fantasy books is Peter\nThe Chinese is somewhere to the right of the Dane\nThe person who owns a Tesla Model 3 is the person with a pet hamster\nCarol is the person who loves beach vacations\nThe person who has a cat is in the second house\nThere is one house between the person who loves mystery books and the person who prefers city breaks\nThe person who owns a Honda Civic is in the first house\nThe person who loves science fiction books is directly left of the person who prefers city breaks\nThe British person is the person who owns a Honda Civic\nThere is one house between the person who loves fantasy books and the person who owns a Toyota Camry\nThe person who keeps a pet bird is the person who owns a Toyota Camry\nThe Dane is not in the third house\nEric is not in the sixth house\nThe person who loves romance books is the person who enjoys camping trips\nArnold is the person who likes going on cruises\nThe person who owns a dog is in the fifth house\nThe person who enjoys camping trips is directly left of the person who owns a rabbit\nThe person who owns a Ford F-150 is the person who owns a rabbit\nThe person who loves fantasy books is directly left of Eric\nThe German is the person who owns a BMW 3 Series\nThe person who goes on cultural tours is not in the first house\nThe person who loves mystery books is not in the sixth house\nThe person who loves historical fiction books is somewhere to the left of the person who enjoys camping trips\nThe Dane is Bob\nThere is one house between the Dane and the Chinese\nThe Swedish person is somewhere to the right of the person who likes going on cruises\nEric is not in the third house",
    "queries": "And( And(lives(Peter) == 1, has_vacation(Peter) == mountain, has_pet(Peter) == fish, has_nationality(Peter) == brit, has_bookGenre(Peter) == fantasy, has_car(Peter) == honda_civic), And(lives(Eric) == 2, has_vacation(Eric) == cultural, has_pet(Eric) == cat, has_nationality(Eric) == german, has_bookGenre(Eric) == mystery, has_car(Eric) == bmw_3_series), And(lives(Arnold) == 3, has_vacation(Arnold) == cruise, has_pet(Arnold) == bird, has_nationality(Arnold) == norwegian, has_bookGenre(Arnold) == science_fiction, has_car(Arnold) == toyota_camry), And(lives(Bob) == 4, has_vacation(Bob) == city, has_pet(Bob) == hamster, has_nationality(Bob) == dane, has_bookGenre(Bob) == historical_fiction, has_car(Bob) == tesla_model_3), And(lives(Alice) == 5, has_vacation(Alice) == camping, has_pet(Alice) == dog, has_nationality(Alice) == swede, has_bookGenre(Alice) == romance, has_car(Alice) == chevrolet_silverado), And(lives(Carol) == 6, has_vacation(Carol) == beach, has_pet(Carol) == rabbit, has_nationality(Carol) == chinese, has_bookGenre(Carol) == biography, has_car(Carol) == ford_f150) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-31",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Peter`, `Bob`, `Arnold`\n - Each person has a favorite color: `red`, `white`, `green`, `blue`, `yellow`\n - Everyone has a favorite smoothie: `watermelon`, `dragonfruit`, `cherry`, `desert`, `lime`\n - Each person has a unique birthday month: `feb`, `sept`, `april`, `mar`, `jan`\n - People have unique favorite book genres: `romance`, `science fiction`, `mystery`, `fantasy`, `biography`\n - People have unique heights: `very short`, `very tall`, `tall`, `short`, `average`\n\nClues:\n1. The person who drinks Lime smoothies is in the second house.\n2. The person who loves fantasy books is directly left of the Dragonfruit smoothie lover.\n3. The person whose birthday is in September is not in the third house.\n4. There is one house between the person whose birthday is in March and Peter.\n5. The person whose birthday is in February is the Desert smoothie lover.\n6. The person who is tall is not in the fifth house.\n7. The person whose birthday is in January is somewhere to the left of the person whose birthday is in February.\n8. The person who is very short is the person who loves blue.\n9. The person whose favorite color is red is Arnold.\n10. The person who loves science fiction books is directly left of the person who loves biography books.\n11. Bob is not in the fifth house.\n12. The person whose birthday is in January is the person whose favorite color is green.\n13. The person who has an average height is the person who likes Cherry smoothies.\n14. The person who loves fantasy books is the person whose birthday is in February.\n15. The person whose favorite color is red is directly left of the person who is very short.\n16. The person who loves science fiction books is the person whose birthday is in March.\n17. The person who is very tall is in the second house.\n18. The person who drinks Lime smoothies is somewhere to the left of the person who loves mystery books.\n19. Eric is in the third house.\n20. The person who loves fantasy books is the person who loves white.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Color",
        "Smoothie",
        "Birthday",
        "BookGenre",
        "Height"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "green",
          "cherry",
          "jan",
          "romance",
          "average"
        ],
        [
          "2",
          "Arnold",
          "red",
          "lime",
          "mar",
          "science fiction",
          "very tall"
        ],
        [
          "3",
          "Eric",
          "blue",
          "watermelon",
          "april",
          "biography",
          "very short"
        ],
        [
          "4",
          "Peter",
          "white",
          "desert",
          "feb",
          "fantasy",
          "tall"
        ],
        [
          "5",
          "Alice",
          "yellow",
          "dragonfruit",
          "sept",
          "mystery",
          "short"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Peter, Bob, Arnold])\ncolors = EnumSort([red, white, green, blue, yellow])\nsmoothies = EnumSort([watermelon, dragonfruit, cherry, desert, lime])\nmonths = EnumSort([feb, sept, april, mar, jan])\nbookGenres = EnumSort([romance, science_fiction, mystery, fantasy, biography])\nheights = EnumSort([very_short, very_tall, tall, short, average])\nlives = Function([people] -> [int])\nhas_color = Function([people] -> [colors])\nhas_smoothie = Function([people] -> [smoothies])\nhas_month = Function([people] -> [months])\nhas_bookGenre = Function([people] -> [bookGenres])\nhas_height = Function([people] -> [heights])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who drinks Lime smoothies is in the second house\nThe person who loves fantasy books is directly left of the Dragonfruit smoothie lover\nThe person whose birthday is in September is not in the third house\nThere is one house between the person whose birthday is in March and Peter\nThe person whose birthday is in February is the Desert smoothie lover\nThe person who is tall is not in the fifth house\nThe person whose birthday is in January is somewhere to the left of the person whose birthday is in February\nThe person who is very short is the person who loves blue\nThe person whose favorite color is red is Arnold\nThe person who loves science fiction books is directly left of the person who loves biography books\nBob is not in the fifth house\nThe person whose birthday is in January is the person whose favorite color is green\nThe person who has an average height is the person who likes Cherry smoothies\nThe person who loves fantasy books is the person whose birthday is in February\nThe person whose favorite color is red is directly left of the person who is very short\nThe person who loves science fiction books is the person whose birthday is in March\nThe person who is very tall is in the second house\nThe person who drinks Lime smoothies is somewhere to the left of the person who loves mystery books\nEric is in the third house\nThe person who loves fantasy books is the person who loves white",
    "queries": "And( And(lives(Bob) == 1, has_color(Bob) == green, has_smoothie(Bob) == cherry, has_month(Bob) == jan, has_bookGenre(Bob) == romance, has_height(Bob) == average), And(lives(Arnold) == 2, has_color(Arnold) == red, has_smoothie(Arnold) == lime, has_month(Arnold) == mar, has_bookGenre(Arnold) == science_fiction, has_height(Arnold) == very_tall), And(lives(Eric) == 3, has_color(Eric) == blue, has_smoothie(Eric) == watermelon, has_month(Eric) == april, has_bookGenre(Eric) == biography, has_height(Eric) == very_short), And(lives(Peter) == 4, has_color(Peter) == white, has_smoothie(Peter) == desert, has_month(Peter) == feb, has_bookGenre(Peter) == fantasy, has_height(Peter) == tall), And(lives(Alice) == 5, has_color(Alice) == yellow, has_smoothie(Alice) == dragonfruit, has_month(Alice) == sept, has_bookGenre(Alice) == mystery, has_height(Alice) == short) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-1",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Peter`, `Alice`, `Eric`, `Arnold`\n - Each person has a unique type of pet: `hamster`, `fish`, `bird`, `cat`, `dog`\n - Each person lives in a unique style of house: `colonial`, `ranch`, `victorian`, `modern`, `craftsman`\n - Each person has a unique birthday month: `mar`, `sept`, `jan`, `feb`, `april`\n - The people keep unique animals: `dog`, `cat`, `fish`, `bird`, `horse`\n\nClues:\n1. There is one house between Alice and the fish enthusiast.\n2. The person in a ranch-style home is not in the fifth house.\n3. The person whose birthday is in March is Alice.\n4. The person in a ranch-style home is not in the fourth house.\n5. Arnold is somewhere to the right of the person whose birthday is in April.\n6. The person who has a cat is the person who keeps horses.\n7. There are two houses between the cat lover and the person living in a colonial-style house.\n8. Eric is somewhere to the left of the person whose birthday is in September.\n9. The person whose birthday is in April is directly left of the person who keeps horses.\n10. Alice is the person residing in a Victorian house.\n11. The person whose birthday is in March and the cat lover are next to each other.\n12. Peter is the person whose birthday is in February.\n13. The cat lover is the person who owns a dog.\n14. The bird keeper is somewhere to the left of the person who keeps a pet bird.\n15. Bob is the person who keeps a pet bird.\n16. Eric is in the fourth house.\n17. The person who has a cat is somewhere to the left of the person with a pet hamster.\n18. The person who keeps a pet bird is the person in a modern-style house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "HouseStyle",
        "Birthday",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "fish",
          "victorian",
          "mar",
          "bird"
        ],
        [
          "2",
          "Peter",
          "dog",
          "ranch",
          "feb",
          "cat"
        ],
        [
          "3",
          "Bob",
          "bird",
          "modern",
          "april",
          "fish"
        ],
        [
          "4",
          "Eric",
          "cat",
          "craftsman",
          "jan",
          "horse"
        ],
        [
          "5",
          "Arnold",
          "hamster",
          "colonial",
          "sept",
          "dog"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Peter, Alice, Eric, Arnold])\npets = EnumSort([hamster, fish, bird, cat, dog])\nhouseStyles = EnumSort([colonial, ranch, victorian, modern, craftsman])\nmonths = EnumSort([mar, sept, jan, feb, april])\nanimals = EnumSort([dog, cat, fish, bird, horse])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_birthday = Function([people] -> [months])\nkeeps_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "There is one house between Alice and the fish enthusiast\nThe person in a ranch-style home is not in the fifth house\nThe person whose birthday is in March is Alice\nThe person in a ranch-style home is not in the fourth house\nArnold is somewhere to the right of the person whose birthday is in April\nThe person who has a cat is the person who keeps horses\nThere are two houses between the cat lover and the person living in a colonial-style house\nEric is somewhere to the left of the person whose birthday is in September\nThe person whose birthday is in April is directly left of the person who keeps horses\nAlice is the person residing in a Victorian house\nThe person whose birthday is in March and the cat lover are next to each other\nPeter is the person whose birthday is in February\nThe cat lover is the person who owns a dog\nThe bird keeper is somewhere to the left of the person who keeps a pet bird\nBob is the person who keeps a pet bird\nEric is in the fourth house\nThe person who has a cat is somewhere to the left of the person with a pet hamster\nThe person who keeps a pet bird is the person in a modern-style house",
    "queries": "And( And(lives(Alice) == 1, has_pet(Alice) == fish, has_houseStyle(Alice) == victorian, has_birthday(Alice) == mar, keeps_animal(Alice) == bird), And(lives(Peter) == 2, has_pet(Peter) == dog, has_houseStyle(Peter) == ranch, has_birthday(Peter) == feb, keeps_animal(Peter) == cat), And(lives(Bob) == 3, has_pet(Bob) == bird, has_houseStyle(Bob) == modern, has_birthday(Bob) == april, keeps_animal(Bob) == fish), And(lives(Eric) == 4, has_pet(Eric) == cat, has_houseStyle(Eric) == craftsman, has_birthday(Eric) == jan, keeps_animal(Eric) == horse), And(lives(Arnold) == 5, has_pet(Arnold) == hamster, has_houseStyle(Arnold) == colonial, has_birthday(Arnold) == sept, keeps_animal(Arnold) == dog) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-31",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Peter`, `Arnold`\n - They all have a unique favorite flower: `lilies`, `carnations`, `roses`, `daffodils`\n - Each person has a favorite color: `white`, `green`, `yellow`, `red`\n - Each person has a unique level of education: `bachelor`, `associate`, `master`, `high school`\n - Each person has a unique hobby: `painting`, `photography`, `gardening`, `cooking`\n - Everyone has a unique favorite cigar: `dunhill`, `blue master`, `prince`, `pall mall`\n\nClues:\n1. The person partial to Pall Mall is the person with an associate's degree.\n2. The person who loves white is the Prince smoker.\n3. The person with a high school diploma is not in the fourth house.\n4. The person with a master's degree is not in the second house.\n5. Arnold is not in the fourth house.\n6. The person whose favorite color is red is not in the third house.\n7. The person whose favorite color is red is somewhere to the left of Eric.\n8. The person who loves cooking is somewhere to the right of Peter.\n9. The person who loves a bouquet of daffodils is somewhere to the left of the person who paints as a hobby.\n10. The person who loves white is the person who loves the boquet of lilies.\n11. Alice is the photography enthusiast.\n12. Arnold is somewhere to the right of the person partial to Pall Mall.\n13. The person who loves white is in the second house.\n14. The person whose favorite color is green is directly left of the person who enjoys gardening.\n15. The Dunhill smoker is the person with a high school diploma.\n16. The person who loves the rose bouquet is somewhere to the right of the person whose favorite color is green.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Color",
        "Education",
        "Hobby",
        "Cigar"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "daffodils",
          "red",
          "associate",
          "photography",
          "pall mall"
        ],
        [
          "2",
          "Peter",
          "lilies",
          "white",
          "bachelor",
          "painting",
          "prince"
        ],
        [
          "3",
          "Arnold",
          "carnations",
          "green",
          "high school",
          "cooking",
          "dunhill"
        ],
        [
          "4",
          "Eric",
          "roses",
          "yellow",
          "master",
          "gardening",
          "blue master"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Peter, Arnold])\nflowers = EnumSort([lilies, carnations, roses, daffodils])\ncolors = EnumSort([white, green, yellow, red])\neducation_levels = EnumSort([bachelor, associate, master, high_school])\nhobbies = EnumSort([painting, photography, gardening, cooking])\ncigars = EnumSort([dunhill, blue_master, prince, pall_mall])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_color = Function([people] -> [colors])\nhas_education = Function([people] -> [education_levels])\nhas_hobby = Function([people] -> [hobbies])\nhas_cigar = Function([people] -> [cigars])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person partial to Pall Mall is the person with an associate's degree\nThe person who loves white is the Prince smoker\nThe person with a high school diploma is not in the fourth house\nThe person with a master's degree is not in the second house\nArnold is not in the fourth house\nThe person whose favorite color is red is not in the third house\nThe person whose favorite color is red is somewhere to the left of Eric\nThe person who loves cooking is somewhere to the right of Peter\nThe person who loves a bouquet of daffodils is somewhere to the left of the person who paints as a hobby\nThe person who loves white is the person who loves the boquet of lilies\nAlice is the photography enthusiast\nArnold is somewhere to the right of the person partial to Pall Mall\nThe person who loves white is in the second house\nThe person whose favorite color is green is directly left of the person who enjoys gardening\nThe Dunhill smoker is the person with a high school diploma\nThe person who loves the rose bouquet is somewhere to the right of the person whose favorite color is green",
    "queries": "And( And(lives(Alice) == 1, has_flower(Alice) == daffodils, has_color(Alice) == red, has_education(Alice) == associate, has_hobby(Alice) == photography, has_cigar(Alice) == pall_mall), And(lives(Peter) == 2, has_flower(Peter) == lilies, has_color(Peter) == white, has_education(Peter) == bachelor, has_hobby(Peter) == painting, has_cigar(Peter) == prince), And(lives(Arnold) == 3, has_flower(Arnold) == carnations, has_color(Arnold) == green, has_education(Arnold) == high_school, has_hobby(Arnold) == cooking, has_cigar(Arnold) == dunhill), And(lives(Eric) == 4, has_flower(Eric) == roses, has_color(Eric) == yellow, has_education(Eric) == master, has_hobby(Eric) == gardening, has_cigar(Eric) == blue_master) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-2",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Carol`, `Bob`, `Eric`, `Alice`, `Peter`, `Arnold`\n - People have unique heights: `super tall`, `tall`, `very short`, `average`, `very tall`, `short`\n - People use unique phone models: `google pixel 6`, `iphone 13`, `samsung galaxy s21`, `xiaomi mi 11`, `oneplus 9`, `huawei p50`\n - Each mother is accompanied by their child: `Fred`, `Timothy`, `Alice`, `Bella`, `Meredith`, `Samantha`\n\nClues:\n1. The person who uses a Xiaomi Mi 11 is the person who is short.\n2. Alice is somewhere to the right of Bob.\n3. The person who uses a OnePlus 9 is Carol.\n4. The person who uses a Xiaomi Mi 11 is the person's child is named Alice.\n5. The person who has an average height is not in the fourth house.\n6. The person who uses a Samsung Galaxy S21 is in the second house.\n7. Alice is directly left of the person's child is named Fred.\n8. The person's child is named Meredith and Arnold are next to each other.\n9. The person's child is named Samantha is the person who is super tall.\n10. The person who is short is somewhere to the right of the person who uses a Samsung Galaxy S21.\n11. The person who is very tall is the person who is the mother of Timothy.\n12. Bob is not in the fourth house.\n13. The person who is very short is the person who uses a Huawei P50.\n14. The person who uses a Samsung Galaxy S21 is directly left of the person who is super tall.\n15. Peter is somewhere to the right of the person who is tall.\n16. Arnold is somewhere to the left of the person's child is named Bella.\n17. The person who uses a Google Pixel 6 is directly left of the person who uses an iPhone 13.\n18. Eric is in the first house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "PhoneModel",
        "Children"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "very short",
          "huawei p50",
          "Meredith"
        ],
        [
          "2",
          "Arnold",
          "very tall",
          "samsung galaxy s21",
          "Timothy"
        ],
        [
          "3",
          "Bob",
          "super tall",
          "google pixel 6",
          "Samantha"
        ],
        [
          "4",
          "Alice",
          "tall",
          "iphone 13",
          "Bella"
        ],
        [
          "5",
          "Carol",
          "average",
          "oneplus 9",
          "Fred"
        ],
        [
          "6",
          "Peter",
          "short",
          "xiaomi mi 11",
          "Alice"
        ]
      ]
    },
    "declarations": "people = EnumSort([Carol, Bob, Eric, Alice, Peter, Arnold])\nheights = EnumSort([super_tall, tall, very_short, average, very_tall, short])\nphones = EnumSort([google_pixel_6, iphone_13, samsung_galaxy_s21, xiaomi_mi_11, oneplus_9, huawei_p50])\nchildren = EnumSort([Fred, Timothy, Alice, Bella, Meredith, Samantha])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nuses_phone = Function([people] -> [phones])\nhas_child = Function([people] -> [children])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses a Xiaomi Mi 11 is the person who is short\nAlice is somewhere to the right of Bob\nThe person who uses a OnePlus 9 is Carol\nThe person who uses a Xiaomi Mi 11 is the person's child is named Alice\nThe person who has an average height is not in the fourth house\nThe person who uses a Samsung Galaxy S21 is in the second house\nAlice is directly left of the person's child is named Fred\nThe person's child is named Meredith and Arnold are next to each other\nThe person's child is named Samantha is the person who is super tall\nThe person who is short is somewhere to the right of the person who uses a Samsung Galaxy S21\nThe person who is very tall is the person who is the mother of Timothy\nBob is not in the fourth house\nThe person who is very short is the person who uses a Huawei P50\nThe person who uses a Samsung Galaxy S21 is directly left of the person who is super tall\nPeter is somewhere to the right of the person who is tall\nArnold is somewhere to the left of the person's child is named Bella\nThe person who uses a Google Pixel 6 is directly left of the person who uses an iPhone 13\nEric is in the first house",
    "queries": "And( And(lives(Eric) == 1, has_height(Eric) == very_short, uses_phone(Eric) == huawei_p50, has_child(Eric) == Meredith), And(lives(Arnold) == 2, has_height(Arnold) == very_tall, uses_phone(Arnold) == samsung_galaxy_s21, has_child(Arnold) == Timothy), And(lives(Bob) == 3, has_height(Bob) == super_tall, uses_phone(Bob) == google_pixel_6, has_child(Bob) == Samantha), And(lives(Alice) == 4, has_height(Alice) == tall, uses_phone(Alice) == iphone_13, has_child(Alice) == Bella), And(lives(Carol) == 5, has_height(Carol) == average, uses_phone(Carol) == oneplus_9, has_child(Carol) == Fred), And(lives(Peter) == 6, has_height(Peter) == short, uses_phone(Peter) == xiaomi_mi_11, has_child(Peter) == Alice) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-26",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Carol`, `Eric`, `Alice`, `Arnold`\n - Each person has a unique type of pet: `bird`, `dog`, `cat`, `rabbit`, `fish`, `hamster`\n - Each person lives in a unique style of house: `victorian`, `ranch`, `modern`, `mediterranean`, `colonial`, `craftsman`\n - Each person has a unique birthday month: `mar`, `sept`, `may`, `feb`, `jan`, `april`\n\nClues:\n1. The person with a pet hamster is somewhere to the right of the person whose birthday is in March.\n2. The person whose birthday is in January is somewhere to the left of the person whose birthday is in September.\n3. The person whose birthday is in May is in the second house.\n4. The person living in a colonial-style house is in the second house.\n5. Carol is in the third house.\n6. The person in a Mediterranean-style villa is not in the sixth house.\n7. The person with an aquarium of fish is somewhere to the right of Bob.\n8. Eric is in the sixth house.\n9. There is one house between the person who has a cat and the person residing in a Victorian house.\n10. There are two houses between the person residing in a Victorian house and the person with a pet hamster.\n11. The person in a Craftsman-style house is Arnold.\n12. The person living in a colonial-style house is somewhere to the left of the person in a modern-style house.\n13. The person with an aquarium of fish is not in the second house.\n14. Peter is the person living in a colonial-style house.\n15. The person whose birthday is in January is directly left of the person whose birthday is in April.\n16. There is one house between the person who keeps a pet bird and the person in a modern-style house.\n17. Carol is the person whose birthday is in March.\n18. The person in a Craftsman-style house is in the fourth house.\n19. The person who owns a dog is in the fourth house.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "HouseStyle",
        "Birthday"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "cat",
          "mediterranean",
          "feb"
        ],
        [
          "2",
          "Peter",
          "rabbit",
          "colonial",
          "may"
        ],
        [
          "3",
          "Carol",
          "bird",
          "victorian",
          "mar"
        ],
        [
          "4",
          "Arnold",
          "dog",
          "craftsman",
          "jan"
        ],
        [
          "5",
          "Alice",
          "fish",
          "modern",
          "april"
        ],
        [
          "6",
          "Eric",
          "hamster",
          "ranch",
          "sept"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Carol, Eric, Alice, Arnold])\npets = EnumSort([bird, dog, cat, rabbit, fish, hamster])\nhouseStyles = EnumSort([victorian, ranch, modern, mediterranean, colonial, craftsman])\nbirthdayMonths = EnumSort([mar, sept, may, feb, jan, april])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_birthdayMonth = Function([people] -> [birthdayMonths])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person with a pet hamster is somewhere to the right of the person whose birthday is in March\nThe person whose birthday is in January is somewhere to the left of the person whose birthday is in September\nThe person whose birthday is in May is in the second house\nThe person living in a colonial-style house is in the second house\nCarol is in the third house\nThe person in a Mediterranean-style villa is not in the sixth house\nThe person with an aquarium of fish is somewhere to the right of Bob\nEric is in the sixth house\nThere is one house between the person who has a cat and the person residing in a Victorian house\nThere are two houses between the person residing in a Victorian house and the person with a pet hamster\nThe person in a Craftsman-style house is Arnold\nThe person living in a colonial-style house is somewhere to the left of the person in a modern-style house\nThe person with an aquarium of fish is not in the second house\nPeter is the person living in a colonial-style house\nThe person whose birthday is in January is directly left of the person whose birthday is in April\nThere is one house between the person who keeps a pet bird and the person in a modern-style house\nCarol is the person whose birthday is in March\nThe person in a Craftsman-style house is in the fourth house\nThe person who owns a dog is in the fourth house",
    "queries": "And( And(lives(Bob) == 1, has_pet(Bob) == cat, has_houseStyle(Bob) == mediterranean, has_birthdayMonth(Bob) == feb), And(lives(Peter) == 2, has_pet(Peter) == rabbit, has_houseStyle(Peter) == colonial, has_birthdayMonth(Peter) == may), And(lives(Carol) == 3, has_pet(Carol) == bird, has_houseStyle(Carol) == victorian, has_birthdayMonth(Carol) == mar), And(lives(Arnold) == 4, has_pet(Arnold) == dog, has_houseStyle(Arnold) == craftsman, has_birthdayMonth(Arnold) == jan), And(lives(Alice) == 5, has_pet(Alice) == fish, has_houseStyle(Alice) == modern, has_birthdayMonth(Alice) == april), And(lives(Eric) == 6, has_pet(Eric) == hamster, has_houseStyle(Eric) == ranch, has_birthdayMonth(Eric) == sept) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-5",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Peter`, `Arnold`, `Eric`\n - Each person has an occupation: `teacher`, `doctor`, `engineer`, `artist`\n - The people are of nationalities: `swede`, `dane`, `norwegian`, `brit`\n - The people keep unique animals: `horse`, `bird`, `cat`, `fish`\n - Each person has a favorite color: `green`, `white`, `red`, `yellow`\n - People have unique favorite sports: `tennis`, `soccer`, `swimming`, `basketball`\n\nClues:\n1. The person who is an artist is directly left of the person who loves swimming.\n2. Alice is the fish enthusiast.\n3. The person who is a teacher is in the second house.\n4. The Norwegian is the person who loves white.\n5. Arnold is directly left of the Swedish person.\n6. The person who loves white and the person who loves tennis are next to each other.\n7. The person who keeps horses is Eric.\n8. The person whose favorite color is green is the person who loves tennis.\n9. The person who keeps horses is directly left of the person who loves tennis.\n10. The person who loves yellow is Peter.\n11. The Dane is in the first house.\n12. Alice is somewhere to the right of Peter.\n13. The person who loves white is not in the second house.\n14. There is one house between the cat lover and the person who loves soccer.\n15. The person who loves tennis is somewhere to the right of the person who is a doctor.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Occupation",
        "Nationality",
        "Animal",
        "Color",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "artist",
          "dane",
          "cat",
          "red",
          "basketball"
        ],
        [
          "2",
          "Peter",
          "teacher",
          "swede",
          "bird",
          "yellow",
          "swimming"
        ],
        [
          "3",
          "Eric",
          "doctor",
          "norwegian",
          "horse",
          "white",
          "soccer"
        ],
        [
          "4",
          "Alice",
          "engineer",
          "brit",
          "fish",
          "green",
          "tennis"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Peter, Arnold, Eric])\noccupations = EnumSort([teacher, doctor, engineer, artist])\nnationalities = EnumSort([swede, dane, norwegian, brit])\nanimals = EnumSort([horse, bird, cat, fish])\ncolors = EnumSort([green, white, red, yellow])\nsports = EnumSort([tennis, soccer, swimming, basketball])\nlives = Function([people] -> [int])\nhas_occupation = Function([people] -> [occupations])\nhas_nationality = Function([people] -> [nationalities])\nhas_animal = Function([people] -> [animals])\nhas_color = Function([people] -> [colors])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person who is an artist is directly left of the person who loves swimming\nAlice is the fish enthusiast\nThe person who is a teacher is in the second house\nThe Norwegian is the person who loves white\nArnold is directly left of the Swedish person\nThe person who loves white and the person who loves tennis are next to each other\nThe person who keeps horses is Eric\nThe person whose favorite color is green is the person who loves tennis\nThe person who keeps horses is directly left of the person who loves tennis\nThe person who loves yellow is Peter\nThe Dane is in the first house\nAlice is somewhere to the right of Peter\nThe person who loves white is not in the second house\nThere is one house between the cat lover and the person who loves soccer\nThe person who loves tennis is somewhere to the right of the person who is a doctor",
    "queries": "And( And(lives(Arnold) == 1, has_occupation(Arnold) == artist, has_nationality(Arnold) == dane, has_animal(Arnold) == cat, has_color(Arnold) == red, has_sport(Arnold) == basketball), And(lives(Peter) == 2, has_occupation(Peter) == teacher, has_nationality(Peter) == swede, has_animal(Peter) == bird, has_color(Peter) == yellow, has_sport(Peter) == swimming), And(lives(Eric) == 3, has_occupation(Eric) == doctor, has_nationality(Eric) == norwegian, has_animal(Eric) == horse, has_color(Eric) == white, has_sport(Eric) == soccer), And(lives(Alice) == 4, has_occupation(Alice) == engineer, has_nationality(Alice) == brit, has_animal(Alice) == fish, has_color(Alice) == green, has_sport(Alice) == tennis) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-27",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Bob`, `Alice`\n - People have unique hair colors: `brown`, `blonde`, `black`, `gray`, `red`\n - Each person prefers a unique type of vacation: `beach`, `camping`, `city`, `cruise`, `mountain`\n - Each person has an occupation: `doctor`, `lawyer`, `engineer`, `teacher`, `artist`\n - People have unique favorite music genres: `jazz`, `pop`, `hip hop`, `classical`, `rock`\n\nClues:\n1. Alice is the person who has brown hair.\n2. The person who is a teacher is somewhere to the right of the person who is an artist.\n3. The person who has blonde hair is in the first house.\n4. The person who prefers city breaks is not in the fourth house.\n5. The person who enjoys mountain retreats is in the third house.\n6. The person who loves beach vacations is somewhere to the right of the person who is a lawyer.\n7. Eric is the person who has black hair.\n8. The person who is an engineer is the person who has red hair.\n9. The person who loves classical music is Bob.\n10. The person who loves hip-hop music is in the fifth house.\n11. The person who has blonde hair is the person who enjoys camping trips.\n12. The person who has red hair is in the second house.\n13. The person who is a teacher is the person who has gray hair.\n14. The person who loves jazz music is the person who has black hair.\n15. There is one house between the person who likes going on cruises and the person who has gray hair.\n16. The person who loves rock music is the person who has red hair.\n17. The person who is a lawyer is not in the third house.\n18. The person who has blonde hair is Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "Vacation",
        "Occupation",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "blonde",
          "camping",
          "lawyer",
          "pop"
        ],
        [
          "2",
          "Peter",
          "red",
          "cruise",
          "engineer",
          "rock"
        ],
        [
          "3",
          "Eric",
          "black",
          "mountain",
          "artist",
          "jazz"
        ],
        [
          "4",
          "Bob",
          "gray",
          "beach",
          "teacher",
          "classical"
        ],
        [
          "5",
          "Alice",
          "brown",
          "city",
          "doctor",
          "hip hop"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Bob, Alice])\nhairColors = EnumSort([brown, blonde, black, gray, red])\nvacations = EnumSort([beach, camping, city, cruise, mountain])\noccupations = EnumSort([doctor, lawyer, engineer, teacher, artist])\nmusicGenres = EnumSort([jazz, pop, hip_hop, classical, rock])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nprefers_vacation = Function([people] -> [vacations])\nhas_occupation = Function([people] -> [occupations])\nlikes_music = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Alice is the person who has brown hair\nThe person who is a teacher is somewhere to the right of the person who is an artist\nThe person who has blonde hair is in the first house\nThe person who prefers city breaks is not in the fourth house\nThe person who enjoys mountain retreats is in the third house\nThe person who loves beach vacations is somewhere to the right of the person who is a lawyer\nEric is the person who has black hair\nThe person who is an engineer is the person who has red hair\nThe person who loves classical music is Bob\nThe person who loves hip-hop music is in the fifth house\nThe person who has blonde hair is the person who enjoys camping trips\nThe person who has red hair is in the second house\nThe person who is a teacher is the person who has gray hair\nThe person who loves jazz music is the person who has black hair\nThere is one house between the person who likes going on cruises and the person who has gray hair\nThe person who loves rock music is the person who has red hair\nThe person who is a lawyer is not in the third house\nThe person who has blonde hair is Arnold",
    "queries": "And( And(lives(Arnold) == 1, has_hairColor(Arnold) == blonde, prefers_vacation(Arnold) == camping, has_occupation(Arnold) == lawyer, likes_music(Arnold) == pop), And(lives(Peter) == 2, has_hairColor(Peter) == red, prefers_vacation(Peter) == cruise, has_occupation(Peter) == engineer, likes_music(Peter) == rock), And(lives(Eric) == 3, has_hairColor(Eric) == black, prefers_vacation(Eric) == mountain, has_occupation(Eric) == artist, likes_music(Eric) == jazz), And(lives(Bob) == 4, has_hairColor(Bob) == gray, prefers_vacation(Bob) == beach, has_occupation(Bob) == teacher, likes_music(Bob) == classical), And(lives(Alice) == 5, has_hairColor(Alice) == brown, prefers_vacation(Alice) == city, has_occupation(Alice) == doctor, likes_music(Alice) == hip_hop) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-30",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Bob`, `Alice`, `Arnold`, `Carol`, `Peter`\n - The people are of nationalities: `swede`, `norwegian`, `german`, `chinese`, `dane`, `brit`\n - They all have a unique favorite flower: `daffodils`, `roses`, `carnations`, `lilies`, `tulips`, `iris`\n - Each person has a unique favorite drink: `water`, `tea`, `root beer`, `coffee`, `boba tea`, `milk`\n - Each person has a favorite color: `green`, `blue`, `purple`, `red`, `yellow`, `white`\n - Each person has a unique level of education: `high school`, `associate`, `bachelor`, `doctorate`, `trade school`, `master`\n\nClues:\n1. Arnold is somewhere to the left of the person who loves a carnations arrangement.\n2. The coffee drinker is the person who loves the vase of tulips.\n3. The German is directly left of the one who only drinks water.\n4. The person whose favorite color is green is Alice.\n5. The person who loves white is the coffee drinker.\n6. The coffee drinker is the person with a bachelor's degree.\n7. The one who only drinks water is the person who loves purple.\n8. The person who loves a bouquet of daffodils is the person who loves blue.\n9. The tea drinker is directly left of the person who loves a carnations arrangement.\n10. The person with a high school diploma is Carol.\n11. There is one house between the person who loves the boquet of iris and Peter.\n12. The person with an associate's degree is the person whose favorite color is green.\n13. Arnold is the Chinese.\n14. The person whose favorite color is red is in the third house.\n15. The boba tea drinker and the person who loves the vase of tulips are next to each other.\n16. Alice is directly left of the Swedish person.\n17. There is one house between the British person and the Chinese.\n18. The person who loves the rose bouquet is somewhere to the left of the person with a bachelor's degree.\n19. The person who loves yellow is not in the first house.\n20. There are two houses between the person who likes milk and Peter.\n21. Bob is the person with a master's degree.\n22. The Swedish person is the person with a master's degree.\n23. The person who attended trade school is somewhere to the left of the Chinese.\n24. The German is in the fifth house.\n25. The Norwegian is the one who only drinks water.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Flower",
        "Drink",
        "Color",
        "Education"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "dane",
          "daffodils",
          "root beer",
          "blue",
          "trade school"
        ],
        [
          "2",
          "Alice",
          "brit",
          "roses",
          "milk",
          "green",
          "associate"
        ],
        [
          "3",
          "Bob",
          "swede",
          "iris",
          "boba tea",
          "red",
          "master"
        ],
        [
          "4",
          "Arnold",
          "chinese",
          "tulips",
          "coffee",
          "white",
          "bachelor"
        ],
        [
          "5",
          "Peter",
          "german",
          "lilies",
          "tea",
          "yellow",
          "doctorate"
        ],
        [
          "6",
          "Carol",
          "norwegian",
          "carnations",
          "water",
          "purple",
          "high school"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Bob, Alice, Arnold, Carol, Peter])\nnationalities = EnumSort([swede, norwegian, german, chinese, dane, brit])\nflowers = EnumSort([daffodils, roses, carnations, lilies, tulips, iris])\ndrinks = EnumSort([water, tea, root_beer, coffee, boba_tea, milk])\ncolors = EnumSort([green, blue, purple, red, yellow, white])\neducation = EnumSort([high_school, associate, bachelor, doctorate, trade_school, master])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_flower = Function([people] -> [flowers])\nhas_drink = Function([people] -> [drinks])\nhas_color = Function([people] -> [colors])\nhas_education = Function([people] -> [education])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Arnold is somewhere to the left of the person who loves a carnations arrangement\nThe coffee drinker is the person who loves the vase of tulips\nThe German is directly left of the one who only drinks water\nThe person whose favorite color is green is Alice\nThe person who loves white is the coffee drinker\nThe coffee drinker is the person with a bachelor's degree\nThe one who only drinks water is the person who loves purple\nThe person who loves a bouquet of daffodils is the person who loves blue\nThe tea drinker is directly left of the person who loves a carnations arrangement\nThe person with a high school diploma is Carol\nThere is one house between the person who loves the boquet of iris and Peter\nThe person with an associate's degree is the person whose favorite color is green\nArnold is the Chinese\nThe person whose favorite color is red is in the third house\nThe boba tea drinker and the person who loves the vase of tulips are next to each other\nAlice is directly left of the Swedish person\nThere is one house between the British person and the Chinese\nThe person who loves the rose bouquet is somewhere to the left of the person with a bachelor's degree\nThe person who loves yellow is not in the first house\nThere are two houses between the person who likes milk and Peter\nBob is the person with a master's degree\nThe Swedish person is the person with a master's degree\nThe person who attended trade school is somewhere to the left of the Chinese\nThe German is in the fifth house\nThe Norwegian is the one who only drinks water",
    "queries": "And( And(lives(Eric) == 1, has_nationality(Eric) == dane, has_flower(Eric) == daffodils, has_drink(Eric) == root_beer, has_color(Eric) == blue, has_education(Eric) == trade_school), And(lives(Alice) == 2, has_nationality(Alice) == brit, has_flower(Alice) == roses, has_drink(Alice) == milk, has_color(Alice) == green, has_education(Alice) == associate), And(lives(Bob) == 3, has_nationality(Bob) == swede, has_flower(Bob) == iris, has_drink(Bob) == boba_tea, has_color(Bob) == red, has_education(Bob) == master), And(lives(Arnold) == 4, has_nationality(Arnold) == chinese, has_flower(Arnold) == tulips, has_drink(Arnold) == coffee, has_color(Arnold) == white, has_education(Arnold) == bachelor), And(lives(Peter) == 5, has_nationality(Peter) == german, has_flower(Peter) == lilies, has_drink(Peter) == tea, has_color(Peter) == yellow, has_education(Peter) == doctorate), And(lives(Carol) == 6, has_nationality(Carol) == norwegian, has_flower(Carol) == carnations, has_drink(Carol) == water, has_color(Carol) == purple, has_education(Carol) == high_school) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-21",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Alice`, `Bob`, `Eric`, `Arnold`\n - The people are of nationalities: `dane`, `swede`, `norwegian`, `brit`, `german`\n - Everyone has a favorite smoothie: `desert`, `cherry`, `watermelon`, `dragonfruit`, `lime`\n - They all have a unique favorite flower: `tulips`, `roses`, `daffodils`, `carnations`, `lilies`\n - Each person lives in a unique style of house: `ranch`, `modern`, `victorian`, `colonial`, `craftsman`\n - The people keep unique animals: `dog`, `horse`, `bird`, `fish`, `cat`\n\nClues:\n1. The person living in a colonial-style house is Peter.\n2. The person who keeps horses is the person who drinks Lime smoothies.\n3. Alice is the British person.\n4. The Swedish person is in the first house.\n5. The person who keeps horses and the dog owner are next to each other.\n6. There is one house between the person in a Craftsman-style house and the Dane.\n7. The person who loves the boquet of lilies is directly left of the fish enthusiast.\n8. The person who loves the boquet of lilies is the person in a modern-style house.\n9. The Desert smoothie lover is in the first house.\n10. The person residing in a Victorian house is somewhere to the right of the Watermelon smoothie lover.\n11. The person who loves a bouquet of daffodils is Alice.\n12. The Dragonfruit smoothie lover is not in the third house.\n13. The person who loves a carnations arrangement is the German.\n14. The Dragonfruit smoothie lover is Eric.\n15. Bob is somewhere to the right of the person who loves the rose bouquet.\n16. The Watermelon smoothie lover is the Norwegian.\n17. Bob is the person in a modern-style house.\n18. The person residing in a Victorian house is not in the fifth house.\n19. The person who loves a carnations arrangement is somewhere to the left of the person in a modern-style house.\n20. The Desert smoothie lover is the bird keeper.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Nationality",
        "Smoothie",
        "Flower",
        "HouseStyle",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "swede",
          "desert",
          "roses",
          "colonial",
          "bird"
        ],
        [
          "2",
          "Arnold",
          "german",
          "lime",
          "carnations",
          "craftsman",
          "horse"
        ],
        [
          "3",
          "Bob",
          "norwegian",
          "watermelon",
          "lilies",
          "modern",
          "dog"
        ],
        [
          "4",
          "Eric",
          "dane",
          "dragonfruit",
          "tulips",
          "victorian",
          "fish"
        ],
        [
          "5",
          "Alice",
          "brit",
          "cherry",
          "daffodils",
          "ranch",
          "cat"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Alice, Bob, Eric, Arnold])\nnationalities = EnumSort([dane, swede, norwegian, brit, german])\nsmoothies = EnumSort([desert, cherry, watermelon, dragonfruit, lime])\nflowers = EnumSort([tulips, roses, daffodils, carnations, lilies])\nhouseStyles = EnumSort([ranch, modern, victorian, colonial, craftsman])\nanimals = EnumSort([dog, horse, bird, fish, cat])\nlives = Function([people] -> [int])\nhas_nationality = Function([people] -> [nationalities])\nhas_smoothie = Function([people] -> [smoothies])\nhas_flower = Function([people] -> [flowers])\nhas_houseStyle = Function([people] -> [houseStyles])\nhas_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person living in a colonial-style house is Peter\nThe person who keeps horses is the person who drinks Lime smoothies\nAlice is the British person\nThe Swedish person is in the first house\nThe person who keeps horses and the dog owner are next to each other\nThere is one house between the person in a Craftsman-style house and the Dane\nThe person who loves the boquet of lilies is directly left of the fish enthusiast\nThe person who loves the boquet of lilies is the person in a modern-style house\nThe Desert smoothie lover is in the first house\nThe person residing in a Victorian house is somewhere to the right of the Watermelon smoothie lover\nThe person who loves a bouquet of daffodils is Alice\nThe Dragonfruit smoothie lover is not in the third house\nThe person who loves a carnations arrangement is the German\nThe Dragonfruit smoothie lover is Eric\nBob is somewhere to the right of the person who loves the rose bouquet\nThe Watermelon smoothie lover is the Norwegian\nBob is the person in a modern-style house\nThe person residing in a Victorian house is not in the fifth house\nThe person who loves a carnations arrangement is somewhere to the left of the person in a modern-style house\nThe Desert smoothie lover is the bird keeper",
    "queries": "And( And(lives(Peter) == 1, has_nationality(Peter) == swede, has_smoothie(Peter) == desert, has_flower(Peter) == roses, has_houseStyle(Peter) == colonial, has_animal(Peter) == bird), And(lives(Arnold) == 2, has_nationality(Arnold) == german, has_smoothie(Arnold) == lime, has_flower(Arnold) == carnations, has_houseStyle(Arnold) == craftsman, has_animal(Arnold) == horse), And(lives(Bob) == 3, has_nationality(Bob) == norwegian, has_smoothie(Bob) == watermelon, has_flower(Bob) == lilies, has_houseStyle(Bob) == modern, has_animal(Bob) == dog), And(lives(Eric) == 4, has_nationality(Eric) == dane, has_smoothie(Eric) == dragonfruit, has_flower(Eric) == tulips, has_houseStyle(Eric) == victorian, has_animal(Eric) == fish), And(lives(Alice) == 5, has_nationality(Alice) == brit, has_smoothie(Alice) == cherry, has_flower(Alice) == daffodils, has_houseStyle(Alice) == ranch, has_animal(Alice) == cat) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-4",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Carol`, `Peter`, `Bob`, `Arnold`, `Eric`\n - They all have a unique favorite flower: `carnations`, `iris`, `tulips`, `daffodils`, `lilies`, `roses`\n - Each person prefers a unique type of vacation: `camping`, `mountain`, `city`, `beach`, `cultural`, `cruise`\n - Each person lives in a unique style of house: `colonial`, `modern`, `mediterranean`, `craftsman`, `ranch`, `victorian`\n - People have unique heights: `short`, `very short`, `average`, `tall`, `super tall`, `very tall`\n - People have unique hair colors: `red`, `black`, `gray`, `brown`, `auburn`, `blonde`\n\nClues:\n1. The person who loves the boquet of lilies is not in the fifth house.\n2. The person who is very short is the person who has auburn hair.\n3. Arnold is the person who enjoys camping trips.\n4. The person who has auburn hair is Eric.\n5. The person who goes on cultural tours is somewhere to the left of the person who is super tall.\n6. There are two houses between the person who has gray hair and the person who is short.\n7. The person who is tall is somewhere to the left of the person who has brown hair.\n8. The person in a Craftsman-style house is Bob.\n9. The person who is very short is somewhere to the left of the person who has blonde hair.\n10. The person who is very tall is Bob.\n11. There are two houses between the person who loves the rose bouquet and Peter.\n12. The person in a modern-style house is not in the fourth house.\n13. The person who prefers city breaks is the person who is short.\n14. The person living in a colonial-style house is somewhere to the left of the person who loves the vase of tulips.\n15. The person who loves a carnations arrangement is the person who has brown hair.\n16. The person who has red hair is the person who loves the boquet of lilies.\n17. The person who enjoys mountain retreats is the person residing in a Victorian house.\n18. The person who loves a bouquet of daffodils is the person in a modern-style house.\n19. Arnold is the person who has an average height.\n20. The person in a Mediterranean-style villa is not in the first house.\n21. The person who is tall is not in the fifth house.\n22. The person who loves the vase of tulips is not in the fourth house.\n23. Carol is directly left of Bob.\n24. The person who is very tall is the person who goes on cultural tours.\n25. The person in a Mediterranean-style villa is the person who has red hair.\n26. The person who is super tall is the person who has black hair.\n27. Eric is the person who loves the rose bouquet.\n28. The person who enjoys mountain retreats is directly left of the person who likes going on cruises.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Vacation",
        "HouseStyle",
        "Height",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "roses",
          "mountain",
          "victorian",
          "very short",
          "auburn"
        ],
        [
          "2",
          "Carol",
          "daffodils",
          "cruise",
          "modern",
          "tall",
          "gray"
        ],
        [
          "3",
          "Bob",
          "carnations",
          "cultural",
          "craftsman",
          "very tall",
          "brown"
        ],
        [
          "4",
          "Peter",
          "iris",
          "beach",
          "colonial",
          "super tall",
          "black"
        ],
        [
          "5",
          "Alice",
          "tulips",
          "city",
          "ranch",
          "short",
          "blonde"
        ],
        [
          "6",
          "Arnold",
          "lilies",
          "camping",
          "mediterranean",
          "average",
          "red"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Carol, Peter, Bob, Arnold, Eric])\nflowers = EnumSort([carnations, iris, tulips, daffodils, lilies, roses])\nvacations = EnumSort([camping, mountain, city, beach, cultural, cruise])\nhouses = EnumSort([colonial, modern, mediterranean, craftsman, ranch, victorian])\nheights = EnumSort([short, very_short, average, tall, super_tall, very_tall])\nhair_colors = EnumSort([red, black, gray, brown, auburn, blonde])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_vacation = Function([people] -> [vacations])\nhas_house = Function([people] -> [houses])\nhas_height = Function([people] -> [heights])\nhas_hair_color = Function([people] -> [hair_colors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who loves the boquet of lilies is not in the fifth house\nThe person who is very short is the person who has auburn hair\nArnold is the person who enjoys camping trips\nThe person who has auburn hair is Eric\nThe person who goes on cultural tours is somewhere to the left of the person who is super tall\nThere are two houses between the person who has gray hair and the person who is short\nThe person who is tall is somewhere to the left of the person who has brown hair\nThe person in a Craftsman-style house is Bob\nThe person who is very short is somewhere to the left of the person who has blonde hair\nThe person who is very tall is Bob\nThere are two houses between the person who loves the rose bouquet and Peter\nThe person in a modern-style house is not in the fourth house\nThe person who prefers city breaks is the person who is short\nThe person living in a colonial-style house is somewhere to the left of the person who loves the vase of tulips\nThe person who loves a carnations arrangement is the person who has brown hair\nThe person who has red hair is the person who loves the boquet of lilies\nThe person who enjoys mountain retreats is the person residing in a Victorian house\nThe person who loves a bouquet of daffodils is the person in a modern-style house\nArnold is the person who has an average height\nThe person in a Mediterranean-style villa is not in the first house\nThe person who is tall is not in the fifth house\nThe person who loves the vase of tulips is not in the fourth house\nCarol is directly left of Bob\nThe person who is very tall is the person who goes on cultural tours\nThe person in a Mediterranean-style villa is the person who has red hair\nThe person who is super tall is the person who has black hair\nEric is the person who loves the rose bouquet\nThe person who enjoys mountain retreats is directly left of the person who likes going on cruises",
    "queries": "And( And( lives(Eric) == 1, has_flower(Eric) == roses, has_vacation(Eric) == mountain, has_house(Eric) == victorian, has_height(Eric) == very_short, has_hair_color(Eric) == auburn ), And( lives(Carol) == 2, has_flower(Carol) == daffodils, has_vacation(Carol) == cruise, has_house(Carol) == modern, has_height(Carol) == tall, has_hair_color(Carol) == gray ), And( lives(Bob) == 3, has_flower(Bob) == carnations, has_vacation(Bob) == cultural, has_house(Bob) == craftsman, has_height(Bob) == very_tall, has_hair_color(Bob) == brown ), And( lives(Peter) == 4, has_flower(Peter) == iris, has_vacation(Peter) == beach, has_house(Peter) == colonial, has_height(Peter) == super_tall, has_hair_color(Peter) == black ), And( lives(Alice) == 5, has_flower(Alice) == tulips, has_vacation(Alice) == city, has_house(Alice) == ranch, has_height(Alice) == short, has_hair_color(Alice) == blonde ), And( lives(Arnold) == 6, has_flower(Arnold) == lilies, has_vacation(Arnold) == camping, has_house(Arnold) == mediterranean, has_height(Arnold) == average, has_hair_color(Arnold) == red ) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-23",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Arnold`, `Bob`, `Alice`, `Carol`\n - The people keep unique animals: `rabbit`, `dog`, `fish`, `bird`, `cat`, `horse`\n - Each person has a unique hobby: `cooking`, `knitting`, `painting`, `woodworking`, `photography`, `gardening`\n - People have unique favorite sports: `basketball`, `soccer`, `swimming`, `tennis`, `baseball`, `volleyball`\n - Each person prefers a unique type of vacation: `cruise`, `cultural`, `city`, `camping`, `mountain`, `beach`\n - Each person has a unique favorite drink: `water`, `root beer`, `boba tea`, `tea`, `milk`, `coffee`\n\nClues:\n1. The person who enjoys camping trips is the person who loves cooking.\n2. The person who loves baseball is the photography enthusiast.\n3. The person who loves volleyball is somewhere to the left of the person who prefers city breaks.\n4. Carol is the person who loves tennis.\n5. The dog owner is the person who loves swimming.\n6. The photography enthusiast is the tea drinker.\n7. The person who loves baseball is directly left of the person who goes on cultural tours.\n8. Peter is the person who enjoys camping trips.\n9. The person who enjoys knitting is the person who keeps horses.\n10. The coffee drinker is directly left of the person who loves soccer.\n11. The person who enjoys mountain retreats is the person who loves soccer.\n12. The boba tea drinker is not in the fourth house.\n13. The cat lover is somewhere to the left of the dog owner.\n14. The person who loves beach vacations is Bob.\n15. The coffee drinker is somewhere to the right of Alice.\n16. The tea drinker is the fish enthusiast.\n17. The person who likes milk is Carol.\n18. There is one house between the rabbit owner and the woodworking hobbyist.\n19. The person who loves cooking is not in the third house.\n20. The person who loves tennis is the rabbit owner.\n21. The dog owner is directly left of the person who likes going on cruises.\n22. The woodworking hobbyist is the dog owner.\n23. There are two houses between the person who paints as a hobby and the person who keeps horses.\n24. Arnold is the root beer lover.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Animal",
        "Hobby",
        "FavoriteSport",
        "Vacation",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "cat",
          "cooking",
          "volleyball",
          "camping",
          "boba tea"
        ],
        [
          "2",
          "Carol",
          "rabbit",
          "painting",
          "tennis",
          "city",
          "milk"
        ],
        [
          "3",
          "Bob",
          "fish",
          "photography",
          "baseball",
          "beach",
          "tea"
        ],
        [
          "4",
          "Alice",
          "dog",
          "woodworking",
          "swimming",
          "cultural",
          "water"
        ],
        [
          "5",
          "Eric",
          "horse",
          "knitting",
          "basketball",
          "cruise",
          "coffee"
        ],
        [
          "6",
          "Arnold",
          "bird",
          "gardening",
          "soccer",
          "mountain",
          "root beer"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Arnold, Bob, Alice, Carol])\nanimals = EnumSort([rabbit, dog, fish, bird, cat, horse])\nhobbies = EnumSort([cooking, knitting, painting, woodworking, photography, gardening])\nsports = EnumSort([basketball, soccer, swimming, tennis, baseball, volleyball])\nvacations = EnumSort([cruise, cultural, city, camping, mountain, beach])\ndrinks = EnumSort([water, root_beer, boba_tea, tea, milk, coffee])\nlives = Function([people] -> [int])\nhas_animal = Function([people] -> [animals])\nhas_hobby = Function([people] -> [hobbies])\nhas_sport = Function([people] -> [sports])\nhas_vacation = Function([people] -> [vacations])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who enjoys camping trips is the person who loves cooking\nThe person who loves baseball is the photography enthusiast\nThe person who loves volleyball is somewhere to the left of the person who prefers city breaks\nCarol is the person who loves tennis\nThe dog owner is the person who loves swimming\nThe photography enthusiast is the tea drinker\nThe person who loves baseball is directly left of the person who goes on cultural tours\nPeter is the person who enjoys camping trips\nThe person who enjoys knitting is the person who keeps horses\nThe coffee drinker is directly left of the person who loves soccer\nThe person who enjoys mountain retreats is the person who loves soccer\nThe boba tea drinker is not in the fourth house\nThe cat lover is somewhere to the left of the dog owner\nThe person who loves beach vacations is Bob\nThe coffee drinker is somewhere to the right of Alice\nThe tea drinker is the fish enthusiast\nThe person who likes milk is Carol\nThere is one house between the rabbit owner and the woodworking hobbyist\nThe person who loves cooking is not in the third house\nThe person who loves tennis is the rabbit owner\nThe dog owner is directly left of the person who likes going on cruises\nThe woodworking hobbyist is the dog owner\nThere are two houses between the person who paints as a hobby and the person who keeps horses\nArnold is the root beer lover",
    "queries": "And( And(lives(Peter) == 1, has_animal(Peter) == cat, has_hobby(Peter) == cooking, has_sport(Peter) == volleyball, has_vacation(Peter) == camping, has_drink(Peter) == boba_tea), And(lives(Carol) == 2, has_animal(Carol) == rabbit, has_hobby(Carol) == painting, has_sport(Carol) == tennis, has_vacation(Carol) == city, has_drink(Carol) == milk), And(lives(Bob) == 3, has_animal(Bob) == fish, has_hobby(Bob) == photography, has_sport(Bob) == baseball, has_vacation(Bob) == beach, has_drink(Bob) == tea), And(lives(Alice) == 4, has_animal(Alice) == dog, has_hobby(Alice) == woodworking, has_sport(Alice) == swimming, has_vacation(Alice) == cultural, has_drink(Alice) == water), And(lives(Eric) == 5, has_animal(Eric) == horse, has_hobby(Eric) == knitting, has_sport(Eric) == basketball, has_vacation(Eric) == cruise, has_drink(Eric) == coffee), And(lives(Arnold) == 6, has_animal(Arnold) == bird, has_hobby(Arnold) == gardening, has_sport(Arnold) == soccer, has_vacation(Arnold) == mountain, has_drink(Arnold) == root_beer) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x6-17",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Bob`, `Alice`, `Eric`, `Peter`, `Arnold`\n - People use unique phone models: `iphone 13`, `samsung galaxy s21`, `huawei p50`, `google pixel 6`, `oneplus 9`\n - People have unique favorite sports: `soccer`, `swimming`, `baseball`, `basketball`, `tennis`\n - Everyone has a favorite smoothie: `cherry`, `dragonfruit`, `lime`, `desert`, `watermelon`\n - Each person prefers a unique type of vacation: `city`, `cruise`, `beach`, `mountain`, `camping`\n - The people keep unique animals: `horse`, `fish`, `cat`, `dog`, `bird`\n\nClues:\n1. Peter is somewhere to the right of the person who uses an iPhone 13.\n2. The person who loves tennis is directly left of the person who uses a Google Pixel 6.\n3. There is one house between the Watermelon smoothie lover and the person who loves beach vacations.\n4. The person who loves baseball is in the fourth house.\n5. The dog owner is Peter.\n6. There is one house between the person who prefers city breaks and the person who keeps horses.\n7. The fish enthusiast is directly left of the cat lover.\n8. Arnold is the Desert smoothie lover.\n9. The person who likes Cherry smoothies is the person who enjoys mountain retreats.\n10. The person who loves swimming is not in the first house.\n11. Bob is the person who prefers city breaks.\n12. The person who uses a Huawei P50 is the fish enthusiast.\n13. The person who loves tennis is the person who enjoys mountain retreats.\n14. The person who loves baseball is somewhere to the left of the person who loves soccer.\n15. The person who uses a OnePlus 9 is Peter.\n16. There is one house between the person who prefers city breaks and Alice.\n17. The person who enjoys camping trips is the Dragonfruit smoothie lover.\n18. The person who loves baseball is the person who enjoys camping trips.\n19. The person who loves beach vacations is directly left of the person who enjoys camping trips.\n20. Bob is the fish enthusiast.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "FavoriteSport",
        "Smoothie",
        "Vacation",
        "Animal"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "huawei p50",
          "basketball",
          "watermelon",
          "city",
          "fish"
        ],
        [
          "2",
          "Eric",
          "iphone 13",
          "tennis",
          "cherry",
          "mountain",
          "cat"
        ],
        [
          "3",
          "Alice",
          "google pixel 6",
          "swimming",
          "lime",
          "beach",
          "horse"
        ],
        [
          "4",
          "Peter",
          "oneplus 9",
          "baseball",
          "dragonfruit",
          "camping",
          "dog"
        ],
        [
          "5",
          "Arnold",
          "samsung galaxy s21",
          "soccer",
          "desert",
          "cruise",
          "bird"
        ]
      ]
    },
    "declarations": "people = EnumSort([Bob, Alice, Eric, Peter, Arnold])\nphoneModels = EnumSort([iphone_13, samsung_galaxy_s21, huawei_p50, google_pixel_6, oneplus_9])\nsports = EnumSort([soccer, swimming, baseball, basketball, tennis])\nsmoothies = EnumSort([cherry, dragonfruit, lime, desert, watermelon])\nvacations = EnumSort([city, cruise, beach, mountain, camping])\nanimals = EnumSort([horse, fish, cat, dog, bird])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nlikes_sport = Function([people] -> [sports])\nlikes_smoothie = Function([people] -> [smoothies])\nprefers_vacation = Function([people] -> [vacations])\nkeeps_animal = Function([people] -> [animals])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "Peter is somewhere to the right of the person who uses an iPhone 13\nThe person who loves tennis is directly left of the person who uses a Google Pixel 6\nThere is one house between the Watermelon smoothie lover and the person who loves beach vacations\nThe person who loves baseball is in the fourth house\nThe dog owner is Peter\nThere is one house between the person who prefers city breaks and the person who keeps horses\nThe fish enthusiast is directly left of the cat lover\nArnold is the Desert smoothie lover\nThe person who likes Cherry smoothies is the person who enjoys mountain retreats\nThe person who loves swimming is not in the first house\nBob is the person who prefers city breaks\nThe person who uses a Huawei P50 is the fish enthusiast\nThe person who loves tennis is the person who enjoys mountain retreats\nThe person who loves baseball is somewhere to the left of the person who loves soccer\nThe person who uses a OnePlus 9 is Peter\nThere is one house between the person who prefers city breaks and Alice\nThe person who enjoys camping trips is the Dragonfruit smoothie lover\nThe person who loves baseball is the person who enjoys camping trips\nThe person who loves beach vacations is directly left of the person who enjoys camping trips\nBob is the fish enthusiast",
    "queries": "And( And(lives(Bob) == 1, uses_phone(Bob) == huawei_p50, likes_sport(Bob) == basketball, likes_smoothie(Bob) == watermelon, prefers_vacation(Bob) == city, keeps_animal(Bob) == fish), And(lives(Eric) == 2, uses_phone(Eric) == iphone_13, likes_sport(Eric) == tennis, likes_smoothie(Eric) == cherry, prefers_vacation(Eric) == mountain, keeps_animal(Eric) == cat), And(lives(Alice) == 3, uses_phone(Alice) == google_pixel_6, likes_sport(Alice) == swimming, likes_smoothie(Alice) == lime, prefers_vacation(Alice) == beach, keeps_animal(Alice) == horse), And(lives(Peter) == 4, uses_phone(Peter) == oneplus_9, likes_sport(Peter) == baseball, likes_smoothie(Peter) == dragonfruit, prefers_vacation(Peter) == camping, keeps_animal(Peter) == dog), And(lives(Arnold) == 5, uses_phone(Arnold) == samsung_galaxy_s21, likes_sport(Arnold) == soccer, likes_smoothie(Arnold) == desert, prefers_vacation(Arnold) == cruise, keeps_animal(Arnold) == bird) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-10",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Carol`, `Peter`, `Eric`, `Bob`\n - Each person has a unique type of pet: `cat`, `bird`, `fish`, `dog`, `hamster`, `rabbit`\n - People have unique heights: `super tall`, `average`, `tall`, `very short`, `very tall`, `short`\n - People have unique favorite sports: `baseball`, `tennis`, `soccer`, `swimming`, `basketball`, `volleyball`\n\nClues:\n1. There is one house between the person who has an average height and the person who is short.\n2. The person with an aquarium of fish is in the fifth house.\n3. The person who has a cat is the person who is tall.\n4. The person who is very tall is the person who loves soccer.\n5. Peter is in the first house.\n6. The person who loves tennis is in the sixth house.\n7. Carol is somewhere to the right of the person who is very tall.\n8. The person who loves volleyball is directly left of the person who loves soccer.\n9. The person who loves baseball is directly left of the person who is super tall.\n10. Carol and Bob are next to each other.\n11. The person who is super tall is not in the sixth house.\n12. The person who is short is not in the fourth house.\n13. There is one house between the person who loves swimming and Bob.\n14. The person who loves basketball is somewhere to the left of the person who owns a dog.\n15. The person who owns a rabbit is somewhere to the left of the person who is short.\n16. The person who keeps a pet bird is the person who is short.\n17. Arnold is not in the second house.\n18. Bob is directly left of Eric.\n19. The person who owns a rabbit and the person who is very tall are next to each other.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "Height",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Peter",
          "rabbit",
          "average",
          "volleyball"
        ],
        [
          "2",
          "Alice",
          "hamster",
          "very tall",
          "soccer"
        ],
        [
          "3",
          "Arnold",
          "bird",
          "short",
          "swimming"
        ],
        [
          "4",
          "Carol",
          "cat",
          "tall",
          "baseball"
        ],
        [
          "5",
          "Bob",
          "fish",
          "super tall",
          "basketball"
        ],
        [
          "6",
          "Eric",
          "dog",
          "very short",
          "tennis"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Carol, Peter, Eric, Bob])\npets = EnumSort([cat, bird, fish, dog, hamster, rabbit])\nheights = EnumSort([super_tall, average, tall, very_short, very_tall, short])\nsports = EnumSort([baseball, tennis, soccer, swimming, basketball, volleyball])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_height = Function([people] -> [heights])\nhas_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "There is one house between the person who has an average height and the person who is short\nThe person with an aquarium of fish is in the fifth house\nThe person who has a cat is the person who is tall\nThe person who is very tall is the person who loves soccer\nPeter is in the first house\nThe person who loves tennis is in the sixth house\nCarol is somewhere to the right of the person who is very tall\nThe person who loves volleyball is directly left of the person who loves soccer\nThe person who loves baseball is directly left of the person who is super tall\nCarol and Bob are next to each other\nThe person who is super tall is not in the sixth house\nThe person who is short is not in the fourth house\nThere is one house between the person who loves swimming and Bob\nThe person who loves basketball is somewhere to the left of the person who owns a dog\nThe person who owns a rabbit is somewhere to the left of the person who is short\nThe person who keeps a pet bird is the person who is short\nArnold is not in the second house\nBob is directly left of Eric\nThe person who owns a rabbit and the person who is very tall are next to each other",
    "queries": "And( And(lives(Peter) == 1, has_pet(Peter) == rabbit, has_height(Peter) == average, has_sport(Peter) == volleyball), And(lives(Alice) == 2, has_pet(Alice) == hamster, has_height(Alice) == very_tall, has_sport(Alice) == soccer), And(lives(Arnold) == 3, has_pet(Arnold) == bird, has_height(Arnold) == short, has_sport(Arnold) == swimming), And(lives(Carol) == 4, has_pet(Carol) == cat, has_height(Carol) == tall, has_sport(Carol) == baseball), And(lives(Bob) == 5, has_pet(Bob) == fish, has_height(Bob) == super_tall, has_sport(Bob) == basketball), And(lives(Eric) == 6, has_pet(Eric) == dog, has_height(Eric) == very_short, has_sport(Eric) == tennis) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x6-26",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Carol`, `Eric`, `Alice`, `Bob`, `Arnold`\n - People use unique phone models: `huawei p50`, `google pixel 6`, `xiaomi mi 11`, `iphone 13`, `samsung galaxy s21`, `oneplus 9`\n - Everyone has a unique favorite cigar: `dunhill`, `pall mall`, `blends`, `blue master`, `prince`, `yellow monster`\n - They all have a unique favorite flower: `daffodils`, `carnations`, `roses`, `tulips`, `lilies`, `iris`\n - Each person has a favorite color: `yellow`, `red`, `green`, `blue`, `white`, `purple`\n - People have unique favorite sports: `soccer`, `tennis`, `basketball`, `volleyball`, `swimming`, `baseball`\n\nClues:\n1. The person who uses a OnePlus 9 is in the second house.\n2. The person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses a Huawei P50.\n3. Carol is the person who loves a carnations arrangement.\n4. The person who loves purple is directly left of the person partial to Pall Mall.\n5. The person whose favorite color is green is the person who smokes Blue Master.\n6. The person who loves yellow and the person who loves blue are next to each other.\n7. Eric is somewhere to the right of the person who uses a Samsung Galaxy S21.\n8. There are two houses between Carol and the person who loves a bouquet of daffodils.\n9. The Prince smoker is the person who loves basketball.\n10. The Dunhill smoker is the person who loves volleyball.\n11. The person who loves swimming is the person who uses a Google Pixel 6.\n12. The person who uses a Huawei P50 is directly left of the person who loves white.\n13. The person who uses a OnePlus 9 and the person who loves the rose bouquet are next to each other.\n14. The person who loves the boquet of iris is somewhere to the left of Eric.\n15. The Dunhill smoker is Peter.\n16. The person who loves blue is Peter.\n17. The person who loves the vase of tulips is Bob.\n18. Alice is in the first house.\n19. The person who loves baseball is directly left of the person who smokes Blue Master.\n20. The person who uses a Google Pixel 6 is somewhere to the right of the person who smokes many unique blends.\n21. The person who loves soccer is Carol.\n22. The person who loves a carnations arrangement is directly left of the person who smokes many unique blends.\n23. Eric is the person who smokes many unique blends.\n24. The person who loves volleyball is the person who uses an iPhone 13.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "PhoneModel",
        "Cigar",
        "Flower",
        "Color",
        "FavoriteSport"
      ],
      "rows": [
        [
          "1",
          "Alice",
          "samsung galaxy s21",
          "yellow monster",
          "iris",
          "red",
          "baseball"
        ],
        [
          "2",
          "Carol",
          "oneplus 9",
          "blue master",
          "carnations",
          "green",
          "soccer"
        ],
        [
          "3",
          "Eric",
          "xiaomi mi 11",
          "blends",
          "roses",
          "yellow",
          "tennis"
        ],
        [
          "4",
          "Peter",
          "iphone 13",
          "dunhill",
          "lilies",
          "blue",
          "volleyball"
        ],
        [
          "5",
          "Arnold",
          "huawei p50",
          "prince",
          "daffodils",
          "purple",
          "basketball"
        ],
        [
          "6",
          "Bob",
          "google pixel 6",
          "pall mall",
          "tulips",
          "white",
          "swimming"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Carol, Eric, Alice, Bob, Arnold])\nphoneModels = EnumSort([huawei_p50, google_pixel_6, xiaomi_mi_11, iphone_13, samsung_galaxy_s21, oneplus_9])\ncigars = EnumSort([dunhill, pall_mall, blends, blue_master, prince, yellow_monster])\nflowers = EnumSort([daffodils, carnations, roses, tulips, lilies, iris])\ncolors = EnumSort([yellow, red, green, blue, white, purple])\nsports = EnumSort([soccer, tennis, basketball, volleyball, swimming, baseball])\nlives = Function([people] -> [int])\nuses_phone = Function([people] -> [phoneModels])\nsmokes_cigar = Function([people] -> [cigars])\nloves_flower = Function([people] -> [flowers])\nhas_color = Function([people] -> [colors])\nloves_sport = Function([people] -> [sports])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "The person who uses a OnePlus 9 is in the second house\nThe person who uses a Xiaomi Mi 11 is somewhere to the left of the person who uses a Huawei P50\nCarol is the person who loves a carnations arrangement\nThe person who loves purple is directly left of the person partial to Pall Mall\nThe person whose favorite color is green is the person who smokes Blue Master\nThe person who loves yellow and the person who loves blue are next to each other\nEric is somewhere to the right of the person who uses a Samsung Galaxy S21\nThere are two houses between Carol and the person who loves a bouquet of daffodils\nThe Prince smoker is the person who loves basketball\nThe Dunhill smoker is the person who loves volleyball\nThe person who loves swimming is the person who uses a Google Pixel 6\nThe person who uses a Huawei P50 is directly left of the person who loves white\nThe person who uses a OnePlus 9 and the person who loves the rose bouquet are next to each other\nThe person who loves the boquet of iris is somewhere to the left of Eric\nThe Dunhill smoker is Peter\nThe person who loves blue is Peter\nThe person who loves the vase of tulips is Bob\nAlice is in the first house\nThe person who loves baseball is directly left of the person who smokes Blue Master\nThe person who uses a Google Pixel 6 is somewhere to the right of the person who smokes many unique blends\nThe person who loves soccer is Carol\nThe person who loves a carnations arrangement is directly left of the person who smokes many unique blends\nEric is the person who smokes many unique blends\nThe person who loves volleyball is the person who uses an iPhone 13",
    "queries": "And( And(lives(Alice) == 1, uses_phone(Alice) == samsung_galaxy_s21, smokes_cigar(Alice) == yellow_monster, loves_flower(Alice) == iris, has_color(Alice) == red, loves_sport(Alice) == baseball), And(lives(Carol) == 2, uses_phone(Carol) == oneplus_9, smokes_cigar(Carol) == blue_master, loves_flower(Carol) == carnations, has_color(Carol) == green, loves_sport(Carol) == soccer), And(lives(Eric) == 3, uses_phone(Eric) == xiaomi_mi_11, smokes_cigar(Eric) == blends, loves_flower(Eric) == roses, has_color(Eric) == yellow, loves_sport(Eric) == tennis), And(lives(Peter) == 4, uses_phone(Peter) == iphone_13, smokes_cigar(Peter) == dunhill, loves_flower(Peter) == lilies, has_color(Peter) == blue, loves_sport(Peter) == volleyball), And(lives(Arnold) == 5, uses_phone(Arnold) == huawei_p50, smokes_cigar(Arnold) == prince, loves_flower(Arnold) == daffodils, has_color(Arnold) == purple, loves_sport(Arnold) == basketball), And(lives(Bob) == 6, uses_phone(Bob) == google_pixel_6, smokes_cigar(Bob) == pall_mall, loves_flower(Bob) == tulips, has_color(Bob) == white, loves_sport(Bob) == swimming) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-13",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Peter`, `Arnold`, `Alice`, `Bob`\n - Each person has a unique level of education: `associate`, `bachelor`, `high school`, `master`, `doctorate`\n - People have unique favorite sports: `swimming`, `basketball`, `tennis`, `baseball`, `soccer`\n - Each person prefers a unique type of vacation: `camping`, `cruise`, `city`, `mountain`, `beach`\n - People use unique phone models: `google pixel 6`, `huawei p50`, `oneplus 9`, `samsung galaxy s21`, `iphone 13`\n\nClues:\n1. The person who uses a Huawei P50 is not in the second house.\n2. The person with a master's degree is the person who uses a Google Pixel 6.\n3. The person who loves swimming is the person with a high school diploma.\n4. The person with a bachelor's degree is directly left of the person who loves tennis.\n5. The person who enjoys camping trips is the person who loves tennis.\n6. Bob is the person who uses a Samsung Galaxy S21.\n7. The person with a high school diploma is not in the third house.\n8. The person who loves swimming is directly left of the person who loves beach vacations.\n9. The person who likes going on cruises is Arnold.\n10. Bob is the person with an associate's degree.\n11. The person who uses a OnePlus 9 is directly left of the person who loves basketball.\n12. The person who enjoys camping trips and the person who prefers city breaks are next to each other.\n13. Eric is the person who loves swimming.\n14. The person who loves basketball is the person who enjoys mountain retreats.\n15. The person who loves tennis is somewhere to the left of Alice.\n16. Arnold is the person who loves soccer.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Education",
        "FavoriteSport",
        "Vacation",
        "PhoneModel"
      ],
      "rows": [
        [
          "1",
          "Arnold",
          "doctorate",
          "soccer",
          "cruise",
          "oneplus 9"
        ],
        [
          "2",
          "Peter",
          "bachelor",
          "basketball",
          "mountain",
          "iphone 13"
        ],
        [
          "3",
          "Bob",
          "associate",
          "tennis",
          "camping",
          "samsung galaxy s21"
        ],
        [
          "4",
          "Eric",
          "high school",
          "swimming",
          "city",
          "huawei p50"
        ],
        [
          "5",
          "Alice",
          "master",
          "baseball",
          "beach",
          "google pixel 6"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Peter, Arnold, Alice, Bob])\neducationLevels = EnumSort([associate, bachelor, high_school, master, doctorate])\nsports = EnumSort([swimming, basketball, tennis, baseball, soccer])\nvacations = EnumSort([camping, cruise, city, mountain, beach])\nphones = EnumSort([google_pixel_6, huawei_p50, oneplus_9, samsung_galaxy_s21, iphone_13])\nlives = Function([people] -> [int])\nhas_education = Function([people] -> [educationLevels])\nhas_sport = Function([people] -> [sports])\nhas_vacation = Function([people] -> [vacations])\nhas_phone = Function([people] -> [phones])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who uses a Huawei P50 is not in the second house\nThe person with a master's degree is the person who uses a Google Pixel 6\nThe person who loves swimming is the person with a high school diploma\nThe person with a bachelor's degree is directly left of the person who loves tennis\nThe person who enjoys camping trips is the person who loves tennis\nBob is the person who uses a Samsung Galaxy S21\nThe person with a high school diploma is not in the third house\nThe person who loves swimming is directly left of the person who loves beach vacations\nThe person who likes going on cruises is Arnold\nBob is the person with an associate's degree\nThe person who uses a OnePlus 9 is directly left of the person who loves basketball\nThe person who enjoys camping trips and the person who prefers city breaks are next to each other\nEric is the person who loves swimming\nThe person who loves basketball is the person who enjoys mountain retreats\nThe person who loves tennis is somewhere to the left of Alice\nArnold is the person who loves soccer",
    "queries": "And( And(lives(Arnold) == 1, has_education(Arnold) == doctorate, has_sport(Arnold) == soccer, has_vacation(Arnold) == cruise, has_phone(Arnold) == oneplus_9), And(lives(Peter) == 2, has_education(Peter) == bachelor, has_sport(Peter) == basketball, has_vacation(Peter) == mountain, has_phone(Peter) == iphone_13), And(lives(Bob) == 3, has_education(Bob) == associate, has_sport(Bob) == tennis, has_vacation(Bob) == camping, has_phone(Bob) == samsung_galaxy_s21), And(lives(Eric) == 4, has_education(Eric) == high_school, has_sport(Eric) == swimming, has_vacation(Eric) == city, has_phone(Eric) == huawei_p50), And(lives(Alice) == 5, has_education(Alice) == master, has_sport(Alice) == baseball, has_vacation(Alice) == beach, has_phone(Alice) == google_pixel_6) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-4x6-14",
    "context": "There are 4 houses, numbered 1 to 4 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Arnold`, `Eric`, `Peter`\n - They all have a unique favorite flower: `daffodils`, `roses`, `lilies`, `carnations`\n - Everyone has a favorite smoothie: `desert`, `watermelon`, `cherry`, `dragonfruit`\n - Each person lives in a unique style of house: `craftsman`, `colonial`, `ranch`, `victorian`\n - Each person has a unique hobby: `cooking`, `photography`, `gardening`, `painting`\n - Each person has a unique favorite drink: `coffee`, `tea`, `milk`, `water`\n\nClues:\n1. The person in a Craftsman-style house is the Dragonfruit smoothie lover.\n2. The tea drinker is the person who loves a bouquet of daffodils.\n3. The Desert smoothie lover is the person living in a colonial-style house.\n4. There is one house between the Watermelon smoothie lover and the person who loves a bouquet of daffodils.\n5. The person who likes Cherry smoothies is directly left of the photography enthusiast.\n6. The person who likes milk is the person who loves cooking.\n7. The tea drinker is Arnold.\n8. The person who loves the boquet of lilies is the person living in a colonial-style house.\n9. The person who loves the boquet of lilies is not in the third house.\n10. The person living in a colonial-style house is directly left of the person who paints as a hobby.\n11. The person in a ranch-style home is the person who likes milk.\n12. The person who loves the rose bouquet is the one who only drinks water.\n13. Eric is somewhere to the left of the Dragonfruit smoothie lover.\n14. The person who loves the rose bouquet is somewhere to the right of the person who loves a carnations arrangement.\n15. Peter is the person who loves the boquet of lilies.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Flower",
        "Smoothie",
        "HouseStyle",
        "Hobby",
        "Drink"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "carnations",
          "watermelon",
          "ranch",
          "cooking",
          "milk"
        ],
        [
          "2",
          "Peter",
          "lilies",
          "desert",
          "colonial",
          "gardening",
          "coffee"
        ],
        [
          "3",
          "Arnold",
          "daffodils",
          "cherry",
          "victorian",
          "painting",
          "tea"
        ],
        [
          "4",
          "Alice",
          "roses",
          "dragonfruit",
          "craftsman",
          "photography",
          "water"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Arnold, Eric, Peter])\nflowers = EnumSort([daffodils, roses, lilies, carnations])\nsmoothies = EnumSort([desert, watermelon, cherry, dragonfruit])\nhouses = EnumSort([craftsman, colonial, ranch, victorian])\nhobbies = EnumSort([cooking, photography, gardening, painting])\ndrinks = EnumSort([coffee, tea, milk, water])\nlives = Function([people] -> [int])\nhas_flower = Function([people] -> [flowers])\nhas_smoothie = Function([people] -> [smoothies])\nhas_house = Function([people] -> [houses])\nhas_hobby = Function([people] -> [hobbies])\nhas_drink = Function([people] -> [drinks])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 4))",
    "constraints": "The person in a Craftsman-style house is the Dragonfruit smoothie lover\nThe tea drinker is the person who loves a bouquet of daffodils\nThe Desert smoothie lover is the person living in a colonial-style house\nThere is one house between the Watermelon smoothie lover and the person who loves a bouquet of daffodils\nThe person who likes Cherry smoothies is directly left of the photography enthusiast\nThe person who likes milk is the person who loves cooking\nThe tea drinker is Arnold\nThe person who loves the boquet of lilies is the person living in a colonial-style house\nThe person who loves the boquet of lilies is not in the third house\nThe person living in a colonial-style house is directly left of the person who paints as a hobby\nThe person in a ranch-style home is the person who likes milk\nThe person who loves the rose bouquet is the one who only drinks water\nEric is somewhere to the left of the Dragonfruit smoothie lover\nThe person who loves the rose bouquet is somewhere to the right of the person who loves a carnations arrangement\nPeter is the person who loves the boquet of lilies",
    "queries": "And( And(lives(Eric) == 1, has_flower(Eric) == carnations, has_smoothie(Eric) == watermelon, has_house(Eric) == ranch, has_hobby(Eric) == cooking, has_drink(Eric) == milk), And(lives(Peter) == 2, has_flower(Peter) == lilies, has_smoothie(Peter) == desert, has_house(Peter) == colonial, has_hobby(Peter) == gardening, has_drink(Peter) == coffee), And(lives(Arnold) == 3, has_flower(Arnold) == daffodils, has_smoothie(Arnold) == cherry, has_house(Arnold) == victorian, has_hobby(Arnold) == painting, has_drink(Arnold) == tea), And(lives(Alice) == 4, has_flower(Alice) == roses, has_smoothie(Alice) == dragonfruit, has_house(Alice) == craftsman, has_hobby(Alice) == photography, has_drink(Alice) == water) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-6x4-33",
    "context": "There are 6 houses, numbered 1 to 6 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Eric`, `Alice`, `Carol`, `Arnold`, `Bob`, `Peter`\n - People have unique heights: `average`, `super tall`, `tall`, `short`, `very short`, `very tall`\n - The people are of nationalities: `chinese`, `brit`, `german`, `swede`, `norwegian`, `dane`\n - People have unique hair colors: `black`, `blonde`, `brown`, `auburn`, `gray`, `red`\n\nClues:\n1. Eric is the Norwegian.\n2. There is one house between the person who is very short and the person who has auburn hair.\n3. The person who is short is Arnold.\n4. The Dane is the person who is super tall.\n5. The British person is in the sixth house.\n6. The person who is very short is somewhere to the right of the German.\n7. The person who has gray hair is in the fifth house.\n8. The person who has gray hair is Carol.\n9. Bob is the person who has black hair.\n10. The person who has red hair is in the second house.\n11. The person who is super tall is directly left of Arnold.\n12. There are two houses between Alice and the person who has an average height.\n13. The Dane is not in the first house.\n14. Bob is somewhere to the left of the Norwegian.\n15. The person who is tall is the person who has gray hair.\n16. The Chinese is in the fifth house.\n17. There is one house between the person who is very tall and the person who has blonde hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Height",
        "Nationality",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "very tall",
          "german",
          "black"
        ],
        [
          "2",
          "Eric",
          "very short",
          "norwegian",
          "red"
        ],
        [
          "3",
          "Alice",
          "super tall",
          "dane",
          "blonde"
        ],
        [
          "4",
          "Arnold",
          "short",
          "swede",
          "auburn"
        ],
        [
          "5",
          "Carol",
          "tall",
          "chinese",
          "gray"
        ],
        [
          "6",
          "Peter",
          "average",
          "brit",
          "brown"
        ]
      ]
    },
    "declarations": "people = EnumSort([Eric, Alice, Carol, Arnold, Bob, Peter])\nheights = EnumSort([average, super_tall, tall, short, very_short, very_tall])\nnationalities = EnumSort([chinese, brit, german, swede, norwegian, dane])\nhairColors = EnumSort([black, blonde, brown, auburn, gray, red])\nlives = Function([people] -> [int])\nhas_height = Function([people] -> [heights])\nhas_nationality = Function([people] -> [nationalities])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 6))",
    "constraints": "Eric is the Norwegian\nThere is one house between the person who is very short and the person who has auburn hair\nThe person who is short is Arnold\nThe Dane is the person who is super tall\nThe British person is in the sixth house\nThe person who is very short is somewhere to the right of the German\nThe person who has gray hair is in the fifth house\nThe person who has gray hair is Carol\nBob is the person who has black hair\nThe person who has red hair is in the second house\nThe person who is super tall is directly left of Arnold\nThere are two houses between Alice and the person who has an average height\nThe Dane is not in the first house\nBob is somewhere to the left of the Norwegian\nThe person who is tall is the person who has gray hair\nThe Chinese is in the fifth house\nThere is one house between the person who is very tall and the person who has blonde hair",
    "queries": "And( And(lives(Bob) == 1, has_height(Bob) == very_tall, has_nationality(Bob) == german, has_hairColor(Bob) == black), And(lives(Eric) == 2, has_height(Eric) == very_short, has_nationality(Eric) == norwegian, has_hairColor(Eric) == red), And(lives(Alice) == 3, has_height(Alice) == super_tall, has_nationality(Alice) == dane, has_hairColor(Alice) == blonde), And(lives(Arnold) == 4, has_height(Arnold) == short, has_nationality(Arnold) == swede, has_hairColor(Arnold) == auburn), And(lives(Carol) == 5, has_height(Carol) == tall, has_nationality(Carol) == chinese, has_hairColor(Carol) == gray), And(lives(Peter) == 6, has_height(Peter) == average, has_nationality(Peter) == brit, has_hairColor(Peter) == brown) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-38",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Bob`, `Eric`, `Arnold`, `Alice`\n - People have unique hair colors: `brown`, `black`, `gray`, `blonde`, `red`\n - Everyone has a unique favorite cigar: `pall mall`, `dunhill`, `prince`, `blue master`, `blends`\n - Each person has a unique favorite drink: `milk`, `coffee`, `water`, `tea`, `root beer`\n - People have unique favorite music genres: `rock`, `classical`, `pop`, `jazz`, `hip hop`\n\nClues:\n1. The person who has gray hair and Bob are next to each other.\n2. Arnold is not in the first house.\n3. The person who has blonde hair is not in the second house.\n4. Peter is not in the first house.\n5. The Dunhill smoker is the person who likes milk.\n6. Arnold is the one who only drinks water.\n7. The person who loves classical music is the person partial to Pall Mall.\n8. The person who loves pop music is directly left of the person who loves jazz music.\n9. The person who has brown hair is Bob.\n10. The person who has red hair is the person who loves hip-hop music.\n11. The root beer lover is Alice.\n12. The person who has black hair is in the third house.\n13. There are two houses between the coffee drinker and Arnold.\n14. The person who smokes Blue Master is somewhere to the right of the person who loves hip-hop music.\n15. The person who has blonde hair is the person who smokes many unique blends.\n16. Alice is the person who loves classical music.\n17. The Dunhill smoker is the person who loves jazz music.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "HairColor",
        "Cigar",
        "Drink",
        "MusicGenre"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "blonde",
          "blends",
          "coffee",
          "rock"
        ],
        [
          "2",
          "Peter",
          "red",
          "prince",
          "tea",
          "hip hop"
        ],
        [
          "3",
          "Alice",
          "black",
          "pall mall",
          "root beer",
          "classical"
        ],
        [
          "4",
          "Arnold",
          "gray",
          "blue master",
          "water",
          "pop"
        ],
        [
          "5",
          "Bob",
          "brown",
          "dunhill",
          "milk",
          "jazz"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Bob, Eric, Arnold, Alice])\nhairColors = EnumSort([brown, black, gray, blonde, red])\ncigars = EnumSort([pall_mall, dunhill, prince, blue_master, blends])\ndrinks = EnumSort([milk, coffee, water, tea, root_beer])\nmusicGenres = EnumSort([rock, classical, pop, jazz, hip_hop])\nlives = Function([people] -> [int])\nhas_hairColor = Function([people] -> [hairColors])\nhas_cigar = Function([people] -> [cigars])\nhas_drink = Function([people] -> [drinks])\nhas_musicGenre = Function([people] -> [musicGenres])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has gray hair and Bob are next to each other\nArnold is not in the first house\nThe person who has blonde hair is not in the second house\nPeter is not in the first house\nThe Dunhill smoker is the person who likes milk\nArnold is the one who only drinks water\nThe person who loves classical music is the person partial to Pall Mall\nThe person who loves pop music is directly left of the person who loves jazz music\nThe person who has brown hair is Bob\nThe person who has red hair is the person who loves hip-hop music\nThe root beer lover is Alice\nThe person who has black hair is in the third house\nThere are two houses between the coffee drinker and Arnold\nThe person who smokes Blue Master is somewhere to the right of the person who loves hip-hop music\nThe person who has blonde hair is the person who smokes many unique blends\nAlice is the person who loves classical music\nThe Dunhill smoker is the person who loves jazz music",
    "queries": "And( And(lives(Eric) == 1, has_hairColor(Eric) == blonde, has_cigar(Eric) == blends, has_drink(Eric) == coffee, has_musicGenre(Eric) == rock), And(lives(Peter) == 2, has_hairColor(Peter) == red, has_cigar(Peter) == prince, has_drink(Peter) == tea, has_musicGenre(Peter) == hip_hop), And(lives(Alice) == 3, has_hairColor(Alice) == black, has_cigar(Alice) == pall_mall, has_drink(Alice) == root_beer, has_musicGenre(Alice) == classical), And(lives(Arnold) == 4, has_hairColor(Arnold) == gray, has_cigar(Arnold) == blue_master, has_drink(Arnold) == water, has_musicGenre(Arnold) == pop), And(lives(Bob) == 5, has_hairColor(Bob) == brown, has_cigar(Bob) == dunhill, has_drink(Bob) == milk, has_musicGenre(Bob) == jazz) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-34",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Peter`, `Eric`, `Arnold`, `Bob`, `Alice`\n - Each person has a unique type of pet: `fish`, `dog`, `cat`, `bird`, `hamster`\n - People have unique hair colors: `black`, `red`, `gray`, `blonde`, `brown`\n - People have unique heights: `tall`, `very tall`, `very short`, `short`, `average`\n - The mothers' names in different houses are unique: `Janelle`, `Penny`, `Holly`, `Aniya`, `Kailyn`\n\nClues:\n1. The person who has red hair is the person who keeps a pet bird.\n2. The person whose mother's name is Kailyn is Eric.\n3. There is one house between the person who has gray hair and the person who has a cat.\n4. The person whose mother's name is Janelle is Peter.\n5. The person who is tall is directly left of The person whose mother's name is Janelle.\n6. The person who has an average height is directly left of the person who has brown hair.\n7. The person whose mother's name is Kailyn is the person who is very short.\n8. The person who is very tall is somewhere to the right of The person whose mother's name is Janelle.\n9. The person whose mother's name is Penny is in the first house.\n10. The person with a pet hamster is in the first house.\n11. The person who is tall is the person with an aquarium of fish.\n12. The person whose mother's name is Kailyn is somewhere to the left of The person whose mother's name is Aniya.\n13. The person who owns a dog is in the fifth house.\n14. The person whose mother's name is Kailyn is directly left of the person who has black hair.\n15. Bob is somewhere to the left of the person with an aquarium of fish.\n16. The person who keeps a pet bird is directly left of Arnold.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Pet",
        "HairColor",
        "Height",
        "Mother"
      ],
      "rows": [
        [
          "1",
          "Bob",
          "hamster",
          "gray",
          "average",
          "Penny"
        ],
        [
          "2",
          "Alice",
          "fish",
          "brown",
          "tall",
          "Holly"
        ],
        [
          "3",
          "Peter",
          "cat",
          "blonde",
          "short",
          "Janelle"
        ],
        [
          "4",
          "Eric",
          "bird",
          "red",
          "very short",
          "Kailyn"
        ],
        [
          "5",
          "Arnold",
          "dog",
          "black",
          "very tall",
          "Aniya"
        ]
      ]
    },
    "declarations": "people = EnumSort([Peter, Eric, Arnold, Bob, Alice])\npets = EnumSort([fish, dog, cat, bird, hamster])\nhairColors = EnumSort([black, red, gray, blonde, brown])\nheights = EnumSort([tall, very_tall, very_short, short, average])\nmothersNames = EnumSort([Janelle, Penny, Holly, Aniya, Kailyn])\nlives = Function([people] -> [int])\nhas_pet = Function([people] -> [pets])\nhas_hairColor = Function([people] -> [hairColors])\nhas_height = Function([people] -> [heights])\nhas_motherName = Function([people] -> [mothersNames])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person who has red hair is the person who keeps a pet bird\nThe person whose mother's name is Kailyn is Eric\nThere is one house between the person who has gray hair and the person who has a cat\nThe person whose mother's name is Janelle is Peter\nThe person who is tall is directly left of The person whose mother's name is Janelle\nThe person who has an average height is directly left of the person who has brown hair\nThe person whose mother's name is Kailyn is the person who is very short\nThe person who is very tall is somewhere to the right of The person whose mother's name is Janelle\nThe person whose mother's name is Penny is in the first house\nThe person with a pet hamster is in the first house\nThe person who is tall is the person with an aquarium of fish\nThe person whose mother's name is Kailyn is somewhere to the left of The person whose mother's name is Aniya\nThe person who owns a dog is in the fifth house\nThe person whose mother's name is Kailyn is directly left of the person who has black hair\nBob is somewhere to the left of the person with an aquarium of fish\nThe person who keeps a pet bird is directly left of Arnold",
    "queries": "And( And(lives(Bob) == 1, has_pet(Bob) == hamster, has_hairColor(Bob) == gray, has_height(Bob) == average, has_motherName(Bob) == Penny), And(lives(Alice) == 2, has_pet(Alice) == fish, has_hairColor(Alice) == brown, has_height(Alice) == tall, has_motherName(Alice) == Holly), And(lives(Peter) == 3, has_pet(Peter) == cat, has_hairColor(Peter) == blonde, has_height(Peter) == short, has_motherName(Peter) == Janelle), And(lives(Eric) == 4, has_pet(Eric) == bird, has_hairColor(Eric) == red, has_height(Eric) == very_short, has_motherName(Eric) == Kailyn), And(lives(Arnold) == 5, has_pet(Arnold) == dog, has_hairColor(Arnold) == black, has_height(Arnold) == very_tall, has_motherName(Arnold) == Aniya) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  },
  {
    "id": "lgp-test-5x5-39",
    "context": "There are 5 houses, numbered 1 to 5 from left to right, as seen from across the street. Each house is occupied by a different person. Each house has a unique attribute for each of the following characteristics:\n - Each person has a unique name: `Alice`, `Eric`, `Bob`, `Peter`, `Arnold`\n - Each person has a unique birthday month: `mar`, `april`, `sept`, `feb`, `jan`\n - The mothers' names in different houses are unique: `Holly`, `Janelle`, `Kailyn`, `Penny`, `Aniya`\n - Each person has an occupation: `engineer`, `doctor`, `lawyer`, `artist`, `teacher`\n - People have unique hair colors: `red`, `blonde`, `black`, `gray`, `brown`\n\nClues:\n1. The person whose birthday is in March is in the fifth house.\n2. The person whose birthday is in February is in the first house.\n3. The person who is a doctor is Eric.\n4. The person whose mother's name is Janelle is in the third house.\n5. The person who is an artist is the person who has brown hair.\n6. The person who is an artist is in the fourth house.\n7. The person whose mother's name is Penny is somewhere to the left of the person who has black hair.\n8. Peter is the person who has black hair.\n9. The person who has gray hair is the person who is a teacher.\n10. Alice is The person whose mother's name is Kailyn.\n11. Arnold is somewhere to the right of the person whose birthday is in September.\n12. The person who has brown hair is the person whose birthday is in January.\n13. Arnold is the person who has blonde hair.\n14. The person whose mother's name is Holly is the person who has black hair.\n15. Peter is the person who is a lawyer.\n16. The person whose birthday is in September is somewhere to the left of The person whose mother's name is Kailyn.\n17. Alice is the person who has gray hair.",
    "question": null,
    "options": null,
    "answer": {
      "header": [
        "House",
        "Name",
        "Birthday",
        "Mother",
        "Occupation",
        "HairColor"
      ],
      "rows": [
        [
          "1",
          "Eric",
          "feb",
          "Penny",
          "doctor",
          "red"
        ],
        [
          "2",
          "Peter",
          "sept",
          "Holly",
          "lawyer",
          "black"
        ],
        [
          "3",
          "Arnold",
          "april",
          "Janelle",
          "engineer",
          "blonde"
        ],
        [
          "4",
          "Bob",
          "jan",
          "Aniya",
          "artist",
          "brown"
        ],
        [
          "5",
          "Alice",
          "mar",
          "Kailyn",
          "teacher",
          "gray"
        ]
      ]
    },
    "declarations": "people = EnumSort([Alice, Eric, Bob, Peter, Arnold])\nmonths = EnumSort([mar, april, sept, feb, jan])\nmothers = EnumSort([Holly, Janelle, Kailyn, Penny, Aniya])\noccupations = EnumSort([engineer, doctor, lawyer, artist, teacher])\nhairColors = EnumSort([red, blonde, black, gray, brown])\nlives = Function([people] -> [int])\nhas_birthday = Function([people] -> [months])\nhas_mother = Function([people] -> [mothers])\nhas_occupation = Function([people] -> [occupations])\nhas_hairColor = Function([people] -> [hairColors])\nForAll([p:people], And(1 <= lives(p), lives(p) <= 5))",
    "constraints": "The person whose birthday is in March is in the fifth house\nThe person whose birthday is in February is in the first house\nThe person who is a doctor is Eric\nThe person whose mother's name is Janelle is in the third house\nThe person who is an artist is the person who has brown hair\nThe person who is an artist is in the fourth house\nThe person whose mother's name is Penny is somewhere to the left of the person who has black hair\nPeter is the person who has black hair\nThe person who has gray hair is the person who is a teacher\nAlice is The person whose mother's name is Kailyn\nArnold is somewhere to the right of the person whose birthday is in September\nThe person who has brown hair is the person whose birthday is in January\nArnold is the person who has blonde hair\nThe person whose mother's name is Holly is the person who has black hair\nPeter is the person who is a lawyer\nThe person whose birthday is in September is somewhere to the left of The person whose mother's name is Kailyn\nAlice is the person who has gray hair",
    "queries": "And( And(lives(Eric) == 1, has_birthday(Eric) == feb, has_mother(Eric) == Penny, has_occupation(Eric) == doctor, has_hairColor(Eric) == red), And(lives(Peter) == 2, has_birthday(Peter) == sept, has_mother(Peter) == Holly, has_occupation(Peter) == lawyer, has_hairColor(Peter) == black), And(lives(Arnold) == 3, has_birthday(Arnold) == april, has_mother(Arnold) == Janelle, has_occupation(Arnold) == engineer, has_hairColor(Arnold) == blonde), And(lives(Bob) == 4, has_birthday(Bob) == jan, has_mother(Bob) == Aniya, has_occupation(Bob) == artist, has_hairColor(Bob) == brown), And(lives(Alice) == 5, has_birthday(Alice) == mar, has_mother(Alice) == Kailyn, has_occupation(Alice) == teacher, has_hairColor(Alice) == gray) )",
    "additional_constraints": null,
    "queries_function": "### Function\nis_valid()"
  }
]